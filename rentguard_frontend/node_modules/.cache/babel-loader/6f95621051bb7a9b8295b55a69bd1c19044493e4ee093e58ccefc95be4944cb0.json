{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  API_VERSION: () => API_VERSION,\n  BN_FEE_TRANSACTION_VERSION_1: () => BN_FEE_TRANSACTION_VERSION_1,\n  BN_FEE_TRANSACTION_VERSION_2: () => BN_FEE_TRANSACTION_VERSION_2,\n  BN_TRANSACTION_VERSION_1: () => BN_TRANSACTION_VERSION_1,\n  BN_TRANSACTION_VERSION_2: () => BN_TRANSACTION_VERSION_2,\n  BaseUrl: () => BaseUrl,\n  HEX_STR_TRANSACTION_VERSION_1: () => HEX_STR_TRANSACTION_VERSION_1,\n  HEX_STR_TRANSACTION_VERSION_2: () => HEX_STR_TRANSACTION_VERSION_2,\n  IS_BROWSER: () => IS_BROWSER,\n  MASK_250: () => MASK_250,\n  MASK_251: () => MASK_251,\n  NetworkName: () => NetworkName,\n  RPC_GOERLI_NODES: () => RPC_GOERLI_NODES,\n  RPC_MAINNET_NODES: () => RPC_MAINNET_NODES,\n  StarknetChainId: () => StarknetChainId,\n  TEXT_TO_FELT_MAX_LEN: () => TEXT_TO_FELT_MAX_LEN,\n  TransactionHashPrefix: () => TransactionHashPrefix,\n  UDC: () => UDC,\n  ZERO: () => ZERO\n});\n\n// src/utils/encode.ts\nvar encode_exports = {};\n__export(encode_exports, {\n  IS_BROWSER: () => IS_BROWSER,\n  addHexPrefix: () => addHexPrefix,\n  arrayBufferToString: () => arrayBufferToString,\n  atobUniversal: () => atobUniversal,\n  btoaUniversal: () => btoaUniversal,\n  buf2hex: () => buf2hex,\n  calcByteLength: () => calcByteLength,\n  padLeft: () => padLeft,\n  pascalToSnake: () => pascalToSnake,\n  removeHexPrefix: () => removeHexPrefix,\n  sanitizeBytes: () => sanitizeBytes,\n  sanitizeHex: () => sanitizeHex,\n  stringToArrayBuffer: () => stringToArrayBuffer,\n  utf8ToArray: () => utf8ToArray\n});\nimport { base64 } from \"@scure/base\";\nvar IS_BROWSER = typeof window !== \"undefined\";\nvar STRING_ZERO = \"0\";\nfunction arrayBufferToString(array) {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), \"\");\n}\nfunction utf8ToArray(str) {\n  return new TextEncoder().encode(str);\n}\nfunction stringToArrayBuffer(str) {\n  return utf8ToArray(str);\n}\nfunction atobUniversal(a) {\n  return base64.decode(a);\n}\nfunction btoaUniversal(b) {\n  return base64.encode(new Uint8Array(b));\n}\nfunction buf2hex(buffer) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/i, \"\");\n}\nfunction addHexPrefix(hex) {\n  return `0x${removeHexPrefix(hex)}`;\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n  return padString(str, length, true, padding);\n}\nfunction calcByteLength(str, byteSize = 8) {\n  const {\n    length\n  } = str;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nvar pascalToSnake = text => /[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join(\"_\").toUpperCase() : text;\n\n// src/constants.ts\nvar TEXT_TO_FELT_MAX_LEN = 31;\nvar HEX_STR_TRANSACTION_VERSION_1 = \"0x1\";\nvar HEX_STR_TRANSACTION_VERSION_2 = \"0x2\";\nvar BN_TRANSACTION_VERSION_1 = 1n;\nvar BN_TRANSACTION_VERSION_2 = 2n;\nvar BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nvar BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\nvar ZERO = 0n;\nvar MASK_250 = 2n ** 250n - 1n;\nvar MASK_251 = 2n ** 251n;\nvar API_VERSION = ZERO;\nvar BaseUrl = /* @__PURE__ */(BaseUrl2 => {\n  BaseUrl2[\"SN_MAIN\"] = \"https://alpha-mainnet.starknet.io\";\n  BaseUrl2[\"SN_GOERLI\"] = \"https://alpha4.starknet.io\";\n  return BaseUrl2;\n})(BaseUrl || {});\nvar NetworkName = /* @__PURE__ */(NetworkName2 => {\n  NetworkName2[\"SN_MAIN\"] = \"SN_MAIN\";\n  NetworkName2[\"SN_GOERLI\"] = \"SN_GOERLI\";\n  return NetworkName2;\n})(NetworkName || {});\nvar StarknetChainId = /* @__PURE__ */(StarknetChainId4 => {\n  StarknetChainId4[\"SN_MAIN\"] = \"0x534e5f4d41494e\";\n  StarknetChainId4[\"SN_GOERLI\"] = \"0x534e5f474f45524c49\";\n  return StarknetChainId4;\n})(StarknetChainId || {});\nvar TransactionHashPrefix = /* @__PURE__ */(TransactionHashPrefix2 => {\n  TransactionHashPrefix2[\"DECLARE\"] = \"0x6465636c617265\";\n  TransactionHashPrefix2[\"DEPLOY\"] = \"0x6465706c6f79\";\n  TransactionHashPrefix2[\"DEPLOY_ACCOUNT\"] = \"0x6465706c6f795f6163636f756e74\";\n  TransactionHashPrefix2[\"INVOKE\"] = \"0x696e766f6b65\";\n  TransactionHashPrefix2[\"L1_HANDLER\"] = \"0x6c315f68616e646c6572\";\n  return TransactionHashPrefix2;\n})(TransactionHashPrefix || {});\nvar UDC = {\n  ADDRESS: \"0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\",\n  ENTRYPOINT: \"deployContract\"\n};\nvar RPC_GOERLI_NODES = [\"https://starknet-testnet.public.blastapi.io/rpc/v0.5\", \"https://limited-rpc.nethermind.io/goerli-juno/v0_5\"];\nvar RPC_MAINNET_NODES = [\"https://starknet-mainnet.public.blastapi.io/rpc/v0.5\", \"https://limited-rpc.nethermind.io/mainnet-juno/v0_5\"];\n\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n  BlockStatus: () => BlockStatus,\n  BlockTag: () => BlockTag,\n  EntryPointType: () => EntryPointType,\n  Litteral: () => Litteral,\n  RPC: () => rpc_exports,\n  SIMULATION_FLAG: () => SIMULATION_FLAG,\n  Sequencer: () => sequencer_exports,\n  TransactionExecutionStatus: () => TransactionExecutionStatus,\n  TransactionFinalityStatus: () => TransactionFinalityStatus,\n  TransactionStatus: () => TransactionStatus,\n  TransactionType: () => TransactionType,\n  Uint: () => Uint,\n  ValidateType: () => ValidateType\n});\n\n// src/types/account.ts\nvar SIMULATION_FLAG = /* @__PURE__ */(SIMULATION_FLAG2 => {\n  SIMULATION_FLAG2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  SIMULATION_FLAG2[\"SKIP_EXECUTE\"] = \"SKIP_EXECUTE\";\n  return SIMULATION_FLAG2;\n})(SIMULATION_FLAG || {});\n\n// src/types/calldata.ts\nvar ValidateType = /* @__PURE__ */(ValidateType2 => {\n  ValidateType2[\"DEPLOY\"] = \"DEPLOY\";\n  ValidateType2[\"CALL\"] = \"CALL\";\n  ValidateType2[\"INVOKE\"] = \"INVOKE\";\n  return ValidateType2;\n})(ValidateType || {});\nvar Uint = /* @__PURE__ */(Uint2 => {\n  Uint2[\"u8\"] = \"core::integer::u8\";\n  Uint2[\"u16\"] = \"core::integer::u16\";\n  Uint2[\"u32\"] = \"core::integer::u32\";\n  Uint2[\"u64\"] = \"core::integer::u64\";\n  Uint2[\"u128\"] = \"core::integer::u128\";\n  Uint2[\"u256\"] = \"core::integer::u256\";\n  return Uint2;\n})(Uint || {});\nvar Litteral = /* @__PURE__ */(Litteral2 => {\n  Litteral2[\"ClassHash\"] = \"core::starknet::class_hash::ClassHash\";\n  Litteral2[\"ContractAddress\"] = \"core::starknet::contract_address::ContractAddress\";\n  return Litteral2;\n})(Litteral || {});\n\n// src/types/lib/contract/index.ts\nvar EntryPointType = /* @__PURE__ */(EntryPointType2 => {\n  EntryPointType2[\"EXTERNAL\"] = \"EXTERNAL\";\n  EntryPointType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  EntryPointType2[\"CONSTRUCTOR\"] = \"CONSTRUCTOR\";\n  return EntryPointType2;\n})(EntryPointType || {});\n\n// src/types/lib/index.ts\nvar TransactionType = /* @__PURE__ */(TransactionType2 => {\n  TransactionType2[\"DECLARE\"] = \"DECLARE\";\n  TransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  TransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  TransactionType2[\"INVOKE\"] = \"INVOKE_FUNCTION\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionStatus = /* @__PURE__ */(TransactionStatus2 => {\n  TransactionStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  TransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar TransactionFinalityStatus = /* @__PURE__ */(TransactionFinalityStatus2 => {\n  TransactionFinalityStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionFinalityStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return TransactionFinalityStatus2;\n})(TransactionFinalityStatus || {});\nvar TransactionExecutionStatus = /* @__PURE__ */(TransactionExecutionStatus2 => {\n  TransactionExecutionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  TransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  return TransactionExecutionStatus2;\n})(TransactionExecutionStatus || {});\nvar BlockStatus = /* @__PURE__ */(BlockStatus2 => {\n  BlockStatus2[\"PENDING\"] = \"PENDING\";\n  BlockStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  BlockStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  BlockStatus2[\"REJECTED\"] = \"REJECTED\";\n  return BlockStatus2;\n})(BlockStatus || {});\nvar BlockTag = /* @__PURE__ */(BlockTag2 => {\n  BlockTag2[\"pending\"] = \"pending\";\n  BlockTag2[\"latest\"] = \"latest\";\n  return BlockTag2;\n})(BlockTag || {});\n\n// src/types/api/rpc.ts\nvar rpc_exports = {};\n__export(rpc_exports, {\n  EBlockTag: () => EBlockTag,\n  EDataAvailabilityMode: () => EDataAvailabilityMode,\n  ESimulationFlag: () => ESimulationFlag,\n  ETransactionExecutionStatus: () => ETransactionExecutionStatus,\n  ETransactionFinalityStatus: () => ETransactionFinalityStatus,\n  ETransactionStatus: () => ETransactionStatus,\n  ETransactionType: () => ETransactionType,\n  Errors: () => errors_exports,\n  JRPC: () => jsonrpc_exports,\n  SPEC: () => components_exports\n});\n\n// src/types/api/jsonrpc/index.ts\nvar jsonrpc_exports = {};\n\n// src/types/api/rpcspec/errors.ts\nvar errors_exports = {};\n\n// src/types/api/rpcspec/components.ts\nvar components_exports = {};\n\n// src/types/api/rpcspec/nonspec.ts\nvar ETransactionType = /* @__PURE__ */(ETransactionType2 => {\n  ETransactionType2[\"DECLARE\"] = \"DECLARE\";\n  ETransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  ETransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  ETransactionType2[\"INVOKE\"] = \"INVOKE\";\n  ETransactionType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  return ETransactionType2;\n})(ETransactionType || {});\nvar ESimulationFlag = /* @__PURE__ */(ESimulationFlag2 => {\n  ESimulationFlag2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  ESimulationFlag2[\"SKIP_FEE_CHARGE\"] = \"SKIP_FEE_CHARGE\";\n  return ESimulationFlag2;\n})(ESimulationFlag || {});\nvar ETransactionStatus = /* @__PURE__ */(ETransactionStatus2 => {\n  ETransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  ETransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  ETransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionStatus2;\n})(ETransactionStatus || {});\nvar ETransactionFinalityStatus = /* @__PURE__ */(ETransactionFinalityStatus2 => {\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionFinalityStatus2;\n})(ETransactionFinalityStatus || {});\nvar ETransactionExecutionStatus = /* @__PURE__ */(ETransactionExecutionStatus2 => {\n  ETransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  ETransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return ETransactionExecutionStatus2;\n})(ETransactionExecutionStatus || {});\nvar EBlockTag = /* @__PURE__ */(EBlockTag2 => {\n  EBlockTag2[\"LATEST\"] = \"latest\";\n  EBlockTag2[\"PENDING\"] = \"pending\";\n  return EBlockTag2;\n})(EBlockTag || {});\nvar EDataAvailabilityMode = /* @__PURE__ */(EDataAvailabilityMode2 => {\n  EDataAvailabilityMode2[\"L1\"] = \"L1\";\n  EDataAvailabilityMode2[\"L2\"] = \"L2\";\n  return EDataAvailabilityMode2;\n})(EDataAvailabilityMode || {});\n\n// src/types/api/sequencer.ts\nvar sequencer_exports = {};\n\n// src/utils/assert.ts\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failure\");\n  }\n}\n\n// src/utils/num.ts\nvar num_exports = {};\n__export(num_exports, {\n  assertInRange: () => assertInRange,\n  bigNumberishArrayToDecimalStringArray: () => bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray: () => bigNumberishArrayToHexadecimalStringArray,\n  cleanHex: () => cleanHex,\n  getDecimalString: () => getDecimalString,\n  getHexString: () => getHexString,\n  getHexStringArray: () => getHexStringArray,\n  hexToBytes: () => hexToBytes,\n  hexToDecimalString: () => hexToDecimalString,\n  isBigInt: () => isBigInt,\n  isHex: () => isHex,\n  isStringWholeNumber: () => isStringWholeNumber,\n  toBigInt: () => toBigInt,\n  toCairoBool: () => toCairoBool,\n  toHex: () => toHex,\n  toHexString: () => toHexString,\n  toStorageKey: () => toStorageKey\n});\nimport { hexToBytes as hexToBytesNoble } from \"@noble/curves/abstract/utils\";\nfunction isHex(hex) {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\nfunction toBigInt(value) {\n  return BigInt(value);\n}\nfunction isBigInt(value) {\n  return typeof value === \"bigint\";\n}\nfunction toHex(number2) {\n  return addHexPrefix(toBigInt(number2).toString(16));\n}\nvar toHexString = toHex;\nfunction toStorageKey(number2) {\n  const res = addHexPrefix(toBigInt(number2).toString(16).padStart(64, \"0\"));\n  return res;\n}\nfunction hexToDecimalString(hex) {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\nvar cleanHex = hex => hex.toLowerCase().replace(/^(0x)0+/, \"$1\");\nfunction assertInRange(input, lowerBound, upperBound, inputName = \"\") {\n  const messageSuffix = inputName === \"\" ? \"invalid length\" : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n  assert(inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt, `Message not signable, ${messageSuffix}.`);\n}\nfunction bigNumberishArrayToDecimalStringArray(rawCalldata) {\n  return rawCalldata.map(x => toBigInt(x).toString(10));\n}\nfunction bigNumberishArrayToHexadecimalStringArray(rawCalldata) {\n  return rawCalldata.map(x => toHex(x));\n}\nvar isStringWholeNumber = value => /^\\d+$/.test(value);\nfunction getDecimalString(value) {\n  if (isHex(value)) {\n    return hexToDecimalString(value);\n  }\n  if (isStringWholeNumber(value)) {\n    return value;\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexString(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexStringArray(value) {\n  return value.map(el => getHexString(el));\n}\nvar toCairoBool = value => (+value).toString();\nfunction hexToBytes(value) {\n  if (!isHex(value)) throw new Error(`${value} need to be a hex-string`);\n  let adaptedValue = removeHexPrefix(value);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return hexToBytesNoble(adaptedValue);\n}\n\n// src/utils/selector.ts\nvar selector_exports = {};\n__export(selector_exports, {\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  keccakBn: () => keccakBn,\n  starknetKeccak: () => starknetKeccak\n});\nimport { keccak } from \"@scure/starknet\";\nfunction keccakBn(value) {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix(keccak(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\nfunction keccakHex(str) {\n  return addHexPrefix(keccak(utf8ToArray(str)).toString(16));\n}\nfunction starknetKeccak(str) {\n  const hash = BigInt(keccakHex(str));\n  return hash & MASK_250;\n}\nfunction getSelectorFromName(funcName) {\n  return toHex(starknetKeccak(funcName));\n}\nfunction getSelector(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n\n// src/utils/shortString.ts\nvar shortString_exports = {};\n__export(shortString_exports, {\n  decodeShortString: () => decodeShortString,\n  encodeShortString: () => encodeShortString,\n  isASCII: () => isASCII,\n  isDecimalString: () => isDecimalString,\n  isLongText: () => isLongText,\n  isShortString: () => isShortString,\n  isShortText: () => isShortText,\n  isText: () => isText,\n  splitLongString: () => splitLongString\n});\nfunction isASCII(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\nfunction isShortString(str) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\nfunction isDecimalString(str) {\n  return /^[0-9]*$/i.test(str);\n}\nfunction isText(val) {\n  return typeof val === \"string\" && !isHex(val) && !isStringWholeNumber(val);\n}\nvar isShortText = val => isText(val) && isShortString(val);\nvar isLongText = val => isText(val) && !isShortString(val);\nfunction splitLongString(longStr) {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, \"g\");\n  return longStr.match(regex) || [];\n}\nfunction encodeShortString(str) {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str)) throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, char => char.charCodeAt(0).toString(16)));\n}\nfunction decodeShortString(str) {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, hex => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString(\"0X\".concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n\n// src/utils/calldata/cairo.ts\nvar cairo_exports = {};\n__export(cairo_exports, {\n  felt: () => felt,\n  getAbiContractVersion: () => getAbiContractVersion,\n  getArrayType: () => getArrayType,\n  isCairo1Abi: () => isCairo1Abi,\n  isCairo1Type: () => isCairo1Type,\n  isLen: () => isLen,\n  isTypeArray: () => isTypeArray,\n  isTypeBool: () => isTypeBool,\n  isTypeContractAddress: () => isTypeContractAddress,\n  isTypeEnum: () => isTypeEnum,\n  isTypeEthAddress: () => isTypeEthAddress,\n  isTypeFelt: () => isTypeFelt,\n  isTypeLitteral: () => isTypeLitteral,\n  isTypeNamedTuple: () => isTypeNamedTuple,\n  isTypeOption: () => isTypeOption,\n  isTypeResult: () => isTypeResult,\n  isTypeStruct: () => isTypeStruct,\n  isTypeTuple: () => isTypeTuple,\n  isTypeUint: () => isTypeUint,\n  isTypeUint256: () => isTypeUint256,\n  tuple: () => tuple,\n  uint256: () => uint256\n});\n\n// src/utils/uint256.ts\nvar uint256_exports = {};\n__export(uint256_exports, {\n  UINT_128_MAX: () => UINT_128_MAX,\n  UINT_256_MAX: () => UINT_256_MAX,\n  bnToUint256: () => bnToUint256,\n  isUint256: () => isUint256,\n  uint256ToBN: () => uint256ToBN\n});\nvar UINT_128_MAX = (1n << 128n) - 1n;\nvar UINT_256_MAX = (1n << 256n) - 1n;\nfunction uint256ToBN(uint2562) {\n  return (toBigInt(uint2562.high) << 128n) + toBigInt(uint2562.low);\n}\nfunction isUint256(bn) {\n  return toBigInt(bn) <= UINT_256_MAX;\n}\nfunction bnToUint256(bn) {\n  const bi = toBigInt(bn);\n  if (!isUint256(bi)) throw new Error(\"Number is too large\");\n  return {\n    low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n    high: addHexPrefix((bi >> 128n).toString(16))\n  };\n}\n\n// src/utils/calldata/cairo.ts\nvar isLen = name => /_len$/.test(name);\nvar isTypeFelt = type => type === \"felt\" || type === \"core::felt252\";\nvar isTypeArray = type => /\\*/.test(type) || type.startsWith(\"core::array::Array::\") || type.startsWith(\"core::array::Span::\");\nvar isTypeTuple = type => /^\\(.*\\)$/i.test(type);\nvar isTypeNamedTuple = type => /\\(.*\\)/i.test(type) && type.includes(\":\");\nvar isTypeStruct = (type, structs) => type in structs;\nvar isTypeEnum = (type, enums) => type in enums;\nvar isTypeOption = type => type.startsWith(\"core::option::Option::\");\nvar isTypeResult = type => type.startsWith(\"core::result::Result::\");\nvar isTypeUint = type => Object.values(Uint).includes(type);\nvar isTypeLitteral = type => Object.values(Litteral).includes(type);\nvar isTypeUint256 = type => type === \"core::integer::u256\";\nvar isTypeBool = type => type === \"core::bool\";\nvar isTypeContractAddress = type => type === \"core::starknet::contract_address::ContractAddress\";\nvar isTypeEthAddress = type => type === \"core::starknet::eth_address::EthAddress\";\nvar isCairo1Type = type => type.includes(\"::\");\nvar getArrayType = type => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf(\"<\") + 1, type.lastIndexOf(\">\"));\n  }\n  return type.replace(\"*\", \"\");\n};\nfunction isCairo1Abi(abi) {\n  const {\n    cairo\n  } = getAbiContractVersion(abi);\n  if (cairo === void 0) {\n    throw Error(\"Unable to determine Cairo version\");\n  }\n  return cairo === \"1\";\n}\nfunction getAbiContractVersion(abi) {\n  if (abi.find(it => it.type === \"interface\")) {\n    return {\n      cairo: \"1\",\n      compiler: \"2\"\n    };\n  }\n  const testFunction = abi.find(it => it.type === \"function\" && (it.inputs.length || it.outputs.length));\n  if (!testFunction) {\n    return {\n      cairo: void 0,\n      compiler: void 0\n    };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return {\n      cairo: \"1\",\n      compiler: \"1\"\n    };\n  }\n  return {\n    cairo: \"0\",\n    compiler: \"0\"\n  };\n}\nvar uint256 = it => {\n  const bn = BigInt(it);\n  if (!isUint256(bn)) throw new Error(\"Number is too large\");\n  return {\n    // eslint-disable-next-line no-bitwise\n    low: (bn & UINT_128_MAX).toString(10),\n    // eslint-disable-next-line no-bitwise\n    high: (bn >> 128n).toString(10)\n  };\n};\nvar tuple = (...args) => ({\n  ...args\n});\nfunction felt(it) {\n  if (isBigInt(it) || typeof it === \"number\" && Number.isInteger(it)) {\n    return it.toString();\n  }\n  if (isText(it)) {\n    if (!isShortString(it)) throw new Error(`${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`);\n    const encoded = encodeShortString(it);\n    return BigInt(encoded).toString();\n  }\n  if (typeof it === \"string\" && isHex(it)) {\n    return BigInt(it).toString();\n  }\n  if (typeof it === \"string\" && isStringWholeNumber(it)) {\n    return it;\n  }\n  if (typeof it === \"boolean\") {\n    return `${+it}`;\n  }\n  throw new Error(`${it} can't be computed by felt()`);\n}\n\n// src/utils/calldata/enum/CairoCustomEnum.ts\nvar CairoCustomEnum = class {\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error(\"This Enum must have a least 1 variant\");\n    }\n    const nbActiveVariants = variantsList.filter(content => typeof content !== \"undefined\").length;\n    if (nbActiveVariants !== 1) {\n      throw new Error(\"This Enum must have exactly one active variant\");\n    }\n    this.variant = enumContent;\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  unwrap() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find(item => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return void 0;\n    }\n    return activeVariant[1];\n  }\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  activeVariant() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find(item => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return \"\";\n    }\n    return activeVariant[0];\n  }\n};\n\n// src/utils/calldata/enum/CairoOption.ts\nvar CairoOptionVariant = /* @__PURE__ */(CairoOptionVariant2 => {\n  CairoOptionVariant2[CairoOptionVariant2[\"Some\"] = 0] = \"Some\";\n  CairoOptionVariant2[CairoOptionVariant2[\"None\"] = 1] = \"None\";\n  return CairoOptionVariant2;\n})(CairoOptionVariant || {});\nvar CairoOption = class {\n  constructor(variant, someContent) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error(\"Wrong variant : should be CairoOptionVariant.Some or .None.\");\n    }\n    if (variant === 0 /* Some */) {\n      if (typeof someContent === \"undefined\") {\n        throw new Error('The creation of a Cairo Option with \"Some\" variant needs a content as input.');\n      }\n      this.Some = someContent;\n      this.None = void 0;\n    } else {\n      this.Some = void 0;\n      this.None = true;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  unwrap() {\n    if (this.None) {\n      return void 0;\n    }\n    return this.Some;\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  isSome() {\n    return !(typeof this.Some === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  isNone() {\n    return this.None === true;\n  }\n};\n\n// src/utils/calldata/enum/CairoResult.ts\nvar CairoResultVariant = /* @__PURE__ */(CairoResultVariant2 => {\n  CairoResultVariant2[CairoResultVariant2[\"Ok\"] = 0] = \"Ok\";\n  CairoResultVariant2[CairoResultVariant2[\"Err\"] = 1] = \"Err\";\n  return CairoResultVariant2;\n})(CairoResultVariant || {});\nvar CairoResult = class {\n  constructor(variant, resultContent) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error(\"Wrong variant : should be CairoResultVariant.Ok or .Err.\");\n    }\n    if (variant === 0 /* Ok */) {\n      this.Ok = resultContent;\n      this.Err = void 0;\n    } else {\n      this.Ok = void 0;\n      this.Err = resultContent;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  unwrap() {\n    if (typeof this.Ok !== \"undefined\") {\n      return this.Ok;\n    }\n    if (typeof this.Err !== \"undefined\") {\n      return this.Err;\n    }\n    throw new Error(\"Both Result.Ok and .Err are undefined. Not authorized.\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  isOk() {\n    return !(typeof this.Ok === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  isErr() {\n    return !(typeof this.Err === \"undefined\");\n  }\n};\n\n// src/utils/calldata/formatter.ts\nvar guard = {\n  isBN: (data, type, key) => {\n    if (!isBigInt(data[key])) throw new Error(`Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`);\n  },\n  unknown: (data, type, key) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  }\n};\nfunction formatter(data, type, sameType) {\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    const elType = sameType ?? type[key];\n    if (!(key in type) && !sameType) {\n      acc[key] = value;\n      return acc;\n    }\n    if (elType === \"string\") {\n      if (Array.isArray(data[key])) {\n        const arrayStr = formatter(data[key], data[key].map(_ => elType));\n        acc[key] = Object.values(arrayStr).join(\"\");\n        return acc;\n      }\n      guard.isBN(data, type, key);\n      acc[key] = decodeShortString(value);\n      return acc;\n    }\n    if (elType === \"number\") {\n      guard.isBN(data, type, key);\n      acc[key] = Number(value);\n      return acc;\n    }\n    if (typeof elType === \"function\") {\n      acc[key] = elType(value);\n      return acc;\n    }\n    if (Array.isArray(elType)) {\n      const arrayObj = formatter(data[key], elType, elType[0]);\n      acc[key] = Object.values(arrayObj);\n      return acc;\n    }\n    if (typeof elType === \"object\") {\n      acc[key] = formatter(data[key], elType);\n      return acc;\n    }\n    guard.unknown(data, type, key);\n    return acc;\n  }, {});\n}\n\n// src/utils/calldata/parser/parser-0-1.1.0.ts\nvar AbiParser1 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.reduce((acc, input) => !isLen(input.name) ? acc + 1 : acc, 0);\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    return this.abi.find(it => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi;\n  }\n};\n\n// src/utils/calldata/parser/parser-2.0.0.ts\nvar AbiParser2 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.length;\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    const intf = this.abi.find(it => it.type === \"interface\");\n    return intf.items.find(it => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi.flatMap(e => {\n      if (e.type === \"interface\") {\n        return e.items;\n      }\n      return e;\n    });\n  }\n};\n\n// src/utils/calldata/parser/index.ts\nfunction createAbiParser(abi) {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\nfunction getAbiVersion(abi) {\n  if (abi.find(it => it.type === \"interface\")) return 2;\n  if (isCairo1Abi(abi)) return 1;\n  return 0;\n}\nfunction isNoConstructorValid(method, argsCalldata, abiMethod) {\n  return method === \"constructor\" && !abiMethod && !argsCalldata.length;\n}\n\n// src/utils/calldata/tuple.ts\nfunction parseNamedTuple(namedTuple) {\n  const name = namedTuple.substring(0, namedTuple.indexOf(\":\"));\n  const type = namedTuple.substring(name.length + \":\".length);\n  return {\n    name,\n    type\n  };\n}\nfunction parseSubTuple(s) {\n  if (!s.includes(\"(\")) return {\n    subTuple: [],\n    result: s\n  };\n  const subTuple = [];\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"(\") {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === \")\") counter--;\n        if (s[i] === \"(\") counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += \" \";\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n  return {\n    subTuple,\n    result\n  };\n}\nfunction extractCairo0Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const {\n    subTuple,\n    result\n  } = parseSubTuple(cleanType);\n  let recomposed = result.split(\",\").map(it => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n  return recomposed;\n}\nfunction extractCairo1Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const {\n    subTuple,\n    result\n  } = parseSubTuple(cleanType);\n  const recomposed = result.split(\",\").map(it => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  return recomposed;\n}\nfunction extractTupleMemberTypes(type) {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n\n// src/utils/calldata/propertyOrder.ts\nfunction errorU256(key) {\n  return Error(`Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`);\n}\nfunction orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {\n  const orderInput = (unorderedItem, abiType) => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeUint256(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== \"object\") {\n        return u256;\n      }\n      if (!(\"low\" in u256 && \"high\" in u256)) {\n        throw errorU256(abiType);\n      }\n      return {\n        low: u256.low,\n        high: u256.high\n      };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    return unorderedItem;\n  };\n  const orderStruct = (unorderedObject2, abiObject) => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = value => Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value: value ?? unorderedObject2[abiParam.name]\n      });\n      if (unorderedObject2[abiParam.name] === \"undefined\") {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n  function orderArray(myArray, abiParam) {\n    const typeInArray = getArrayType(abiParam);\n    if (typeof myArray === \"string\") {\n      return myArray;\n    }\n    return myArray.map(myElem => orderInput(myElem, typeInArray));\n  }\n  function orderTuple(unorderedObject2, abiParam) {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index) => {\n      const myObjKeys = Object.keys(unorderedObject2);\n      const setProperty = value => Object.defineProperty(orderedObject, index.toString(), {\n        enumerable: true,\n        value: value ?? unorderedObject2[myObjKeys[index]]\n      });\n      const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n  const orderEnum = (unorderedObject2, abiObject) => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2;\n      const resultOkType = abiObject.name.substring(abiObject.name.indexOf(\"<\") + 1, abiObject.name.lastIndexOf(\",\"));\n      const resultErrType = abiObject.name.substring(abiObject.name.indexOf(\",\") + 1, abiObject.name.lastIndexOf(\">\"));\n      if (unorderedResult.isOk()) {\n        return new CairoResult(0 /* Ok */, orderInput(unorderedObject2.unwrap(), resultOkType));\n      }\n      return new CairoResult(1 /* Err */, orderInput(unorderedObject2.unwrap(), resultErrType));\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2;\n      const resultSomeType = abiObject.name.substring(abiObject.name.indexOf(\"<\") + 1, abiObject.name.lastIndexOf(\">\"));\n      if (unorderedOption.isSome()) {\n        return new CairoOption(0 /* Some */, orderInput(unorderedOption.unwrap(), resultSomeType));\n      }\n      return new CairoOption(1 /* None */, {});\n    }\n    const unorderedCustomEnum = unorderedObject2;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map(variant => {\n      if (typeof variant[1] === \"undefined\") {\n        return variant;\n      }\n      const variantType = abiObject.type.substring(abiObject.type.lastIndexOf(\"<\") + 1, abiObject.type.lastIndexOf(\">\"));\n      if (variantType === \"()\") {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = value => Object.defineProperty(orderedObject, abiParam.name, {\n      enumerable: true,\n      value\n    });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n\n// src/utils/calldata/requestParser.ts\nfunction parseBaseTypes(type, val) {\n  switch (true) {\n    case isTypeUint256(type):\n      const el_uint256 = uint256(val);\n      return [felt(el_uint256.low), felt(el_uint256.high)];\n    default:\n      return felt(val);\n  }\n}\nfunction parseTuple(element, typeStr) {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n  if (elements.length !== memberTypes.length) {\n    throw Error(`ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`);\n  }\n  return memberTypes.map((it, dx) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it\n    };\n  });\n}\nfunction parseUint256(element) {\n  if (typeof element === \"object\") {\n    const {\n      low,\n      high\n    } = element;\n    return [felt(low), felt(high)];\n  }\n  const el_uint256 = uint256(element);\n  return [felt(el_uint256.low), felt(el_uint256.high)];\n}\nfunction parseCalldataValue(element, type, structs, enums) {\n  if (element === void 0) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n  if (Array.isArray(element)) {\n    const result = [];\n    result.push(felt(element.length));\n    const arrayType = getArrayType(type);\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n  if (structs[type] && structs[type].members.length) {\n    if (isTypeUint256(type)) {\n      return parseUint256(element);\n    }\n    if (type === \"core::starknet::eth_address::EthAddress\") return parseBaseTypes(type, element);\n    const {\n      members\n    } = structs[type];\n    const subElement = element;\n    return members.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, []);\n  }\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element, type);\n    return tupled.reduce((acc, it) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, []);\n  }\n  if (isTypeUint256(type)) {\n    return parseUint256(element);\n  }\n  if (isTypeEnum(type, enums)) {\n    const {\n      variants\n    } = enums[type];\n    if (isTypeOption(type)) {\n      const myOption = element;\n      if (myOption.isSome()) {\n        const listTypeVariant2 = variants.find(variant => variant.name === \"Some\");\n        if (typeof listTypeVariant2 === \"undefined\") {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant2.type;\n        if (typeVariantSome === \"()\") {\n          return 0 /* Some */.toString();\n        }\n        const parsedParameter2 = parseCalldataValue(myOption.unwrap(), typeVariantSome, structs, enums);\n        if (Array.isArray(parsedParameter2)) {\n          return [0 /* Some */.toString(), ...parsedParameter2];\n        }\n        return [0 /* Some */.toString(), parsedParameter2];\n      }\n      return 1 /* None */.toString();\n    }\n    if (isTypeResult(type)) {\n      const myResult = element;\n      if (myResult.isOk()) {\n        const listTypeVariant3 = variants.find(variant => variant.name === \"Ok\");\n        if (typeof listTypeVariant3 === \"undefined\") {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant3.type;\n        if (typeVariantOk === \"()\") {\n          return 0 /* Ok */.toString();\n        }\n        const parsedParameter3 = parseCalldataValue(myResult.unwrap(), typeVariantOk, structs, enums);\n        if (Array.isArray(parsedParameter3)) {\n          return [0 /* Ok */.toString(), ...parsedParameter3];\n        }\n        return [0 /* Ok */.toString(), parsedParameter3];\n      }\n      const listTypeVariant2 = variants.find(variant => variant.name === \"Err\");\n      if (typeof listTypeVariant2 === \"undefined\") {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant2.type;\n      if (typeVariantErr === \"()\") {\n        return 1 /* Err */.toString();\n      }\n      const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter2)) {\n        return [1 /* Err */.toString(), ...parsedParameter2];\n      }\n      return [1 /* Err */.toString(), parsedParameter2];\n    }\n    const myEnum = element;\n    const activeVariant = myEnum.activeVariant();\n    const listTypeVariant = variants.find(variant => variant.name === activeVariant);\n    if (typeof listTypeVariant === \"undefined\") {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex(variant => variant.name === activeVariant);\n    if (typeActiveVariant === \"()\") {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n  if (typeof element === \"object\") {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\nfunction parseCalldataField(argsIterator, input, structs, enums) {\n  const {\n    name,\n    type\n  } = input;\n  let {\n    value\n  } = argsIterator.next();\n  switch (true) {\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (typeof value === \"string\") {\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n    case type === \"core::starknet::eth_address::EthAddress\":\n      return parseBaseTypes(type, value);\n    case isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type):\n      return parseCalldataValue(value, type, structs, enums);\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(value, type, structs, enums);\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n\n// src/utils/calldata/responseParser.ts\nfunction parseBaseTypes2(type, it) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case isTypeUint256(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return uint256ToBN({\n        low,\n        high\n      });\n    case type === \"core::starknet::eth_address::EthAddress\":\n      temp = it.next().value;\n      return BigInt(temp);\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\nfunction parseResponseValue(responseIterator, element, structs, enums) {\n  if (element.type === \"()\") {\n    return {};\n  }\n  if (isTypeUint256(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return uint256ToBN({\n      low,\n      high\n    });\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = {\n      name: \"\",\n      type: getArrayType(element.type)\n    };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === \"core::starknet::eth_address::EthAddress\") {\n      return parseBaseTypes2(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum = Number(responseIterator.next().value);\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(responseIterator, {\n          name: \"\",\n          type: variant.type\n        }, structs, enums);\n        return acc;\n      }\n      acc[variant.name] = void 0;\n      return acc;\n    }, {});\n    if (element.type.startsWith(\"core::option::Option\")) {\n      const content = variantNum === 0 /* Some */ ? rawEnum.Some : void 0;\n      return new CairoOption(variantNum, content);\n    }\n    if (element.type.startsWith(\"core::result::Result\")) {\n      let content;\n      if (variantNum === 0 /* Ok */) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult(variantNum, content);\n    }\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = {\n        name,\n        type\n      };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = {\n      name: \"\",\n      type: getArrayType(element.type)\n    };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  return parseBaseTypes2(element.type, responseIterator);\n}\nfunction responseParser(responseIterator, output, structs, enums, parsedResult) {\n  const {\n    name,\n    type\n  } = output;\n  let temp;\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n    case structs && type in structs || isTypeTuple(type):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case enums && isTypeEnum(type, enums):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case isTypeArray(type):\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      const parsedDataArr = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`];\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(parseResponseValue(responseIterator, {\n            name,\n            type: output.type.replace(\"*\", \"\")\n          }, structs, enums));\n        }\n      }\n      return parsedDataArr;\n    default:\n      return parseBaseTypes2(type, responseIterator);\n  }\n}\n\n// src/utils/calldata/validate.ts\nvar validateFelt = (parameter, input) => {\n  assert(typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\", `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`);\n  if (typeof parameter === \"string\" && !isHex(parameter)) return;\n  const param = BigInt(parameter.toString(10));\n  assert(\n  // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n  param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n};\nvar validateUint = (parameter, input) => {\n  if (typeof parameter === \"number\") {\n    assert(parameter <= Number.MAX_SAFE_INTEGER, `Validation: Parameter is to large to be typed as Number use (BigInt or String)`);\n  }\n  assert(typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\" || typeof parameter === \"object\" && \"low\" in parameter && \"high\" in parameter, `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`);\n  const param = typeof parameter === \"object\" ? uint256ToBN(parameter) : toBigInt(parameter);\n  switch (input.type) {\n    case \"core::integer::u8\" /* u8 */:\n      assert(param >= 0n && param <= 255n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`);\n      break;\n    case \"core::integer::u16\" /* u16 */:\n      assert(param >= 0n && param <= 65535n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`);\n      break;\n    case \"core::integer::u32\" /* u32 */:\n      assert(param >= 0n && param <= 4294967295n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`);\n      break;\n    case \"core::integer::u64\" /* u64 */:\n      assert(param >= 0n && param <= 2n ** 64n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`);\n      break;\n    case \"core::integer::u128\" /* u128 */:\n      assert(param >= 0n && param <= 2n ** 128n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`);\n      break;\n    case \"core::integer::u256\" /* u256 */:\n      assert(param >= 0n && param <= 2n ** 256n - 1n, `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`);\n      break;\n    case \"core::starknet::class_hash::ClassHash\" /* ClassHash */:\n      assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n      param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n      break;\n    case \"core::starknet::contract_address::ContractAddress\" /* ContractAddress */:\n      assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n      param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n      break;\n    default:\n      break;\n  }\n};\nvar validateBool = (parameter, input) => {\n  assert(typeof parameter === \"boolean\", `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`);\n};\nvar validateStruct = (parameter, input, structs) => {\n  if (input.type === \"core::integer::u256\" /* u256 */) {\n    validateUint(parameter, input);\n    return;\n  }\n  if (input.type === \"core::starknet::eth_address::EthAddress\") {\n    assert(typeof parameter !== \"object\", `EthAdress type is waiting a BigNumberish. Got ${parameter}`);\n    const param = BigInt(parameter.toString(10));\n    assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n    param >= 0n && param <= 2n ** 160n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`);\n    return;\n  }\n  assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`);\n  structs[input.type].members.forEach(({\n    name\n  }) => {\n    assert(Object.keys(parameter).includes(name), `Validate: arg ${input.name} should have a property ${name}`);\n  });\n};\nvar validateEnum = (parameter, input) => {\n  assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`);\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n    return;\n  }\n  if (isTypeResult(input.type) && keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n    return;\n  }\n  if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n    return;\n  }\n  throw new Error(`Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`);\n};\nvar validateTuple = (parameter, input) => {\n  assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} should be a tuple (defined as object)`);\n};\nvar validateArray = (parameter, input, structs, enums) => {\n  const baseType = getArrayType(input.type);\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    return;\n  }\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach(param => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach(it => validateTuple(it, {\n        name: input.name,\n        type: baseType\n      }));\n      break;\n    case isTypeArray(baseType):\n      parameter.forEach(param => validateArray(param, {\n        name: \"\",\n        type: baseType\n      }, structs, enums));\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach(it => validateStruct(it, {\n        name: input.name,\n        type: baseType\n      }, structs));\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach(it => validateEnum(it, {\n        name: input.name,\n        type: baseType\n      }));\n      break;\n    case isTypeUint(baseType) || isTypeLitteral(baseType):\n      parameter.forEach(param => validateUint(param, input));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach(param => validateBool(param, input));\n      break;\n    default:\n      throw new Error(`Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`);\n  }\n};\nfunction validateFields(abiMethod, args, structs, enums) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case isTypeUint(input.type) || isTypeLitteral(input.type):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      default:\n        throw new Error(`Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`);\n    }\n    return acc + 1;\n  }, 0);\n}\n\n// src/utils/calldata/index.ts\nvar CallData = class {\n  constructor(abi) {\n    this.structs = CallData.getAbiStruct(abi);\n    this.enums = CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  validate(type, method, args = []) {\n    if (type !== \"DEPLOY\" /* DEPLOY */) {\n      const invocableFunctionNames = this.abi.filter(abi => {\n        if (abi.type !== \"function\") return false;\n        const isView = abi.stateMutability === \"view\" || abi.state_mutability === \"view\";\n        return type === \"INVOKE\" /* INVOKE */ ? !isView : isView;\n      }).map(abi => abi.name);\n      assert(invocableFunctionNames.includes(method), `${type === \"INVOKE\" /* INVOKE */ ? \"invocable\" : \"viewable\"} method not found in abi`);\n    }\n    const abiMethod = this.abi.find(abi => type === \"DEPLOY\" /* DEPLOY */ ? abi.name === method && abi.type === \"constructor\" : abi.name === method && abi.type === \"function\");\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(`Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`);\n    }\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  compile(method, argsCalldata) {\n    const abiMethod = this.abi.find(abiFunction => abiFunction.name === method);\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n    let args;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      const orderedObject = orderPropsByAbi(argsCalldata, abiMethod.inputs, this.structs, this.enums);\n      args = Object.values(orderedObject);\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n    const argsIterator = args[Symbol.iterator]();\n    const callArray = abiMethod.inputs.reduce((acc, input) => isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)), []);\n    Object.defineProperty(callArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callArray;\n  }\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs) {\n    const createTree = obj => {\n      const getEntries = (o, prefix = \".\") => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (isLongText(value)) value = splitLongString(value);\n          if (k === \"entrypoint\") value = getSelectorFromName(value);\n          const kk = Array.isArray(oe) && k === \"0\" ? \"$$len\" : k;\n          if (isBigInt(value)) return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n              const myOption = value;\n              const variantNb = myOption.isSome() ? 0 /* Some */ : 1 /* None */;\n              if (myOption.isSome()) return getEntries({\n                0: variantNb,\n                1: myOption.unwrap()\n              }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n              const myResult = value;\n              const variantNb = myResult.isOk() ? 0 /* Ok */ : 1 /* Err */;\n              return getEntries({\n                0: variantNb,\n                1: myResult.unwrap()\n              }, `${prefix}${kk}.`);\n            }\n            if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n              const myEnum = value;\n              const activeVariant = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(variant => variant === activeVariant);\n              if (typeof myEnum.unwrap() === \"object\" && Object.keys(myEnum.unwrap()).length === 0) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({\n                0: activeVariantNb,\n                1: myEnum.unwrap()\n              }, `${prefix}${kk}.`);\n            }\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      const callTree = createTree(rawArgs);\n      callTreeArray = Object.values(callTree);\n    } else {\n      const callObj = {\n        ...rawArgs\n      };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n    Object.defineProperty(callTreeArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callTreeArray;\n  }\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  parse(method, response) {\n    const {\n      outputs\n    } = this.abi.find(abi => abi.name === method);\n    const responseIterator = response.flat()[Symbol.iterator]();\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {});\n    return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;\n  }\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  format(method, response, format) {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi) {\n    return abi.filter(abiEntry => abiEntry.type === \"struct\").reduce((acc, abiEntry) => ({\n      ...acc,\n      [abiEntry.name]: abiEntry\n    }), {});\n  }\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi) {\n    const fullEnumList = abi.filter(abiEntry => abiEntry.type === \"enum\").reduce((acc, abiEntry) => ({\n      ...acc,\n      [abiEntry.name]: abiEntry\n    }), {});\n    delete fullEnumList[\"core::bool\"];\n    return fullEnumList;\n  }\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata = []) {\n    return CallData.compile(rawCalldata);\n  }\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw = []) {\n    const calldata = CallData.compile(raw);\n    return calldata.map(it => toHex(it));\n  }\n};\n\n// src/utils/hash.ts\nvar hash_exports = {};\n__export(hash_exports, {\n  calculateContractAddressFromHash: () => calculateContractAddressFromHash,\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash,\n  calculateDeployTransactionHash: () => calculateDeployTransactionHash,\n  calculateTransactionHash: () => calculateTransactionHash,\n  calculateTransactionHashCommon: () => calculateTransactionHashCommon,\n  computeCompiledClassHash: () => computeCompiledClassHash,\n  computeContractClassHash: () => computeContractClassHash,\n  computeHashOnElements: () => computeHashOnElements,\n  computeLegacyContractClassHash: () => computeLegacyContractClassHash,\n  computeSierraContractClassHash: () => computeSierraContractClassHash,\n  default: () => computeHintedClassHash,\n  feeTransactionVersion: () => feeTransactionVersion,\n  feeTransactionVersion_2: () => feeTransactionVersion_2,\n  formatSpaces: () => formatSpaces,\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  getVersionsByType: () => getVersionsByType,\n  keccakBn: () => keccakBn,\n  poseidon: () => poseidon,\n  starknetKeccak: () => starknetKeccak,\n  transactionVersion: () => transactionVersion,\n  transactionVersion_2: () => transactionVersion_2\n});\nimport { poseidonHashMany } from \"@scure/starknet\";\n\n// src/utils/ec.ts\nvar ec_exports = {};\n__export(ec_exports, {\n  starkCurve: () => starkCurve,\n  weierstrass: () => weierstrass\n});\nimport * as starkCurve from \"@scure/starknet\";\nimport * as weierstrass from \"@noble/curves/abstract/weierstrass\";\n\n// src/utils/json.ts\nvar json_exports = {};\n__export(json_exports, {\n  parse: () => parse2,\n  parseAlwaysAsBig: () => parseAlwaysAsBig,\n  stringify: () => stringify2,\n  stringifyAlwaysAsBig: () => stringifyAlwaysAsBig\n});\nimport * as json from \"lossless-json\";\nvar parseIntAsNumberOrBigInt = x => {\n  if (!json.isInteger(x)) return parseFloat(x);\n  const v = parseInt(x, 10);\n  return Number.isSafeInteger(v) ? v : BigInt(x);\n};\nvar parse2 = x => json.parse(String(x), void 0, parseIntAsNumberOrBigInt);\nvar parseAlwaysAsBig = x => json.parse(String(x), void 0, json.parseNumberAndBigInt);\nvar stringify2 = (value, replacer, space, numberStringifiers) => json.stringify(value, replacer, space, numberStringifiers);\nvar stringifyAlwaysAsBig = stringify2;\n\n// src/utils/hash.ts\nimport * as poseidon from \"@noble/curves/abstract/poseidon\";\nvar transactionVersion = BN_TRANSACTION_VERSION_1;\nvar transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nvar feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nvar feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\nfunction getVersionsByType(versionType) {\n  return versionType === \"fee\" ? {\n    v1: feeTransactionVersion,\n    v2: feeTransactionVersion_2\n  } : {\n    v1: transactionVersion,\n    v2: transactionVersion_2\n  };\n}\nfunction computeHashOnElements(data) {\n  return [...data, data.length].reduce((x, y) => starkCurve.pedersen(toBigInt(x), toBigInt(y)), 0).toString();\n}\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [txHashPrefix, version, contractAddress, entryPointSelector, calldataHash, maxFee, chainId, ...additionalData];\n  return computeHashOnElements(dataToHash);\n}\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId, constructorName = \"constructor\") {\n  return calculateTransactionHashCommon(\"0x6465706c6f79\" /* DEPLOY */, version, contractAddress, getSelectorFromName(constructorName), constructorCalldata, 0, chainId);\n}\nfunction calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {\n  return calculateTransactionHashCommon(\"0x6465636c617265\" /* DECLARE */, version, senderAddress, 0, [classHash], maxFee, chainId, [nonce, ...(compiledClassHash ? [compiledClassHash] : [])]);\n}\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n  return calculateTransactionHashCommon(\"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(\"0x696e766f6b65\" /* INVOKE */, version, contractAddress, 0, calldata, maxFee, chainId, [nonce]);\n}\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n  const CONTRACT_ADDRESS_PREFIX = felt(\"0x535441524b4e45545f434f4e54524143545f41444452455353\");\n  return computeHashOnElements([CONTRACT_ADDRESS_PREFIX, deployerAddress, salt, classHash, constructorCalldataHash]);\n}\nfunction nullSkipReplacer(key, value) {\n  if (key === \"attributes\" || key === \"accessible_scopes\") {\n    return Array.isArray(value) && value.length === 0 ? void 0 : value;\n  }\n  if (key === \"debug_info\") {\n    return null;\n  }\n  return value === null ? void 0 : value;\n}\nfunction formatSpaces(json2) {\n  let insideQuotes = false;\n  const newString = [];\n  for (const char of json2) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === \"\\\\\") === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      newString.push(char === \":\" ? \": \" : char === \",\" ? \", \" : char);\n    }\n  }\n  return newString.join(\"\");\n}\nfunction computeHintedClassHash(compiledContract) {\n  const {\n    abi,\n    program\n  } = compiledContract;\n  const contractClass = {\n    abi,\n    program\n  };\n  const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));\n  return addHexPrefix(starkCurve.keccak(utf8ToArray(serializedJson)).toString(16));\n}\nfunction computeLegacyContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  const apiVersion = toHex(API_VERSION);\n  const externalEntryPointsHash = computeHashOnElements(compiledContract.entry_points_by_type.EXTERNAL.flatMap(e => [e.selector, e.offset]));\n  const l1HandlerEntryPointsHash = computeHashOnElements(compiledContract.entry_points_by_type.L1_HANDLER.flatMap(e => [e.selector, e.offset]));\n  const constructorEntryPointHash = computeHashOnElements(compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap(e => [e.selector, e.offset]));\n  const builtinsHash = computeHashOnElements(compiledContract.program.builtins.map(s => encodeShortString(s)));\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n  const dataHash = computeHashOnElements(compiledContract.program.data);\n  return computeHashOnElements([apiVersion, externalEntryPointsHash, l1HandlerEntryPointsHash, constructorEntryPointHash, builtinsHash, hintedClassHash, dataHash]);\n}\nfunction hashBuiltins(builtins) {\n  return poseidonHashMany(builtins.flatMap(it => {\n    return BigInt(encodeShortString(it));\n  }));\n}\nfunction hashEntryPoint(data) {\n  const base = data.flatMap(it => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return poseidonHashMany(base);\n}\nfunction computeCompiledClassHash(casm) {\n  const COMPILED_CLASS_VERSION = \"COMPILED_CLASS_V1\";\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n  const bytecode = poseidonHashMany(casm.bytecode.map(it => BigInt(it)));\n  return toHex(poseidonHashMany([compiledClassVersion, externalEntryPointsHash, l1Handlers, constructor, bytecode]));\n}\nfunction hashEntryPointSierra(data) {\n  const base = data.flatMap(it => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return poseidonHashMany(base);\n}\nfunction hashAbi(sierra) {\n  const indentString = formatSpaces(stringify2(sierra.abi, null));\n  return BigInt(addHexPrefix(starkCurve.keccak(utf8ToArray(indentString)).toString(16)));\n}\nfunction computeSierraContractClassHash(sierra) {\n  const CONTRACT_CLASS_VERSION = \"CONTRACT_CLASS_V0.1.0\";\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n  const abiHash = hashAbi(sierra);\n  const sierraProgram = poseidonHashMany(sierra.sierra_program.map(it => BigInt(it)));\n  return toHex(poseidonHashMany([compiledClassVersion, externalEntryPointsHash, l1Handlers, constructor, abiHash, sierraProgram]));\n}\nfunction computeContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (\"sierra_program\" in compiledContract) {\n    return computeSierraContractClassHash(compiledContract);\n  }\n  return computeLegacyContractClassHash(compiledContract);\n}\n\n// src/utils/stark.ts\nvar stark_exports = {};\n__export(stark_exports, {\n  compressProgram: () => compressProgram,\n  decompressProgram: () => decompressProgram,\n  estimatedFeeToMaxFee: () => estimatedFeeToMaxFee,\n  formatSignature: () => formatSignature,\n  makeAddress: () => makeAddress,\n  randomAddress: () => randomAddress,\n  signatureToDecimalArray: () => signatureToDecimalArray,\n  signatureToHexArray: () => signatureToHexArray\n});\nimport { getStarkKey, utils } from \"@scure/starknet\";\nimport { gzip, ungzip } from \"pako\";\nfunction compressProgram(jsonProgram) {\n  const stringified = typeof jsonProgram === \"string\" ? jsonProgram : stringify2(jsonProgram);\n  const compressedProgram = gzip(stringified);\n  return btoaUniversal(compressedProgram);\n}\nfunction decompressProgram(base642) {\n  if (Array.isArray(base642)) return base642;\n  const decompressed = arrayBufferToString(ungzip(atobUniversal(base642)));\n  return parse2(decompressed);\n}\nfunction randomAddress() {\n  const randomKeyPair = utils.randomPrivateKey();\n  return getStarkKey(randomKeyPair);\n}\nfunction makeAddress(input) {\n  return addHexPrefix(input).toLowerCase();\n}\nfunction formatSignature(sig) {\n  if (!sig) throw Error(\"formatSignature: provided signature is undefined\");\n  if (Array.isArray(sig)) {\n    return sig.map(it => toHex(it));\n  }\n  try {\n    const {\n      r,\n      s\n    } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error(\"Signature need to be weierstrass.SignatureType or an array for custom\");\n  }\n}\nfunction signatureToDecimalArray(sig) {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\nfunction signatureToHexArray(sig) {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\nfunction estimatedFeeToMaxFee(estimatedFee, overhead = 0.5) {\n  const overHeadPercent = Math.round((1 + overhead) * 100);\n  return toBigInt(estimatedFee) * toBigInt(overHeadPercent) / 100n;\n}\n\n// src/utils/contract.ts\nfunction isSierra(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  return \"sierra_program\" in compiledContract;\n}\nfunction extractContractHashes(payload) {\n  const response = {\n    ...payload\n  };\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash) throw new Error(\"Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash\");\n  }\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash) throw new Error(\"Extract classHash failed, provide (CompiledContract).json file or classHash\");\n  return response;\n}\nfunction contractClassResponseToLegacyCompiledContract(ccr) {\n  if (isSierra(ccr)) {\n    throw Error(\"ContractClassResponse need to be LegacyContractClass (cairo0 response class)\");\n  }\n  const contract = ccr;\n  return {\n    ...contract,\n    program: decompressProgram(contract.program)\n  };\n}\n\n// src/utils/fetchPonyfill.ts\nimport isomorphicFetch from \"isomorphic-fetch\";\nvar fetchPonyfill_default = typeof window !== \"undefined\" && window.fetch ||\n// use buildin fetch in browser if available\ntypeof global !== \"undefined\" && global.fetch ||\n// use buildin fetch in node, react-native and service worker if available\nisomorphicFetch;\n\n// src/utils/provider.ts\nvar provider_exports = {};\n__export(provider_exports, {\n  createSierraContractClass: () => createSierraContractClass,\n  parseContract: () => parseContract,\n  wait: () => wait\n});\nfunction wait(delay) {\n  return new Promise(res => {\n    setTimeout(res, delay);\n  });\n}\nfunction createSierraContractClass(contract) {\n  const result = {\n    ...contract\n  };\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify2(contract.abi));\n  result.sierra_program = formatSpaces(stringify2(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\nfunction parseContract(contract) {\n  const parsedContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...(\"program\" in parsedContract && {\n        program: compressProgram(parsedContract.program)\n      })\n    };\n  }\n  return createSierraContractClass(parsedContract);\n}\n\n// src/utils/responseParser/rpc.ts\nvar RPCResponseParser = class {\n  parseGetBlockResponse(res) {\n    return {\n      timestamp: res.timestamp,\n      block_hash: \"block_hash\" in res ? res.block_hash : \"\",\n      block_number: \"block_number\" in res ? res.block_number : -1,\n      new_root: \"new_root\" in res ? res.new_root : \"\",\n      parent_hash: res.parent_hash,\n      status: \"status\" in res ? res.status : \"PENDING\" /* PENDING */,\n      transactions: res.transactions\n    };\n  }\n  parseGetTransactionResponse(res) {\n    return {\n      calldata: \"calldata\" in res ? res.calldata : [],\n      contract_address: \"contract_address\" in res ? res.contract_address : \"\",\n      sender_address: \"sender_address\" in res ? res.sender_address : \"\",\n      max_fee: \"max_fee\" in res ? res.max_fee : \"\",\n      nonce: \"nonce\" in res ? res.nonce : \"\",\n      signature: \"signature\" in res ? res.signature : [],\n      transaction_hash: res.transaction_hash,\n      version: res.version\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    return {\n      overall_fee: toBigInt(res[0].overall_fee),\n      gas_consumed: toBigInt(res[0].gas_consumed),\n      gas_price: toBigInt(res[0].gas_price)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return res.map(val => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price)\n    }));\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res\n    };\n  }\n  parseSimulateTransactionResponse(res) {\n    return res.map(it => {\n      return {\n        ...it,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee))\n      };\n    });\n  }\n  parseContractClassResponse(res) {\n    return {\n      ...res,\n      abi: typeof res.abi === \"string\" ? JSON.parse(res.abi) : res.abi\n    };\n  }\n};\n\n// src/provider/errors.ts\nfunction fixStack(target, fn = target.constructor) {\n  const {\n    captureStackTrace\n  } = Error;\n  captureStackTrace && captureStackTrace(target, fn);\n}\nfunction fixProto(target, prototype) {\n  const {\n    setPrototypeOf\n  } = Object;\n  setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;\n}\nvar CustomError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true\n    });\n    fixProto(this, new.target.prototype);\n    fixStack(this);\n  }\n};\nvar LibraryError = class extends CustomError {};\nvar GatewayError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\nvar HttpError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\n\n// src/utils/starknetId.ts\nvar starknetId_exports = {};\n__export(starknetId_exports, {\n  StarknetIdContract: () => StarknetIdContract,\n  getStarknetIdContract: () => getStarknetIdContract,\n  useDecoded: () => useDecoded,\n  useEncoded: () => useEncoded\n});\nvar basicAlphabet = \"abcdefghijklmnopqrstuvwxyz0123456789-\";\nvar basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nvar bigAlphabet = \"\\u8FD9\\u6765\";\nvar basicAlphabetSize = BigInt(basicAlphabet.length);\nvar bigAlphabetSize = BigInt(bigAlphabet.length);\nvar bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\nfunction extractStars(str) {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\nfunction useDecoded(encoded) {\n  let decoded = \"\";\n  encoded.forEach(subdomain => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO) decoded += basicAlphabet[0];else decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else decoded += basicAlphabet[Number(code)];\n    }\n    const [str, k] = extractStars(decoded);\n    if (k) decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += \".\";\n  });\n  if (!decoded) {\n    return decoded;\n  }\n  return decoded.concat(\"stark\");\n}\nfunction useEncoded(decoded) {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k) decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n    if (index !== -1) {\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n  return encoded;\n}\nvar StarknetIdContract = /* @__PURE__ */(StarknetIdContract2 => {\n  StarknetIdContract2[\"MAINNET\"] = \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\";\n  StarknetIdContract2[\"TESTNET\"] = \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\";\n  return StarknetIdContract2;\n})(StarknetIdContract || {});\nfunction getStarknetIdContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\" /* MAINNET */;\n    case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n      return \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\" /* TESTNET */;\n    default:\n      throw new Error(\"Starknet.id is not yet deployed on this network\");\n  }\n}\n\n// src/provider/starknetId.ts\nasync function getStarkName(provider, address, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const hexDomain = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"address_to_domain\",\n      calldata: CallData.compile({\n        address\n      })\n    });\n    const decimalDomain = hexDomain.result.map(element => BigInt(element)).slice(1);\n    const stringDomain = useDecoded(decimalDomain);\n    if (!stringDomain) {\n      throw Error(\"Starkname not found\");\n    }\n    return stringDomain;\n  } catch (e) {\n    if (e instanceof Error && e.message === \"Starkname not found\") {\n      throw e;\n    }\n    throw Error(\"Could not get stark name\");\n  }\n}\nasync function getAddressFromStarkName(provider, name, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const addressData = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"domain_to_address\",\n      calldata: CallData.compile({\n        domain: [useEncoded(name.replace(\".stark\", \"\")).toString(10)]\n      })\n    });\n    return addressData.result[0];\n  } catch {\n    throw Error(\"Could not get address from stark name\");\n  }\n}\n\n// src/provider/utils.ts\nvar validBlockTags = Object.values(BlockTag);\nvar Block = class {\n  constructor(_identifier) {\n    this.hash = null;\n    this.number = null;\n    this.tag = null;\n    this.valueOf = () => this.number;\n    this.toString = () => this.hash;\n    this.setIdentifier(_identifier);\n  }\n  setIdentifier(__identifier) {\n    if (typeof __identifier === \"string\" && isHex(__identifier)) {\n      this.hash = __identifier;\n    } else if (typeof __identifier === \"bigint\") {\n      this.hash = toHex(__identifier);\n    } else if (typeof __identifier === \"number\") {\n      this.number = __identifier;\n    } else if (typeof __identifier === \"string\" && validBlockTags.includes(__identifier)) {\n      this.tag = __identifier;\n    } else {\n      this.tag = \"pending\" /* pending */;\n    }\n  }\n  // TODO: fix any\n  get queryIdentifier() {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n    return `blockNumber=${this.tag}`;\n  }\n  // TODO: fix any\n  get identifier() {\n    if (this.number !== null) {\n      return {\n        block_number: this.number\n      };\n    }\n    if (this.hash !== null) {\n      return {\n        block_hash: this.hash\n      };\n    }\n    return this.tag;\n  }\n  set identifier(_identifier) {\n    this.setIdentifier(_identifier);\n  }\n  get sequencerIdentifier() {\n    return this.hash !== null ? {\n      blockHash: this.hash\n    } : {\n      blockNumber: this.number ?? this.tag\n    };\n  }\n};\n\n// src/provider/rpc.ts\nvar getDefaultNodeUrl = (networkName, mute = false) => {\n  if (!mute) console.warn(\"Using default public node url, please provide nodeUrl in provider options!\");\n  const nodes = networkName === \"SN_MAIN\" /* SN_MAIN */ ? RPC_MAINNET_NODES : RPC_GOERLI_NODES;\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return nodes[randIdx];\n};\nvar defaultOptions = {\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  blockIdentifier: \"pending\" /* pending */,\n  retries: 200\n};\nvar RpcProvider = class {\n  constructor(optionsOrProvider) {\n    this.responseParser = new RPCResponseParser();\n    /**\n     * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n     */\n    this.getBlockHashAndNumber = this.getBlockLatestAccepted;\n    /**\n     * @deprecated renamed to getBlockStateUpdate();\n     */\n    this.getStateUpdate = this.getBlockStateUpdate;\n    /**\n     * Returns the execution traces of all transactions included in the given block\n     * @deprecated renamed to getBlockTransactionsTraces()\n     */\n    this.traceBlockTransactions = this.getBlockTransactionsTraces;\n    /**\n     * Get the number of transactions in a block given a block id\n     * @deprecated renamed to getBlockTransactionCount()\n     * @returns Number of transactions\n     */\n    this.getTransactionCount = this.getBlockTransactionCount;\n    /**\n     * @deprecated renamed to getTransactionTrace();\n     * For a given executed transaction, return the trace of its execution, including internal calls\n     */\n    this.traceTransaction = this.getTransactionTrace;\n    /**\n     * @deprecated renamed to simulateTransaction();\n     */\n    this.getSimulateTransaction = this.simulateTransaction;\n    const {\n      nodeUrl,\n      retries,\n      headers,\n      blockIdentifier,\n      chainId\n    } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl)) {\n      this.nodeUrl = getDefaultNodeUrl(nodeUrl, optionsOrProvider?.default);\n    } else if (nodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = {\n      ...defaultOptions.headers,\n      ...headers\n    };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId;\n  }\n  fetch(method, params, id = 0) {\n    const rpcRequestBody = {\n      id,\n      jsonrpc: \"2.0\",\n      method,\n      ...(params && {\n        params\n      })\n    };\n    return fetchPonyfill_default(this.nodeUrl, {\n      method: \"POST\",\n      body: stringify2(rpcRequestBody),\n      headers: this.headers\n    });\n  }\n  errorHandler(method, params, rpcError, otherError) {\n    if (rpcError) {\n      const {\n        code,\n        message,\n        data\n      } = rpcError;\n      throw new LibraryError(`RPC: ${method} with params ${stringify2(params)}\n ${code}: ${message}: ${stringify2(data)}`);\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n  async fetchEndpoint(method, params) {\n    try {\n      const rawResult = await this.fetch(method, params);\n      const {\n        error,\n        result\n      } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result;\n    } catch (error) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n  async getChainId() {\n    this.chainId ?? (this.chainId = await this.fetchEndpoint(\"starknet_chainId\"));\n    return this.chainId;\n  }\n  /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */\n  async getSpecVersion() {\n    return this.fetchEndpoint(\"starknet_specVersion\");\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getNonce\", {\n      contract_address,\n      block_id\n    });\n  }\n  /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.getBlockWithTxHashes(blockIdentifier).then(this.responseParser.parseGetBlockResponse);\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  async getBlockLatestAccepted() {\n    return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n  }\n  /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */\n  async getBlockNumber() {\n    return this.fetchEndpoint(\"starknet_blockNumber\");\n  }\n  async getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", {\n      block_id\n    });\n  }\n  async getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxs\", {\n      block_id\n    });\n  }\n  async getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStateUpdate\", {\n      block_id\n    });\n  }\n  async getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_traceBlockTransactions\", {\n      block_id\n    });\n  }\n  async getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", {\n      block_id\n    });\n  }\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */\n  async getPendingTransactions() {\n    const {\n      transactions\n    } = await this.getBlock(\"pending\" /* pending */);\n    return Promise.all(transactions.map(it => this.getTransactionByHash(it)));\n  }\n  /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */\n  async getTransaction(txHash) {\n    return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n  }\n  async getTransactionByHash(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n      transaction_hash\n    });\n  }\n  async getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", {\n      block_id,\n      index\n    });\n  }\n  async getTransactionReceipt(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionReceipt\", {\n      transaction_hash\n    });\n  }\n  async getTransactionTrace(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_traceTransaction\", {\n      transaction_hash\n    });\n  }\n  /**\n   * NEW: Get the status of a transaction\n   */\n  async getTransactionStatus(transactionHash) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint(\"starknet_getTransactionStatus\", {\n      transaction_hash\n    });\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  async simulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipFeeCharge = true\n  }) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate) simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge) simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_FEE_CHARGE);\n    return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n      block_id,\n      transactions: invocations.map(it => this.buildTransaction(it)),\n      simulation_flags: simulationFlags\n    }).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async waitForTransaction(txHash, options) {\n    const transactionHash = toHex(txHash);\n    let {\n      retries\n    } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [rpc_exports.ETransactionStatus.REJECTED, rpc_exports.ETransactionExecutionStatus.REVERTED];\n    const successStates = options?.successStates ?? [rpc_exports.ETransactionExecutionStatus.SUCCEEDED, rpc_exports.ETransactionStatus.ACCEPTED_ON_L2, rpc_exports.ETransactionStatus.ACCEPTED_ON_L1];\n    let txStatus;\n    while (!onchain) {\n      await wait(retryInterval);\n      try {\n        txStatus = await this.getTransactionStatus(transactionHash);\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n        if (!finalityStatus) {\n          const error = new Error(\"waiting for transaction status\");\n          throw error;\n        }\n        if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        } else if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message);\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n    }\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      await wait(retryInterval);\n    }\n    return txReceipt;\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStorageAt\", {\n      contract_address,\n      key: parsedKey,\n      block_id\n    });\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  async getClassByHash(classHash) {\n    return this.getClass(classHash);\n  }\n  async getClass(classHash, blockIdentifier = this.blockIdentifier) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClass\", {\n      class_hash,\n      block_id\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassAt\", {\n      block_id,\n      contract_address\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getCode(_contractAddress, _blockIdentifier) {\n    throw new Error(\"RPC does not implement getCode function\");\n  }\n  async getContractVersion(contractAddress, classHash, {\n    blockIdentifier = this.blockIdentifier,\n    compiler = true\n  } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return {\n          cairo: \"1\",\n          compiler: abiTest.compiler\n        };\n      }\n      return {\n        cairo: \"1\",\n        compiler: void 0\n      };\n    }\n    return {\n      cairo: \"0\",\n      compiler: \"0\"\n    };\n  }\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction({\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      ...invocation,\n      ...invocationDetails\n    }, \"fee\");\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction({\n      type: \"DECLARE\" /* DECLARE */,\n      ...invocation,\n      ...details\n    }, \"fee\");\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction({\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      ...invocation,\n      ...details\n    }, \"fee\");\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getEstimateFeeBulk(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false\n  }) {\n    if (skipValidate) {\n      console.warn(\"getEstimateFeeBulk RPC does not support skipValidate\");\n    }\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: invocations.map(it => this.buildTransaction(it, \"fee\")),\n      block_id\n    }).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n      invoke_transaction: {\n        sender_address: functionInvocation.contractAddress,\n        calldata: CallData.toHex(functionInvocation.calldata),\n        type: rpc_exports.ETransactionType.INVOKE,\n        max_fee: toHex(details.maxFee || 0),\n        version: \"0x1\",\n        signature: signatureToHexArray(functionInvocation.signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async declareContract({\n    contract,\n    signature,\n    senderAddress,\n    compiledClassHash\n  }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpc_exports.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          version: HEX_STR_TRANSACTION_VERSION_1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    }\n    return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n      declare_transaction: {\n        type: rpc_exports.ETransactionType.DECLARE,\n        contract_class: {\n          sierra_program: decompressProgram(contract.sierra_program),\n          contract_class_version: contract.contract_class_version,\n          entry_points_by_type: contract.entry_points_by_type,\n          abi: contract.abi\n        },\n        compiled_class_hash: compiledClassHash || \"\",\n        version: HEX_STR_TRANSACTION_VERSION_2,\n        max_fee: toHex(details.maxFee || 0),\n        signature: signatureToHexArray(signature),\n        sender_address: senderAddress,\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async deployAccountContract({\n    classHash,\n    constructorCalldata,\n    addressSalt,\n    signature\n  }, details) {\n    return this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n      deploy_account_transaction: {\n        constructor_calldata: CallData.toHex(constructorCalldata || []),\n        class_hash: toHex(classHash),\n        contract_address_salt: toHex(addressSalt || 0),\n        type: rpc_exports.ETransactionType.DEPLOY_ACCOUNT,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(details.version || 0),\n        signature: signatureToHexArray(signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async callContract(call, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const result = await this.fetchEndpoint(\"starknet_call\", {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata)\n      },\n      block_id\n    });\n    return this.responseParser.parseCallContractResponse(result);\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  async estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n    const {\n      from_address,\n      to_address,\n      entry_point_selector,\n      payload\n    } = message;\n    const formattedMessage = {\n      from_address: toHex(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n      message: formattedMessage,\n      block_id\n    });\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  async getSyncingStats() {\n    return this.fetchEndpoint(\"starknet_syncing\");\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  async getEvents(eventFilter) {\n    return this.fetchEndpoint(\"starknet_getEvents\", {\n      filter: eventFilter\n    });\n  }\n  /**\n   * StarknetId Endpoint (get name from address)\n   */\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  /**\n   * StarknetId Endpoint (get address from name)\n   */\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToHexArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n      max_fee: toHex(invocation.maxFee || 0)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: rpc_exports.ETransactionType.INVOKE,\n        // Diff between sequencer and rpc invoke type\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details\n        };\n      }\n      return {\n        // compiled_class_hash\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program)\n        },\n        compiled_class_hash: invocation.compiledClassHash || \"\",\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"RPC buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/sequencer.ts\nimport urljoin2 from \"url-join\";\n\n// src/utils/responseParser/index.ts\nvar ResponseParser = class {};\n\n// src/utils/responseParser/sequencer.ts\nvar SequencerAPIResponseParser = class extends ResponseParser {\n  parseGetBlockResponse(res) {\n    return {\n      ...res,\n      new_root: res.state_root,\n      parent_hash: res.parent_block_hash,\n      transactions: Object.values(res.transactions).map(value => \"transaction_hash\" in value && value.transaction_hash).filter(Boolean)\n    };\n  }\n  parseGetTransactionResponse(res) {\n    if (res.status === \"NOT_RECEIVED\" /* NOT_RECEIVED */ && res.finality_status === \"NOT_RECEIVED\" /* NOT_RECEIVED */) {\n      throw new LibraryError();\n    }\n    return {\n      ...res,\n      calldata: \"calldata\" in res.transaction ? res.transaction.calldata : [],\n      contract_class: \"contract_class\" in res.transaction ? res.transaction.contract_class : void 0,\n      entry_point_selector: \"entry_point_selector\" in res.transaction ? res.transaction.entry_point_selector : void 0,\n      max_fee: \"max_fee\" in res.transaction ? res.transaction.max_fee : void 0,\n      nonce: res.transaction.nonce,\n      sender_address: \"sender_address\" in res.transaction ? res.transaction.sender_address : void 0,\n      signature: \"signature\" in res.transaction ? res.transaction.signature : void 0,\n      transaction_hash: \"transaction_hash\" in res.transaction ? res.transaction.transaction_hash : void 0,\n      version: \"version\" in res.transaction ? res.transaction.version : void 0\n    };\n  }\n  parseGetTransactionReceiptResponse(res) {\n    return {\n      ...res,\n      messages_sent: res.l2_to_l1_messages,\n      ...(\"revert_error\" in res && {\n        revert_reason: res.revert_error\n      })\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    if (\"overall_fee\" in res) {\n      let gasInfo = {};\n      try {\n        gasInfo = {\n          gas_consumed: toBigInt(res.gas_usage),\n          gas_price: toBigInt(res.gas_price)\n        };\n      } catch {}\n      return {\n        overall_fee: toBigInt(res.overall_fee),\n        ...gasInfo\n      };\n    }\n    return {\n      overall_fee: toBigInt(res.amount)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return [].concat(res).map(item => {\n      if (\"overall_fee\" in item) {\n        let gasInfo = {};\n        try {\n          gasInfo = {\n            gas_consumed: toBigInt(item.gas_usage),\n            gas_price: toBigInt(item.gas_price)\n          };\n        } catch {}\n        return {\n          overall_fee: toBigInt(item.overall_fee),\n          ...gasInfo\n        };\n      }\n      return {\n        overall_fee: toBigInt(item.amount)\n      };\n    });\n  }\n  parseSimulateTransactionResponse(res) {\n    const suggestedMaxFee = \"overall_fee\" in res.fee_estimation ? res.fee_estimation.overall_fee : res.fee_estimation.amount;\n    return [{\n      transaction_trace: res.trace,\n      fee_estimation: res.fee_estimation,\n      suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee))\n    }];\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res.result\n    };\n  }\n  parseInvokeFunctionResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash\n    };\n  }\n  parseDeployContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      contract_address: res.address\n    };\n  }\n  parseDeclareContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      class_hash: res.class_hash\n    };\n  }\n  parseGetStateUpdateResponse(res) {\n    const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({\n      contract_address,\n      nonce\n    }));\n    const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(([address, storage_entries]) => ({\n      address,\n      storage_entries\n    }));\n    return {\n      ...res,\n      state_diff: {\n        ...res.state_diff,\n        storage_diffs,\n        nonces\n      }\n    };\n  }\n  parseContractClassResponse(res) {\n    const response = isSierra(res) ? res : parseContract(res);\n    return {\n      ...response,\n      abi: typeof response.abi === \"string\" ? JSON.parse(response.abi) : response.abi\n    };\n  }\n};\n\n// src/utils/url.ts\nimport urljoin from \"url-join\";\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\nfunction isUrl(s) {\n  if (!s) {\n    return false;\n  }\n  if (typeof s !== \"string\") {\n    return false;\n  }\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n  return false;\n}\nfunction buildUrl(baseUrl, defaultPath, urlOrPath) {\n  return isUrl(urlOrPath) ? urlOrPath : urljoin(baseUrl, urlOrPath ?? defaultPath);\n}\n\n// src/provider/sequencer.ts\nfunction isEmptyQueryObject(obj) {\n  return obj === void 0 || Object.keys(obj).length === 0 || Object.keys(obj).length === 1 && Object.entries(obj).every(([k, v]) => k === \"blockIdentifier\" && v === null);\n}\nvar defaultOptions2 = {\n  network: \"SN_GOERLI\" /* SN_GOERLI */,\n  blockIdentifier: \"pending\" /* pending */\n};\nvar SequencerProvider = class {\n  constructor(optionsOrProvider = defaultOptions2) {\n    this.responseParser = new SequencerAPIResponseParser();\n    if (\"network\" in optionsOrProvider) {\n      this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n      this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\");\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\");\n    } else {\n      this.baseUrl = optionsOrProvider.baseUrl;\n      this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\", optionsOrProvider.feederGatewayUrl);\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\", optionsOrProvider.gatewayUrl);\n    }\n    this.chainId = optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n    this.headers = optionsOrProvider.headers;\n    this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions2.blockIdentifier;\n  }\n  static getNetworkFromName(name) {\n    switch (name) {\n      case \"SN_MAIN\" /* SN_MAIN */:\n      case \"0x534e5f4d41494e\" /* SN_MAIN */:\n        return \"https://alpha-mainnet.starknet.io\" /* SN_MAIN */;\n      case \"SN_GOERLI\" /* SN_GOERLI */:\n      case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n        return \"https://alpha4.starknet.io\" /* SN_GOERLI */;\n      default:\n        throw new Error(\"Could not detect base url from NetworkName\");\n    }\n  }\n  static getChainIdFromBaseUrl(baseUrl) {\n    try {\n      const url = new URL(baseUrl);\n      if (url.host.includes(\"mainnet.starknet.io\")) {\n        return \"0x534e5f4d41494e\" /* SN_MAIN */;\n      }\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    } catch {\n      console.error(`Could not parse baseUrl: ${baseUrl}`);\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    }\n  }\n  getFetchUrl(endpoint) {\n    const gatewayUrlEndpoints = [\"add_transaction\"];\n    return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n  }\n  getFetchMethod(endpoint) {\n    const postMethodEndpoints = [\"add_transaction\", \"call_contract\", \"estimate_fee\", \"estimate_message_fee\", \"estimate_fee_bulk\", \"simulate_transaction\"];\n    return postMethodEndpoints.includes(endpoint) ? \"POST\" : \"GET\";\n  }\n  getQueryString(query) {\n    if (isEmptyQueryObject(query)) {\n      return \"\";\n    }\n    const queryString = Object.entries(query).map(([key, value]) => {\n      if (key === \"blockIdentifier\") {\n        const block = new Block(value);\n        return `${block.queryIdentifier}`;\n      }\n      return `${key}=${value}`;\n    }).join(\"&\");\n    return `?${queryString}`;\n  }\n  getHeaders(method) {\n    if (method === \"POST\") {\n      return {\n        \"Content-Type\": \"application/json\",\n        ...this.headers\n      };\n    }\n    return this.headers;\n  }\n  // typesafe fetch\n  async fetchEndpoint(endpoint, ...[query, request]) {\n    const baseUrl = this.getFetchUrl(endpoint);\n    const method = this.getFetchMethod(endpoint);\n    const queryString = this.getQueryString(query);\n    const url = urljoin2(baseUrl, endpoint, queryString);\n    return this.fetch(url, {\n      method,\n      body: request\n    });\n  }\n  async fetch(endpoint, options) {\n    const url = buildUrl(this.baseUrl, \"\", endpoint);\n    const method = options?.method ?? \"GET\";\n    const headers = this.getHeaders(method);\n    const body = stringify2(options?.body);\n    try {\n      const response = await fetchPonyfill_default(url, {\n        method,\n        body,\n        headers\n      });\n      const textResponse = await response.text();\n      if (!response.ok) {\n        let responseBody;\n        try {\n          responseBody = parse2(textResponse);\n        } catch {\n          throw new HttpError(response.statusText, response.status);\n        }\n        throw new GatewayError(responseBody.message, responseBody.code);\n      }\n      const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse2;\n      return parseChoice(textResponse);\n    } catch (error) {\n      if (error instanceof Error && !(error instanceof LibraryError)) throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n      throw error;\n    }\n  }\n  async getChainId() {\n    return Promise.resolve(this.chainId);\n  }\n  async callContract({\n    contractAddress,\n    entrypoint: entryPointSelector,\n    calldata = []\n  }, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"call_contract\", {\n      blockIdentifier\n    }, {\n      // TODO - determine best choice once both are fully supported in devnet\n      // signature: [],\n      // sender_address: contractAddress,\n      contract_address: contractAddress,\n      entry_point_selector: getSelectorFromName(entryPointSelector),\n      calldata: CallData.compile(calldata)\n    }).then(this.responseParser.parseCallContractResponse);\n  }\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_block\", {\n      blockIdentifier\n    }).then(this.responseParser.parseGetBlockResponse);\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_nonce\", {\n      contractAddress,\n      blockIdentifier\n    });\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const parsedKey = toBigInt(key).toString(10);\n    return this.fetchEndpoint(\"get_storage_at\", {\n      blockIdentifier,\n      contractAddress,\n      key: parsedKey\n    });\n  }\n  async getTransaction(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction\", {\n      transactionHash: txHashHex\n    }).then(result => {\n      if (Object.values(result).length === 1) throw new LibraryError(result.status);\n      return this.responseParser.parseGetTransactionResponse(result);\n    });\n  }\n  async getTransactionReceipt(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_receipt\", {\n      transactionHash: txHashHex\n    }).then(this.responseParser.parseGetTransactionReceiptResponse);\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_full_contract\", {\n      blockIdentifier,\n      contractAddress\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_hash_at\", {\n      blockIdentifier,\n      contractAddress\n    });\n  }\n  async getClassByHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_by_hash\", {\n      classHash,\n      blockIdentifier\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getCompiledClassByClassHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_compiled_class_by_class_hash\", {\n      classHash,\n      blockIdentifier\n    });\n  }\n  async getContractVersion(contractAddress, classHash, {\n    blockIdentifier = this.blockIdentifier,\n    compiler = true\n  } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClassByHash(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return {\n          cairo: \"1\",\n          compiler: abiTest.compiler\n        };\n      }\n      return {\n        cairo: \"1\",\n        compiler: void 0\n      };\n    }\n    return {\n      cairo: \"0\",\n      compiler: \"0\"\n    };\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      sender_address: functionInvocation.contractAddress,\n      calldata: CallData.compile(functionInvocation.calldata ?? []),\n      signature: signatureToDecimalArray(functionInvocation.signature),\n      nonce: toHex(details.nonce),\n      max_fee: toHex(details.maxFee || 0),\n      version: \"0x1\"\n    }).then(this.responseParser.parseInvokeFunctionResponse);\n  }\n  async deployAccountContract({\n    classHash,\n    constructorCalldata,\n    addressSalt,\n    signature\n  }, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      contract_address_salt: addressSalt ?? randomAddress(),\n      constructor_calldata: CallData.compile(constructorCalldata ?? []),\n      class_hash: toHex(classHash),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(details.version || 0),\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature)\n    }).then(this.responseParser.parseDeployContractResponse);\n  }\n  async declareContract({\n    senderAddress,\n    contract,\n    signature,\n    compiledClassHash\n  }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"add_transaction\", void 0, {\n        type: \"DECLARE\" /* DECLARE */,\n        contract_class: contract,\n        nonce: toHex(details.nonce),\n        signature: signatureToDecimalArray(signature),\n        sender_address: senderAddress,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(transactionVersion)\n      }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DECLARE\" /* DECLARE */,\n      sender_address: senderAddress,\n      compiled_class_hash: compiledClassHash,\n      contract_class: contract,\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(transactionVersion_2)\n    }).then(this.responseParser.parseDeclareContractResponse);\n  }\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction({\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      ...invocation,\n      ...invocationDetails\n    }, \"fee\");\n    return this.fetchEndpoint(\"estimate_fee\", {\n      blockIdentifier,\n      skipValidate\n    }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction({\n      type: \"DECLARE\" /* DECLARE */,\n      ...invocation,\n      ...details\n    }, \"fee\");\n    return this.fetchEndpoint(\"estimate_fee\", {\n      blockIdentifier,\n      skipValidate\n    }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction({\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      ...invocation,\n      ...details\n    }, \"fee\");\n    return this.fetchEndpoint(\"estimate_fee\", {\n      blockIdentifier,\n      skipValidate\n    }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getEstimateFeeBulk(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false\n  }) {\n    const transactions = invocations.map(it => this.buildTransaction(it, \"fee\"));\n    return this.fetchEndpoint(\"estimate_fee_bulk\", {\n      blockIdentifier,\n      skipValidate\n    }, transactions).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async getCode(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_code\", {\n      contractAddress,\n      blockIdentifier\n    });\n  }\n  async waitForTransaction(txHash, options) {\n    let res;\n    let completed = false;\n    let retries = 0;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\"REJECTED\" /* REJECTED */, \"NOT_RECEIVED\" /* NOT_RECEIVED */, \"REVERTED\" /* REVERTED */];\n    const successStates = options?.successStates ?? [\"SUCCEEDED\" /* SUCCEEDED */, \"ACCEPTED_ON_L1\" /* ACCEPTED_ON_L1 */, \"ACCEPTED_ON_L2\" /* ACCEPTED_ON_L2 */];\n    while (!completed) {\n      await wait(retryInterval);\n      res = await this.getTransactionStatus(txHash);\n      if (\"NOT_RECEIVED\" /* NOT_RECEIVED */ === res.finality_status && retries < 3) {\n        retries += 1;\n      } else if (successStates.includes(res.finality_status) || successStates.includes(res.execution_status)) {\n        completed = true;\n      } else if (errorStates.includes(res.finality_status) || errorStates.includes(res.execution_status)) {\n        let message;\n        if (res.tx_failure_reason) {\n          message = `${res.tx_status}: ${res.tx_failure_reason.code}\n${res.tx_failure_reason.error_message}`;\n        } else if (res.tx_revert_reason) {\n          message = `${res.tx_status}: ${res.tx_revert_reason}`;\n        } else {\n          message = res.tx_status;\n        }\n        const error = new Error(message);\n        error.response = res;\n        throw error;\n      }\n    }\n    const txReceipt = await this.getTransactionReceipt(txHash);\n    return txReceipt;\n  }\n  /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */\n  async getTransactionStatus(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_status\", {\n      transactionHash: txHashHex\n    });\n  }\n  /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */\n  async getContractAddresses() {\n    return this.fetchEndpoint(\"get_contract_addresses\");\n  }\n  /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */\n  async getTransactionTrace(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_trace\", {\n      transactionHash: txHashHex\n    });\n  }\n  async estimateMessageFee({\n    from_address,\n    to_address,\n    entry_point_selector,\n    payload\n  }, blockIdentifier = this.blockIdentifier) {\n    const validCallL1Handler = {\n      from_address: getDecimalString(from_address),\n      to_address: getHexString(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    return this.fetchEndpoint(\"estimate_message_fee\", {\n      blockIdentifier\n    }, validCallL1Handler);\n  }\n  /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */\n  async getSimulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipExecute = false\n  }) {\n    if (invocations.length > 1) {\n      console.warn(\"Sequencer simulate process only first element from invocations list\");\n    }\n    if (skipExecute) {\n      console.warn(\"Sequencer can't skip account __execute__\");\n    }\n    const transaction = this.buildTransaction(invocations[0]);\n    return this.fetchEndpoint(\"simulate_transaction\", {\n      blockIdentifier,\n      skipValidate: skipValidate ?? false\n    }, transaction).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async getStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_state_update\", {\n      ...args\n    }).then(this.responseParser.parseGetStateUpdateResponse);\n  }\n  // consider adding an optional trace retrieval parameter to the getBlock method\n  async getBlockTraces(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_block_traces\", {\n      ...args\n    });\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToDecimalArray(invocation.signature),\n      nonce: toHex(invocation.nonce)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: invocation.type,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.compile(invocation.calldata ?? []),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n          ...details\n        };\n      }\n      return {\n        type: invocation.type,\n        contract_class: invocation.contract,\n        compiled_class_hash: invocation.compiledClassHash,\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"Sequencer buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/default.ts\nvar Provider = class {\n  constructor(providerOrOptions) {\n    if (providerOrOptions instanceof Provider) {\n      this.provider = providerOrOptions.provider;\n    } else if (providerOrOptions instanceof RpcProvider || providerOrOptions instanceof SequencerProvider) {\n      this.provider = providerOrOptions;\n    } else if (providerOrOptions && \"rpc\" in providerOrOptions) {\n      this.provider = new RpcProvider(providerOrOptions.rpc);\n    } else if (providerOrOptions && \"sequencer\" in providerOrOptions) {\n      this.provider = new SequencerProvider(providerOrOptions.sequencer);\n    } else {\n      this.provider = new RpcProvider();\n    }\n  }\n  async getChainId() {\n    return this.provider.getChainId();\n  }\n  async getBlock(blockIdentifier) {\n    return this.provider.getBlock(blockIdentifier);\n  }\n  async getClassAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassAt(contractAddress, blockIdentifier);\n  }\n  async getClassHashAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n  }\n  getClassByHash(classHash) {\n    return this.provider.getClassByHash(classHash);\n  }\n  async getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier) {\n    return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate) {\n    return this.provider.getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate);\n  }\n  async getEstimateFeeBulk(invocations, options) {\n    return this.provider.getEstimateFeeBulk(invocations, options);\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier) {\n    return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier) {\n    return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n  async getTransaction(txHash) {\n    return this.provider.getTransaction(txHash);\n  }\n  async getTransactionReceipt(txHash) {\n    return this.provider.getTransactionReceipt(txHash);\n  }\n  async callContract(request, blockIdentifier) {\n    return this.provider.callContract(request, blockIdentifier);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.provider.invokeFunction(functionInvocation, details);\n  }\n  async deployAccountContract(payload, details) {\n    return this.provider.deployAccountContract(payload, details);\n  }\n  async declareContract(transaction, details) {\n    return this.provider.declareContract(transaction, details);\n  }\n  async getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n  getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n  async getCode(contractAddress, blockIdentifier) {\n    return this.provider.getCode(contractAddress, blockIdentifier);\n  }\n  async waitForTransaction(txHash, options) {\n    return this.provider.waitForTransaction(txHash, options);\n  }\n  async getSimulateTransaction(invocations, options) {\n    return this.provider.getSimulateTransaction(invocations, options);\n  }\n  async getStateUpdate(blockIdentifier) {\n    return this.provider.getStateUpdate(blockIdentifier);\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  async getContractVersion(contractAddress, classHash, options) {\n    return this.provider.getContractVersion(contractAddress, classHash, options);\n  }\n};\n\n// src/signer/interface.ts\nvar SignerInterface = class {};\n\n// src/utils/transaction.ts\nvar transaction_exports = {};\n__export(transaction_exports, {\n  fromCallsToExecuteCalldata: () => fromCallsToExecuteCalldata,\n  fromCallsToExecuteCalldataWithNonce: () => fromCallsToExecuteCalldataWithNonce,\n  fromCallsToExecuteCalldata_cairo1: () => fromCallsToExecuteCalldata_cairo1,\n  getExecuteCalldata: () => getExecuteCalldata,\n  transformCallsToMulticallArrays: () => transformCallsToMulticallArrays,\n  transformCallsToMulticallArrays_cairo1: () => transformCallsToMulticallArrays_cairo1\n});\nvar transformCallsToMulticallArrays = calls => {\n  const callArray = [];\n  const calldata = [];\n  calls.forEach(call => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString()\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({\n      calldata\n    })\n  };\n};\nvar fromCallsToExecuteCalldata = calls => {\n  const {\n    callArray,\n    calldata\n  } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({\n    callArray\n  });\n  return [...compiledCalls, ...calldata];\n};\nvar fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()];\n};\nvar transformCallsToMulticallArrays_cairo1 = calls => {\n  const callArray = calls.map(call => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || [])\n  }));\n  return callArray;\n};\nvar fromCallsToExecuteCalldata_cairo1 = calls => {\n  const orderCalls = calls.map(call => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata: Array.isArray(call.calldata) && \"__compiled__\" in call.calldata ? call.calldata : CallData.compile(call.calldata)\n    // RawArgsObject | RawArgsArray type\n  }));\n  return CallData.compile({\n    orderCalls\n  });\n};\nvar getExecuteCalldata = (calls, cairoVersion = \"0\") => {\n  if (cairoVersion === \"1\") {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\n\n// src/utils/typedData.ts\nvar typedData_exports = {};\n__export(typedData_exports, {\n  encodeData: () => encodeData,\n  encodeType: () => encodeType,\n  encodeValue: () => encodeValue,\n  getDependencies: () => getDependencies,\n  getMessageHash: () => getMessageHash,\n  getStructHash: () => getStructHash,\n  getTypeHash: () => getTypeHash,\n  isMerkleTreeType: () => isMerkleTreeType,\n  prepareSelector: () => prepareSelector\n});\n\n// src/utils/merkle.ts\nvar merkle_exports = {};\n__export(merkle_exports, {\n  MerkleTree: () => MerkleTree,\n  proofMerklePath: () => proofMerklePath\n});\nvar MerkleTree = class {\n  constructor(leafHashes) {\n    this.branches = [];\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n  /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */\n  build(leaves) {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(MerkleTree.hash(leaves[i], \"0x0\"));\n      } else {\n        newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n      }\n    }\n    return this.build(newLeaves);\n  }\n  /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */\n  static hash(a, b) {\n    const [aSorted, bSorted] = [toBigInt(a), toBigInt(b)].sort((x, y) => x >= y ? 1 : -1);\n    return starkCurve.pedersen(aSorted, bSorted);\n  }\n  /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */\n  getProof(leaf, branch = this.leaves, hashPath = []) {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error(\"leaf not found\");\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? \"0x0\";\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex(b => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf), nextBranch, newHashPath);\n  }\n};\nfunction proofMerklePath(root, leaf, path) {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n\n// src/utils/typedData.ts\nfunction getHex(value) {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (typeof value === \"string\") {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\nvar validateTypedData = data => {\n  const typedData = data;\n  const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n  return valid;\n};\nfunction prepareSelector(selector) {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\nfunction isMerkleTreeType(type) {\n  return type.type === \"merkletree\";\n}\nvar getDependencies = (types, type, dependencies = []) => {\n  if (type[type.length - 1] === \"*\") {\n    type = type.slice(0, -1);\n  }\n  if (dependencies.includes(type)) {\n    return dependencies;\n  }\n  if (!types[type]) {\n    return dependencies;\n  }\n  return [type, ...types[type].reduce((previous, t) => [...previous, ...getDependencies(types, t.type, previous).filter(dependency => !previous.includes(dependency))], [])];\n};\nfunction getMerkleTreeType(types, ctx) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find(t => t.name === ctx.key);\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith(\"*\")) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return \"raw\";\n}\nvar encodeType = (types, type) => {\n  const [primary, ...dependencies] = getDependencies(types, type);\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n  return newTypes.map(dependency => {\n    return `${dependency}(${types[dependency].map(t => `${t.name}:${t.type}`)})`;\n  }).join(\"\");\n};\nvar getTypeHash = (types, type) => {\n  return getSelectorFromName(encodeType(types, type));\n};\nvar encodeValue = (types, type, data, ctx = {}) => {\n  if (types[type]) {\n    return [type, getStructHash(types, type, data)];\n  }\n  if (Object.keys(types).map(x => `${x}*`).includes(type)) {\n    const structHashes = data.map(struct => {\n      return getStructHash(types, type.slice(0, -1), struct);\n    });\n    return [type, computeHashOnElements(structHashes)];\n  }\n  if (type === \"merkletree\") {\n    const merkleTreeType = getMerkleTreeType(types, ctx);\n    const structHashes = data.map(struct => {\n      return encodeValue(types, merkleTreeType, struct)[1];\n    });\n    const {\n      root\n    } = new MerkleTree(structHashes);\n    return [\"felt\", root];\n  }\n  if (type === \"felt*\") {\n    return [\"felt*\", computeHashOnElements(data)];\n  }\n  if (type === \"selector\") {\n    return [\"felt\", prepareSelector(data)];\n  }\n  return [type, getHex(data)];\n};\nvar encodeData = (types, type, data) => {\n  const [returnTypes, values] = types[type].reduce(([ts, vs], field) => {\n    if (data[field.name] === void 0 || data[field.name] === null) {\n      throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n    }\n    const value = data[field.name];\n    const [t, encodedValue] = encodeValue(types, field.type, value, {\n      parent: type,\n      key: field.name\n    });\n    return [[...ts, t], [...vs, encodedValue]];\n  }, [[\"felt\"], [getTypeHash(types, type)]]);\n  return [returnTypes, values];\n};\nvar getStructHash = (types, type, data) => {\n  return computeHashOnElements(encodeData(types, type, data)[1]);\n};\nvar getMessageHash = (typedData, account) => {\n  if (!validateTypedData(typedData)) {\n    throw new Error(\"Typed data does not match JSON schema\");\n  }\n  const message = [encodeShortString(\"StarkNet Message\"), getStructHash(typedData.types, \"StarkNetDomain\", typedData.domain), account, getStructHash(typedData.types, typedData.primaryType, typedData.message)];\n  return computeHashOnElements(message);\n};\n\n// src/signer/default.ts\nvar Signer = class {\n  constructor(pk = starkCurve.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n  async getPubKey() {\n    return starkCurve.getStarkKey(this.pk);\n  }\n  async signMessage(typedData, accountAddress) {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n  async signTransaction(transactions, transactionsDetail, abis) {\n    if (abis && abis.length !== transactions.length) {\n      throw new Error(\"ABI must be provided for each transaction or no transaction\");\n    }\n    const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n    const msgHash = calculateTransactionHash(transactionsDetail.walletAddress, transactionsDetail.version, calldata, transactionsDetail.maxFee, transactionsDetail.chainId, transactionsDetail.nonce);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n  async signDeployAccountTransaction({\n    classHash,\n    contractAddress,\n    constructorCalldata,\n    addressSalt,\n    maxFee,\n    version,\n    chainId,\n    nonce\n  }) {\n    const msgHash = calculateDeployAccountTransactionHash(contractAddress, classHash, CallData.compile(constructorCalldata), addressSalt, version, maxFee, chainId, nonce);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n  async signDeclareTransaction({\n    classHash,\n    senderAddress,\n    chainId,\n    maxFee,\n    version,\n    nonce,\n    compiledClassHash\n  }) {\n    const msgHash = calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n};\n\n// src/utils/events.ts\nfunction parseUDCEvent(txReceipt) {\n  if (!txReceipt.events) {\n    throw new Error(\"UDC emitted event is empty\");\n  }\n  const event = txReceipt.events.find(it => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)) || {\n    data: []\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1]\n  };\n}\n\n// src/account/default.ts\nvar Account = class extends Provider {\n  constructor(providerOrOptions, address, pkOrSigner, cairoVersion) {\n    super(providerOrOptions);\n    this.deploySelf = this.deployAccount;\n    this.address = address.toLowerCase();\n    this.signer = typeof pkOrSigner === \"string\" || pkOrSigner instanceof Uint8Array ? new Signer(pkOrSigner) : pkOrSigner;\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString();\n    }\n  }\n  async getNonce(blockIdentifier) {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n  async getNonceSafe(nonce) {\n    try {\n      return toBigInt(nonce ?? (await this.getNonce()));\n    } catch (error) {\n      return 0n;\n    }\n  }\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  async getCairoVersion(classHash) {\n    if (!this.cairoVersion) {\n      const {\n        cairo\n      } = classHash ? await super.getContractVersion(void 0, classHash) : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n  async estimateFee(calls, estimateFeeDetails) {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n  async estimateInvokeFee(calls, {\n    nonce: providedNonce,\n    blockIdentifier,\n    skipValidate\n  } = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = toBigInt(feeTransactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    const response = await super.getInvokeEstimateFee({\n      ...invocation\n    }, {\n      version,\n      nonce\n    }, blockIdentifier, skipValidate);\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeclareFee({\n    contract,\n    classHash: providedClassHash,\n    casm,\n    compiledClassHash\n  }, {\n    blockIdentifier,\n    nonce: providedNonce,\n    skipValidate\n  } = {}) {\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n    const chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload({\n      classHash: providedClassHash,\n      contract,\n      casm,\n      compiledClassHash\n    }, {\n      nonce,\n      chainId,\n      version,\n      walletAddress: this.address,\n      maxFee: ZERO,\n      cairoVersion: void 0\n      // unused parameter\n    });\n    const response = await super.getDeclareEstimateFee(declareContractTransaction, {\n      version,\n      nonce\n    }, blockIdentifier, skipValidate);\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateAccountDeployFee({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, {\n    blockIdentifier,\n    skipValidate\n  } = {}) {\n    const version = toBigInt(feeTransactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const payload = await this.buildAccountDeployPayload({\n      classHash,\n      addressSalt,\n      constructorCalldata,\n      contractAddress: providedContractAddress\n    }, {\n      nonce,\n      chainId,\n      version,\n      walletAddress: this.address,\n      // unused parameter\n      maxFee: ZERO,\n      cairoVersion: void 0\n      // unused parameter\n    });\n    const response = await super.getDeployAccountEstimateFee({\n      ...payload\n    }, {\n      version,\n      nonce\n    }, blockIdentifier, skipValidate);\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeployFee(payload, transactionsDetail) {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, transactionsDetail);\n  }\n  async estimateFeeBulk(invocations, {\n    nonce,\n    blockIdentifier,\n    skipValidate\n  } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [feeTransactionVersion, feeTransactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    const response = await super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate\n    });\n    return [].concat(response).map(elem => {\n      const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n      return {\n        ...elem,\n        suggestedMaxFee\n      };\n    });\n  }\n  async buildInvocation(call, signerDetails) {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = await this.signer.signTransaction(call, signerDetails);\n    return {\n      contractAddress: this.address,\n      calldata,\n      signature\n    };\n  }\n  async execute(calls, abis = void 0, transactionsDetail = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    const maxFee = transactionsDetail.maxFee ?? (await this.getSuggestedMaxFee({\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      payload: calls\n    }, transactionsDetail));\n    const version = toBigInt(transactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n    const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n    return this.invokeFunction({\n      contractAddress: this.address,\n      calldata,\n      signature\n    }, {\n      nonce,\n      maxFee,\n      version\n    });\n  }\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  async declareIfNot(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: \"\",\n      class_hash: declareContractPayload.classHash\n    };\n  }\n  async declare(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    const details = {};\n    details.nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    details.maxFee = transactionsDetail.maxFee ?? (await this.getSuggestedMaxFee({\n      type: \"DECLARE\" /* DECLARE */,\n      payload: declareContractPayload\n    }, transactionsDetail));\n    details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n    details.chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n      ...details,\n      walletAddress: this.address,\n      cairoVersion: void 0\n      // unused parameter\n    });\n    return this.declareContract(declareContractTransaction, details);\n  }\n  async deploy(payload, details) {\n    const params = [].concat(payload).map(it => {\n      const {\n        classHash,\n        salt,\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      const deploySalt = salt ?? randomAddress();\n      return {\n        call: {\n          contractAddress: UDC.ADDRESS,\n          entrypoint: UDC.ENTRYPOINT,\n          calldata: [classHash, deploySalt, toCairoBool(unique), compiledConstructorCallData.length, ...compiledConstructorCallData]\n        },\n        address: calculateContractAddressFromHash(unique ? starkCurve.pedersen(this.address, deploySalt) : deploySalt, classHash, compiledConstructorCallData, unique ? UDC.ADDRESS : 0)\n      };\n    });\n    const calls = params.map(it => it.call);\n    const addresses = params.map(it => it.address);\n    const invokeResponse = await this.execute(calls, void 0, details);\n    return {\n      ...invokeResponse,\n      contract_address: addresses\n    };\n  }\n  async deployContract(payload, details) {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt);\n  }\n  async declareAndDeploy(payload, details) {\n    const {\n      constructorCalldata,\n      salt,\n      unique\n    } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== \"\") {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = {\n        ...declare,\n        ...tx\n      };\n    }\n    const deploy = await this.deployContract({\n      classHash: declare.class_hash,\n      salt,\n      unique,\n      constructorCalldata\n    }, details);\n    return {\n      declare: {\n        ...declare\n      },\n      deploy\n    };\n  }\n  async deployAccount({\n    classHash,\n    constructorCalldata = [],\n    addressSalt = 0,\n    contractAddress: providedContractAddress\n  }, transactionsDetail = {}) {\n    const version = toBigInt(transactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const maxFee = transactionsDetail.maxFee ?? (await this.getSuggestedMaxFee({\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      payload: {\n        classHash,\n        constructorCalldata: compiledCalldata,\n        addressSalt,\n        contractAddress\n      }\n    }, transactionsDetail));\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return this.deployAccountContract({\n      classHash,\n      addressSalt,\n      constructorCalldata,\n      signature\n    }, {\n      nonce,\n      maxFee,\n      version\n    });\n  }\n  async signMessage(typedData) {\n    return this.signer.signMessage(typedData, this.address);\n  }\n  async hashMessage(typedData) {\n    return getMessageHash(typedData, this.address);\n  }\n  async verifyMessageHash(hash, signature) {\n    try {\n      await this.callContract({\n        contractAddress: this.address,\n        entrypoint: \"isValidSignature\",\n        calldata: CallData.compile({\n          hash: toBigInt(hash).toString(),\n          signature: formatSignature(signature)\n        })\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async verifyMessage(typedData, signature) {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(hash, signature);\n  }\n  async getSuggestedMaxFee({\n    type,\n    payload\n  }, details) {\n    let feeEstimate;\n    switch (type) {\n      case \"INVOKE_FUNCTION\" /* INVOKE */:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n      case \"DECLARE\" /* DECLARE */:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n      case \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n      case \"DEPLOY\" /* DEPLOY */:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n      default:\n        feeEstimate = {\n          suggestedMaxFee: ZERO,\n          overall_fee: ZERO\n        };\n        break;\n    }\n    return feeEstimate.suggestedMaxFee;\n  }\n  /**\n   * will be renamed to buildDeclareContractTransaction\n   */\n  async buildDeclarePayload(payload, {\n    nonce,\n    chainId,\n    version,\n    walletAddress,\n    maxFee\n  }) {\n    const {\n      classHash,\n      contract,\n      compiledClassHash\n    } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    const signature = await this.signer.signDeclareTransaction({\n      classHash,\n      compiledClassHash,\n      senderAddress: walletAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return {\n      senderAddress: walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash\n    };\n  }\n  async buildAccountDeployPayload({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, {\n    nonce,\n    chainId,\n    version,\n    maxFee\n  }) {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      contractAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      addressSalt,\n      constructorCalldata: compiledCalldata\n    });\n    return {\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature\n    };\n  }\n  buildUDCContractPayload(payload) {\n    const calls = [].concat(payload).map(it => {\n      const {\n        classHash,\n        salt = \"0\",\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [classHash, salt, toCairoBool(unique), compiledConstructorCallData.length, ...compiledConstructorCallData]\n      };\n    });\n    return calls;\n  }\n  async simulateTransaction(invocations, {\n    nonce,\n    blockIdentifier,\n    skipValidate,\n    skipExecute\n  } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [transactionVersion, transactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute\n    });\n  }\n  async accountInvocationsFactory(invocations, {\n    versions,\n    nonce,\n    blockIdentifier\n  }) {\n    const version = versions[0];\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n    const tx0Payload = \"payload\" in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion = invocations[0].type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ? await this.getCairoVersion(tx0Payload.classHash) : await this.getCairoVersion();\n    return Promise.all([].concat(invocations).map(async (transaction, index) => {\n      const txPayload = \"payload\" in transaction ? transaction.payload : transaction;\n      const signerDetails = {\n        walletAddress: this.address,\n        nonce: toBigInt(Number(safeNonce) + index),\n        maxFee: ZERO,\n        version,\n        chainId,\n        cairoVersion\n      };\n      const common = {\n        type: transaction.type,\n        version,\n        nonce: toBigInt(Number(safeNonce) + index),\n        blockIdentifier\n      };\n      if (transaction.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n        const payload = await this.buildInvocation([].concat(txPayload), signerDetails);\n        return {\n          ...common,\n          ...payload\n        };\n      }\n      if (transaction.type === \"DECLARE\" /* DECLARE */) {\n        signerDetails.version = !isSierra(txPayload.contract) ? toBigInt(versions[0]) : toBigInt(versions[1]);\n        const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n        return {\n          ...common,\n          ...payload,\n          version: signerDetails.version\n        };\n      }\n      if (transaction.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n        const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n        return {\n          ...common,\n          ...payload\n        };\n      }\n      if (transaction.type === \"DEPLOY\" /* DEPLOY */) {\n        const calls = this.buildUDCContractPayload(txPayload);\n        const payload = await this.buildInvocation(calls, signerDetails);\n        return {\n          ...common,\n          ...payload,\n          type: \"INVOKE_FUNCTION\" /* INVOKE */\n        };\n      }\n      throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n    }));\n  }\n  async getStarkName(address = this.address, StarknetIdContract2) {\n    return super.getStarkName(address, StarknetIdContract2);\n  }\n};\n\n// src/provider/interface.ts\nvar ProviderInterface = class {};\n\n// src/provider/index.ts\nvar defaultProvider = new Provider({\n  rpc: {\n    default: true\n  }\n});\n\n// src/account/interface.ts\nvar AccountInterface = class extends ProviderInterface {};\n\n// src/utils/events/index.ts\nvar events_exports = {};\n__export(events_exports, {\n  getAbiEvents: () => getAbiEvents,\n  parseEvents: () => parseEvents\n});\nfunction getAbiEvents(abi) {\n  return abi.filter(abiEntry => abiEntry.type === \"event\" && (abiEntry.size || abiEntry.kind !== \"enum\")).reduce((acc, abiEntry) => {\n    const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(\":\") + 1);\n    const abiEntryMod = {\n      ...abiEntry\n    };\n    abiEntryMod.name = entryName;\n    return {\n      ...acc,\n      [addHexPrefix(starkCurve.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod\n    };\n  }, {});\n}\nfunction parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    const abiEvent = abiEvents[recEvent.keys[0]];\n    if (!abiEvent) {\n      return acc;\n    }\n    const parsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    recEvent.keys.shift();\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n    const abiEventKeys = abiEvent.members?.filter(it => it.kind === \"key\") || abiEvent.keys;\n    const abiEventData = abiEvent.members?.filter(it => it.kind === \"data\") || abiEvent.data;\n    abiEventKeys.forEach(key => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(keysIter, key, abiStructs, abiEnums, parsedEvent[abiEvent.name]);\n    });\n    abiEventData.forEach(data => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(dataIter, data, abiStructs, abiEnums, parsedEvent[abiEvent.name]);\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, []);\n  return ret;\n}\n\n// src/contract/default.ts\nvar splitArgsAndOptions = args => {\n  const options = [\"blockIdentifier\", \"parseRequest\", \"parseResponse\", \"formatResponse\", \"maxFee\", \"nonce\", \"signature\", \"addressSalt\"];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === \"object\" && options.some(x => x in lastArg)) {\n    return {\n      args,\n      options: args.pop()\n    };\n  }\n  return {\n    args\n  };\n};\nfunction buildCall(contract, functionAbi) {\n  return async function (...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options\n    });\n  };\n}\nfunction buildInvoke(contract, functionAbi) {\n  return async function (...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options\n    });\n  };\n}\nfunction buildDefault(contract, functionAbi) {\n  if (functionAbi.stateMutability === \"view\" || functionAbi.state_mutability === \"view\") {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\nfunction buildPopulate(contract, functionAbi) {\n  return function (...args) {\n    return contract.populate(functionAbi.name, args);\n  };\n}\nfunction buildEstimate(contract, functionAbi) {\n  return function (...args) {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\nfunction getCalldata(args, callback) {\n  if (Array.isArray(args) && \"__compiled__\" in args) return args;\n  if (Array.isArray(args) && Array.isArray(args[0]) && \"__compiled__\" in args[0]) return args[0];\n  return callback();\n}\nvar Contract = class {\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(abi, address, providerOrAccount = defaultProvider) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n    const options = {\n      enumerable: true,\n      value: {},\n      writable: false\n    };\n    Object.defineProperties(this, {\n      functions: {\n        enumerable: true,\n        value: {},\n        writable: false\n      },\n      callStatic: {\n        enumerable: true,\n        value: {},\n        writable: false\n      },\n      populateTransaction: {\n        enumerable: true,\n        value: {},\n        writable: false\n      },\n      estimateFee: {\n        enumerable: true,\n        value: {},\n        writable: false\n      }\n    });\n    this.abi.forEach(abiElement => {\n      if (abiElement.type !== \"function\") return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement)\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement)\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement)\n        });\n      }\n    });\n  }\n  attach(address) {\n    this.address = address;\n  }\n  connect(providerOrAccount) {\n    this.providerOrAccount = providerOrAccount;\n  }\n  async deployed() {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = void 0;\n    }\n    return this;\n  }\n  async call(method, args = [], {\n    parseRequest = true,\n    parseResponse = true,\n    formatResponse = void 0,\n    blockIdentifier = void 0\n  } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"CALL\" /* CALL */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    return this.providerOrAccount.callContract({\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method\n    }, blockIdentifier).then(x => {\n      if (!parseResponse) {\n        return x.result;\n      }\n      if (formatResponse) {\n        return this.callData.format(method, x.result, formatResponse);\n      }\n      return this.callData.parse(method, x.result);\n    });\n  }\n  invoke(method, args = [], {\n    parseRequest = true,\n    maxFee,\n    nonce,\n    signature\n  } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Invoke skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method\n    };\n    if (\"execute\" in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, void 0, {\n        maxFee,\n        nonce\n      });\n    }\n    if (!nonce) throw new Error(`Nonce is required when invoking a function without an account`);\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n    return this.providerOrAccount.invokeFunction({\n      ...invocation,\n      signature\n    }, {\n      nonce\n    });\n  }\n  async estimate(method, args = []) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n    }\n    const invocation = this.populate(method, args);\n    if (\"estimateInvokeFee\" in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error(\"Contract must be connected to the account contract to estimate\");\n  }\n  populate(method, args = []) {\n    const calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata\n    };\n  }\n  parseEvents(receipt) {\n    return parseEvents(receipt.events?.filter(event => cleanHex(event.from_address) === cleanHex(this.address), []) || [], this.events, this.structs, CallData.getAbiEnum(this.abi));\n  }\n  isCairo1() {\n    return cairo_exports.isCairo1Abi(this.abi);\n  }\n  async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n  typed(tAbi) {\n    return this;\n  }\n};\n\n// src/contract/interface.ts\nvar ContractInterface = class {};\n\n// src/contract/contractFactory.ts\nvar ContractFactory = class {\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  async deploy(...args) {\n    const {\n      args: param,\n      options = {\n        parseRequest: true\n      }\n    } = splitArgsAndOptions(args);\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(\"DEPLOY\" /* DEPLOY */, \"constructor\", param);\n        return this.CallData.compile(\"constructor\", param);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return param;\n    });\n    const {\n      deploy: {\n        contract_address,\n        transaction_hash\n      }\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt\n    });\n    assert(Boolean(contract_address), \"Deployment of the contract failed\");\n    const contractInstance = new Contract(this.compiledContract.abi, contract_address, this.account);\n    contractInstance.deployTransactionHash = transaction_hash;\n    return contractInstance;\n  }\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account) {\n    this.account = account;\n    return this;\n  }\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address) {\n    return new Contract(this.abi, address, this.account);\n  }\n  // ethers.js' getDeployTransaction cant be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n};\n\n// src/utils/address.ts\nimport { hexToBytes as hexToBytes2 } from \"@noble/curves/abstract/utils\";\nfunction addAddressPadding(address) {\n  return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, \"0\"));\n}\nfunction validateAndParseAddress(address) {\n  assertInRange(address, ZERO, MASK_251, \"Starknet Address\");\n  const result = addAddressPadding(address);\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error(\"Invalid Address Format\");\n  }\n  return result;\n}\nfunction getChecksumAddress(address) {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split(\"\");\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = hexToBytes2(hex.padStart(64, \"0\"));\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 15) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n  return addHexPrefix(chars.join(\"\"));\n}\nfunction validateChecksumAddress(address) {\n  return getChecksumAddress(address) === address;\n}\n\n// src/index.ts\nvar number = num_exports;\nexport { Account, AccountInterface, BlockStatus, BlockTag, CairoCustomEnum, CairoOption, CairoOptionVariant, CairoResult, CairoResultVariant, CallData, Contract, ContractFactory, ContractInterface, CustomError, EntryPointType, GatewayError, HttpError, LibraryError, Litteral, Provider, ProviderInterface, rpc_exports as RPC, RpcProvider, SIMULATION_FLAG, sequencer_exports as Sequencer, SequencerProvider, Signer, SignerInterface, TransactionExecutionStatus, TransactionFinalityStatus, TransactionStatus, TransactionType, Uint, ValidateType, addAddressPadding, buildUrl, cairo_exports as cairo, constants_exports as constants, contractClassResponseToLegacyCompiledContract, defaultProvider, ec_exports as ec, encode_exports as encode, events_exports as events, extractContractHashes, fixProto, fixStack, getCalldata, getChecksumAddress, getDefaultNodeUrl, hash_exports as hash, isSierra, isUrl, json_exports as json, merkle_exports as merkle, num_exports as num, number, parseUDCEvent, provider_exports as provider, selector_exports as selector, shortString_exports as shortString, splitArgsAndOptions, stark_exports as stark, starknetId_exports as starknetId, transaction_exports as transaction, typedData_exports as typedData, types_exports as types, uint256_exports as uint256, validateAndParseAddress, validateChecksumAddress };","map":{"version":3,"names":["constants_exports","__export","API_VERSION","BN_FEE_TRANSACTION_VERSION_1","BN_FEE_TRANSACTION_VERSION_2","BN_TRANSACTION_VERSION_1","BN_TRANSACTION_VERSION_2","BaseUrl","HEX_STR_TRANSACTION_VERSION_1","HEX_STR_TRANSACTION_VERSION_2","IS_BROWSER","MASK_250","MASK_251","NetworkName","RPC_GOERLI_NODES","RPC_MAINNET_NODES","StarknetChainId","TEXT_TO_FELT_MAX_LEN","TransactionHashPrefix","UDC","ZERO","encode_exports","addHexPrefix","arrayBufferToString","atobUniversal","btoaUniversal","buf2hex","calcByteLength","padLeft","pascalToSnake","removeHexPrefix","sanitizeBytes","sanitizeHex","stringToArrayBuffer","utf8ToArray","base64","window","STRING_ZERO","array","Uint8Array","reduce","data","byte","String","fromCharCode","str","TextEncoder","encode","a","decode","b","buffer","r","x","toString","padStart","hex","replace","padString","length","left","padding","diff","result","pad","repeat","byteSize","remainder","text","test","split","join","toUpperCase","BaseUrl2","NetworkName2","StarknetChainId4","TransactionHashPrefix2","ADDRESS","ENTRYPOINT","types_exports","BlockStatus","BlockTag","EntryPointType","Litteral","RPC","rpc_exports","SIMULATION_FLAG","Sequencer","sequencer_exports","TransactionExecutionStatus","TransactionFinalityStatus","TransactionStatus","TransactionType","Uint","ValidateType","SIMULATION_FLAG2","ValidateType2","Uint2","Litteral2","EntryPointType2","TransactionType2","TransactionStatus2","TransactionFinalityStatus2","TransactionExecutionStatus2","BlockStatus2","BlockTag2","EBlockTag","EDataAvailabilityMode","ESimulationFlag","ETransactionExecutionStatus","ETransactionFinalityStatus","ETransactionStatus","ETransactionType","Errors","errors_exports","JRPC","jsonrpc_exports","SPEC","components_exports","ETransactionType2","ESimulationFlag2","ETransactionStatus2","ETransactionFinalityStatus2","ETransactionExecutionStatus2","EBlockTag2","EDataAvailabilityMode2","assert","condition","message","Error","num_exports","assertInRange","bigNumberishArrayToDecimalStringArray","bigNumberishArrayToHexadecimalStringArray","cleanHex","getDecimalString","getHexString","getHexStringArray","hexToBytes","hexToDecimalString","isBigInt","isHex","isStringWholeNumber","toBigInt","toCairoBool","toHex","toHexString","toStorageKey","hexToBytesNoble","value","BigInt","number2","res","toLowerCase","input","lowerBound","upperBound","inputName","messageSuffix","inputBigInt","lowerBoundBigInt","upperBoundBigInt","rawCalldata","map","el","adaptedValue","selector_exports","getSelector","getSelectorFromName","keccakBn","starknetKeccak","keccak","hexWithoutPrefix","evenHex","keccakHex","hash","funcName","shortString_exports","decodeShortString","encodeShortString","isASCII","isDecimalString","isLongText","isShortString","isShortText","isText","splitLongString","val","longStr","regex","RegExp","match","char","charCodeAt","parseInt","concat","cairo_exports","felt","getAbiContractVersion","getArrayType","isCairo1Abi","isCairo1Type","isLen","isTypeArray","isTypeBool","isTypeContractAddress","isTypeEnum","isTypeEthAddress","isTypeFelt","isTypeLitteral","isTypeNamedTuple","isTypeOption","isTypeResult","isTypeStruct","isTypeTuple","isTypeUint","isTypeUint256","tuple","uint256","uint256_exports","UINT_128_MAX","UINT_256_MAX","bnToUint256","isUint256","uint256ToBN","uint2562","high","low","bn","bi","name","type","startsWith","includes","structs","enums","Object","values","substring","indexOf","lastIndexOf","abi","cairo","find","it","compiler","testFunction","inputs","outputs","io","args","Number","isInteger","encoded","CairoCustomEnum","constructor","enumContent","variantsList","nbActiveVariants","filter","content","variant","unwrap","variants","entries","activeVariant","item","CairoOptionVariant","CairoOptionVariant2","CairoOption","someContent","Some","None","isSome","isNone","CairoResultVariant","CairoResultVariant2","CairoResult","resultContent","Ok","Err","isOk","isErr","guard","isBN","key","unknown","formatter","sameType","acc","elType","Array","isArray","arrayStr","_","arrayObj","AbiParser1","methodInputsLength","abiMethod","getMethod","getLegacyFormat","AbiParser2","intf","items","flatMap","e","createAbiParser","version","getAbiVersion","isNoConstructorValid","method","argsCalldata","parseNamedTuple","namedTuple","parseSubTuple","s","subTuple","i","counter","lBracket","push","extractCairo0Tuple","cleanType","slice","recomposed","shift","extractCairo1Tuple","extractTupleMemberTypes","errorU256","orderPropsByAbi","unorderedObject","abiOfObject","orderInput","unorderedItem","abiType","orderArray","abiObj","orderEnum","orderTuple","u256","abiOfStruct","members","orderStruct","unorderedObject2","abiObject","orderedObject2","orderedObject","abiParam","setProperty","defineProperty","enumerable","myArray","typeInArray","myElem","typeList","abiTypeCairoX","index","myObjKeys","keys","unorderedResult","resultOkType","resultErrType","unorderedOption","resultSomeType","unorderedCustomEnum","newEntries","variantType","fromEntries","finalOrderedObject","parseBaseTypes","el_uint256","parseTuple","element","typeStr","memberTypes","elements","dx","parseUint256","parseCalldataValue","arrayType","subElement","tupled","parsedData","myOption","listTypeVariant2","typeVariantSome","parsedParameter2","myResult","listTypeVariant3","typeVariantOk","parsedParameter3","typeVariantErr","myEnum","listTypeVariant","typeActiveVariant","numActiveVariant","findIndex","parsedParameter","parseCalldataField","argsIterator","next","parseBaseTypes2","temp","Boolean","parseResponseValue","responseIterator","parsedDataArr","len","variantNum","rawEnum","num","customEnum","idx","responseParser","output","parsedResult","arrLen","validateFelt","parameter","param","validateUint","MAX_SAFE_INTEGER","validateBool","validateStruct","forEach","validateEnum","methodsKeys","getOwnPropertyNames","getPrototypeOf","validateTuple","validateArray","baseType","validateFields","CallData","getAbiStruct","getAbiEnum","parser","validate","invocableFunctionNames","isView","stateMutability","state_mutability","inputsLength","compile","abiFunction","Symbol","iterator","callArray","writable","rawArgs","createTree","obj","getEntries","o","prefix","oe","k","v","kk","variantNb","listVariants","activeVariantNb","callTreeArray","callTree","callObj","parse","response","flat","parsed","propName","format","abiEntry","fullEnumList","toCalldata","raw","calldata","hash_exports","calculateContractAddressFromHash","calculateDeclareTransactionHash","calculateDeployAccountTransactionHash","calculateDeployTransactionHash","calculateTransactionHash","calculateTransactionHashCommon","computeCompiledClassHash","computeContractClassHash","computeHashOnElements","computeLegacyContractClassHash","computeSierraContractClassHash","default","computeHintedClassHash","feeTransactionVersion","feeTransactionVersion_2","formatSpaces","getVersionsByType","poseidon","transactionVersion","transactionVersion_2","poseidonHashMany","ec_exports","starkCurve","weierstrass","json_exports","parse2","parseAlwaysAsBig","stringify","stringify2","stringifyAlwaysAsBig","json","parseIntAsNumberOrBigInt","parseFloat","isSafeInteger","parseNumberAndBigInt","replacer","space","numberStringifiers","versionType","v1","v2","y","pedersen","txHashPrefix","contractAddress","entryPointSelector","maxFee","chainId","additionalData","calldataHash","dataToHash","constructorCalldata","constructorName","classHash","senderAddress","nonce","compiledClassHash","salt","deployerAddress","compiledCalldata","constructorCalldataHash","CONTRACT_ADDRESS_PREFIX","nullSkipReplacer","json2","insideQuotes","newString","compiledContract","program","contractClass","serializedJson","contract","apiVersion","externalEntryPointsHash","entry_points_by_type","EXTERNAL","selector","offset","l1HandlerEntryPointsHash","L1_HANDLER","constructorEntryPointHash","CONSTRUCTOR","builtinsHash","builtins","hintedClassHash","dataHash","hashBuiltins","hashEntryPoint","base","casm","COMPILED_CLASS_VERSION","compiledClassVersion","l1Handlers","bytecode","hashEntryPointSierra","function_idx","hashAbi","sierra","indentString","CONTRACT_CLASS_VERSION","abiHash","sierraProgram","sierra_program","stark_exports","compressProgram","decompressProgram","estimatedFeeToMaxFee","formatSignature","makeAddress","randomAddress","signatureToDecimalArray","signatureToHexArray","getStarkKey","utils","gzip","ungzip","jsonProgram","stringified","compressedProgram","base642","decompressed","randomKeyPair","randomPrivateKey","sig","estimatedFee","overhead","overHeadPercent","Math","round","isSierra","extractContractHashes","payload","contractClassResponseToLegacyCompiledContract","ccr","isomorphicFetch","fetchPonyfill_default","fetch","global","provider_exports","createSierraContractClass","parseContract","wait","delay","Promise","setTimeout","sierra_program_debug_info","parsedContract","RPCResponseParser","parseGetBlockResponse","timestamp","block_hash","block_number","new_root","parent_hash","status","transactions","parseGetTransactionResponse","contract_address","sender_address","max_fee","signature","transaction_hash","parseFeeEstimateResponse","overall_fee","gas_consumed","gas_price","parseFeeEstimateBulkResponse","parseCallContractResponse","parseSimulateTransactionResponse","suggestedMaxFee","fee_estimation","parseContractClassResponse","JSON","fixStack","target","fn","captureStackTrace","fixProto","prototype","setPrototypeOf","__proto__","CustomError","new","configurable","LibraryError","GatewayError","errorCode","HttpError","starknetId_exports","StarknetIdContract","getStarknetIdContract","useDecoded","useEncoded","basicAlphabet","basicSizePlusOne","bigAlphabet","basicAlphabetSize","bigAlphabetSize","bigAlphabetSizePlusOne","extractStars","endsWith","decoded","subdomain","code","nextSubdomain","code2","multiplier","bnIndex","newid","StarknetIdContract2","getStarkName","provider","address","getChainId","hexDomain","callContract","entrypoint","decimalDomain","stringDomain","getAddressFromStarkName","addressData","domain","validBlockTags","Block","_identifier","number","tag","valueOf","setIdentifier","__identifier","queryIdentifier","identifier","sequencerIdentifier","blockHash","blockNumber","getDefaultNodeUrl","networkName","mute","console","warn","nodes","randIdx","floor","random","defaultOptions","headers","blockIdentifier","retries","RpcProvider","optionsOrProvider","getBlockHashAndNumber","getBlockLatestAccepted","getStateUpdate","getBlockStateUpdate","traceBlockTransactions","getBlockTransactionsTraces","getTransactionCount","getBlockTransactionCount","traceTransaction","getTransactionTrace","getSimulateTransaction","simulateTransaction","nodeUrl","params","id","rpcRequestBody","jsonrpc","body","errorHandler","rpcError","otherError","fetchEndpoint","rawResult","error","getSpecVersion","getNonceForAddress","block_id","getBlock","getBlockWithTxHashes","then","getBlockNumber","getBlockWithTxs","getPendingTransactions","all","getTransactionByHash","getTransaction","txHash","getTransactionByBlockIdAndIndex","getTransactionReceipt","getTransactionStatus","transactionHash","invocations","skipValidate","skipFeeCharge","simulationFlags","SKIP_VALIDATE","SKIP_FEE_CHARGE","buildTransaction","simulation_flags","waitForTransaction","options","onchain","isErrorState","retryInterval","errorStates","REJECTED","REVERTED","successStates","SUCCEEDED","ACCEPTED_ON_L2","ACCEPTED_ON_L1","txStatus","executionStatus","execution_status","finalityStatus","finality_status","txReceipt","getStorageAt","parsedKey","getClassHashAt","getClassByHash","getClass","class_hash","getClassAt","getCode","_contractAddress","_blockIdentifier","getContractVersion","abiTest","getEstimateFee","invocation","invocationDetails","getInvokeEstimateFee","transaction","request","getDeclareEstimateFee","details","getDeployAccountEstimateFee","getEstimateFeeBulk","invokeFunction","functionInvocation","invoke_transaction","INVOKE","declareContract","declare_transaction","DECLARE","contract_class","contract_class_version","compiled_class_hash","deployAccountContract","addressSalt","deploy_account_transaction","constructor_calldata","contract_address_salt","DEPLOY_ACCOUNT","call","entry_point_selector","estimateMessageFee","from_address","to_address","formattedMessage","getSyncingStats","getEvents","eventFilter","defaultVersions","urljoin2","ResponseParser","SequencerAPIResponseParser","state_root","parent_block_hash","parseGetTransactionReceiptResponse","messages_sent","l2_to_l1_messages","revert_reason","revert_error","gasInfo","gas_usage","amount","transaction_trace","trace","parseInvokeFunctionResponse","parseDeployContractResponse","parseDeclareContractResponse","parseGetStateUpdateResponse","nonces","state_diff","storage_diffs","storage_entries","urljoin","protocolAndDomainRE","localhostDomainRE","nonLocalhostDomainRE","isUrl","everythingAfterProtocol","buildUrl","baseUrl","defaultPath","urlOrPath","isEmptyQueryObject","every","defaultOptions2","network","SequencerProvider","getNetworkFromName","feederGatewayUrl","gatewayUrl","getChainIdFromBaseUrl","url","URL","host","getFetchUrl","endpoint","gatewayUrlEndpoints","getFetchMethod","postMethodEndpoints","getQueryString","query","queryString","block","getHeaders","textResponse","ok","responseBody","statusText","parseChoice","parseAlwaysAsBigInt","resolve","txHashHex","getCompiledClassByClassHash","completed","tx_failure_reason","tx_status","error_message","tx_revert_reason","getContractAddresses","validCallL1Handler","skipExecute","getBlockTraces","Provider","providerOrOptions","rpc","sequencer","invocationWithTxType","SignerInterface","transaction_exports","fromCallsToExecuteCalldata","fromCallsToExecuteCalldataWithNonce","fromCallsToExecuteCalldata_cairo1","getExecuteCalldata","transformCallsToMulticallArrays","transformCallsToMulticallArrays_cairo1","calls","to","data_offset","data_len","compiledCalls","orderCalls","cairoVersion","typedData_exports","encodeData","encodeType","encodeValue","getDependencies","getMessageHash","getStructHash","getTypeHash","isMerkleTreeType","prepareSelector","merkle_exports","MerkleTree","proofMerklePath","leafHashes","branches","leaves","root","build","newLeaves","aSorted","bSorted","sort","getProof","leaf","branch","hashPath","isLeft","neededBranch","newHashPath","currentBranchLevelIndex","nextBranch","path","rest","getHex","validateTypedData","typedData","valid","types","primaryType","dependencies","previous","t","dependency","getMerkleTreeType","ctx","parent","parentType","merkleType","isMerkleTree","contains","primary","newTypes","structHashes","struct","merkleTreeType","returnTypes","ts","vs","field","encodedValue","account","Signer","pk","getPubKey","signMessage","accountAddress","msgHash","sign","signTransaction","transactionsDetail","abis","walletAddress","signDeployAccountTransaction","signDeclareTransaction","parseUDCEvent","events","event","deployer","unique","calldata_len","Account","pkOrSigner","deploySelf","deployAccount","signer","getNonce","getNonceSafe","getCairoVersion","estimateFee","estimateFeeDetails","estimateInvokeFee","providedNonce","signerDetails","buildInvocation","estimateDeclareFee","providedClassHash","declareContractTransaction","buildDeclarePayload","estimateAccountDeployFee","providedContractAddress","buildAccountDeployPayload","estimateDeployFee","buildUDCContractPayload","estimateFeeBulk","accountInvocations","accountInvocationsFactory","versions","elem","execute","getSuggestedMaxFee","declareIfNot","declareContractPayload","declare","deploy","compiledConstructorCallData","deploySalt","addresses","invokeResponse","deployContract","deployTx","declareAndDeploy","tx","hashMessage","verifyMessageHash","verifyMessage","feeEstimate","compressedCompiledContract","safeNonce","tx0Payload","txPayload","common","ProviderInterface","defaultProvider","AccountInterface","events_exports","getAbiEvents","parseEvents","size","kind","entryName","abiEntryMod","providerReceivedEvents","abiEvents","abiStructs","abiEnums","ret","recEvent","abiEvent","parsedEvent","keysIter","dataIter","abiEventKeys","abiEventData","splitArgsAndOptions","lastArg","some","pop","buildCall","functionAbi","parseRequest","parseResponse","buildInvoke","invoke","buildDefault","buildPopulate","populate","buildEstimate","estimate","getCalldata","callback","Contract","providerOrAccount","callData","defineProperties","functions","callStatic","populateTransaction","abiElement","attach","connect","deployed","deployTransactionHash","formatResponse","receipt","isCairo1","getVersion","typed","tAbi","ContractInterface","ContractFactory","contractInstance","hexToBytes2","addAddressPadding","validateAndParseAddress","getChecksumAddress","chars","hashed","validateChecksumAddress"],"sources":["/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/constants.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/encode.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/account.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/calldata.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/lib/contract/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/lib/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/rpc.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/jsonrpc/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/rpcspec/errors.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/rpcspec/components.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/rpcspec/nonspec.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/types/api/sequencer.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/assert.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/num.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/selector.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/shortString.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/cairo.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/uint256.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/enum/CairoCustomEnum.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/enum/CairoOption.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/enum/CairoResult.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/formatter.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/parser/parser-0-1.1.0.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/parser/parser-2.0.0.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/parser/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/tuple.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/propertyOrder.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/requestParser.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/responseParser.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/validate.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/calldata/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/hash.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/ec.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/json.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/stark.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/contract.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/fetchPonyfill.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/provider.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/responseParser/rpc.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/errors.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/starknetId.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/starknetId.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/utils.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/rpc.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/sequencer.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/responseParser/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/responseParser/sequencer.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/url.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/default.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/signer/interface.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/transaction.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/typedData.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/merkle.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/signer/default.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/events.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/account/default.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/interface.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/provider/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/account/interface.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/events/index.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/contract/default.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/contract/interface.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/contract/contractFactory.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/utils/address.ts","/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/starknet/src/index.ts"],"sourcesContent":["export { IS_BROWSER } from './utils/encode';\n\n/**\n * Cairo Felt support storing max 31 character\n */\nexport const TEXT_TO_FELT_MAX_LEN = 31;\n\nexport const HEX_STR_TRANSACTION_VERSION_1 = '0x1';\nexport const HEX_STR_TRANSACTION_VERSION_2 = '0x2';\nexport const BN_TRANSACTION_VERSION_1 = 1n;\nexport const BN_TRANSACTION_VERSION_2 = 2n;\nexport const BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nexport const BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\n\nexport const ZERO = 0n;\nexport const MASK_250 = 2n ** 250n - 1n; // 2 ** 250 - 1\nexport const MASK_251 = 2n ** 251n;\nexport const API_VERSION = ZERO;\n\nexport enum BaseUrl {\n  SN_MAIN = 'https://alpha-mainnet.starknet.io',\n  SN_GOERLI = 'https://alpha4.starknet.io',\n}\n\nexport enum NetworkName {\n  SN_MAIN = 'SN_MAIN',\n  SN_GOERLI = 'SN_GOERLI',\n}\n\nexport enum StarknetChainId {\n  SN_MAIN = '0x534e5f4d41494e', // encodeShortString('SN_MAIN'),\n  SN_GOERLI = '0x534e5f474f45524c49', // encodeShortString('SN_GOERLI')\n}\n\nexport enum TransactionHashPrefix {\n  DECLARE = '0x6465636c617265', // encodeShortString('declare'),\n  DEPLOY = '0x6465706c6f79', // encodeShortString('deploy'),\n  DEPLOY_ACCOUNT = '0x6465706c6f795f6163636f756e74', // encodeShortString('deploy_account'),\n  INVOKE = '0x696e766f6b65', // encodeShortString('invoke'),\n  L1_HANDLER = '0x6c315f68616e646c6572', // encodeShortString('l1_handler'),\n}\n\nexport const UDC = {\n  ADDRESS: '0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf',\n  ENTRYPOINT: 'deployContract',\n};\n\nexport const RPC_GOERLI_NODES = [\n  'https://starknet-testnet.public.blastapi.io/rpc/v0.5',\n  'https://limited-rpc.nethermind.io/goerli-juno/v0_5',\n];\n\nexport const RPC_MAINNET_NODES = [\n  'https://starknet-mainnet.public.blastapi.io/rpc/v0.5',\n  'https://limited-rpc.nethermind.io/mainnet-juno/v0_5',\n];\n","import { base64 } from '@scure/base';\n\n/* eslint-disable no-param-reassign */\nexport const IS_BROWSER = typeof window !== 'undefined';\n\nconst STRING_ZERO = '0';\n\n/**\n * Some functions recreated from https://github.com/pedrouid/enc-utils/blob/master/src/index.ts\n * enc-utils is not a dependency to avoid using `Buffer` which only works in node and not browsers\n */\n\n/**\n * Convert array buffer to string\n *\n * *[internal usage]*\n */\nexport function arrayBufferToString(array: ArrayBuffer): string {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), '');\n}\n\n/**\n * Convert utf8-string to Uint8Array\n *\n * *[internal usage]*\n */\nexport function utf8ToArray(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\n/**\n * Convert utf8-string to Uint8Array\n *\n * @deprecated equivalent to 'utf8ToArray', alias will be removed\n */\nexport function stringToArrayBuffer(str: string): Uint8Array {\n  return utf8ToArray(str);\n}\n\n/**\n * Convert string to array buffer (browser and node compatible)\n */\nexport function atobUniversal(a: string): Uint8Array {\n  return base64.decode(a);\n}\n\n/**\n * Convert array buffer to string (browser and node compatible)\n */\nexport function btoaUniversal(b: ArrayBuffer): string {\n  return base64.encode(new Uint8Array(b));\n}\n\n/**\n * Convert array buffer to hex-string\n * @returns format: hex-string\n */\nexport function buf2hex(buffer: Uint8Array) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, '0'), '');\n}\n\n/**\n * Remove hex prefix '0x' from hex-string\n * @param hex hex-string\n * @returns format: base16-string\n */\nexport function removeHexPrefix(hex: string): string {\n  return hex.replace(/^0x/i, '');\n}\n\n/**\n * Add hex prefix '0x' to base16-string\n * @param hex base16-string\n * @returns format: hex-string\n */\nexport function addHexPrefix(hex: string): string {\n  return `0x${removeHexPrefix(hex)}`;\n}\n\n/**\n * Prepend or append to string\n *\n * *[internal usage]*\n */\nfunction padString(str: string, length: number, left: boolean, padding = STRING_ZERO): string {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\n\n/**\n * Prepend string (default with '0')\n */\nexport function padLeft(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, true, padding);\n}\n\n/**\n * Calculate byte length of string\n *\n * *[no internal usage]*\n */\nexport function calcByteLength(str: string, byteSize = 8): number {\n  const { length } = str;\n  const remainder = length % byteSize;\n  return remainder ? ((length - remainder) / byteSize) * byteSize + byteSize : length;\n}\n\n/**\n * Prepend '0' to string bytes\n *\n * *[no internal usage]*\n */\nexport function sanitizeBytes(str: string, byteSize = 8, padding = STRING_ZERO): string {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\n\n/**\n * Prepend '0' to hex-string bytes\n *\n * *[no internal usage]*\n * @param hex hex-string\n * @returns format: hex-string\n */\nexport function sanitizeHex(hex: string): string {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\n\n/**\n * String transformation util\n *\n * Pascal case to screaming snake case\n */\nexport const pascalToSnake = (text: string) =>\n  /[a-z]/.test(text)\n    ? text\n        .split(/(?=[A-Z])/)\n        .join('_')\n        .toUpperCase()\n    : text;\n","export * from './account';\nexport * from './calldata';\nexport * from './contract';\nexport * from './lib';\nexport * from './provider';\nexport * from './signer';\nexport * from './typedData';\nexport * from './cairoEnum';\n\nexport * as RPC from './api/rpc';\nexport {\n  CallL1Handler,\n  DeployedContractItem,\n  ExecutionResources,\n  FunctionInvocation,\n  GetContractAddressesResponse,\n  GetTransactionStatusResponse,\n  SequencerIdentifier,\n} from './api/sequencer';\nexport * as Sequencer from './api/sequencer';\n","import { BigNumberish, BlockIdentifier } from './lib';\nimport { DeclareTransactionReceiptResponse, EstimateFeeResponse } from './provider';\n\nexport interface EstimateFee extends EstimateFeeResponse {\n  suggestedMaxFee: bigint;\n}\n\nexport type EstimateFeeBulk = Array<EstimateFee>;\n\nexport type AccountInvocationsFactoryDetails = {\n  versions: bigint[];\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n};\n\nexport interface EstimateFeeDetails {\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n}\n\nexport interface DeployContractResponse {\n  contract_address: string;\n  transaction_hash: string;\n}\n\nexport type MultiDeployContractResponse = {\n  contract_address: Array<string>;\n  transaction_hash: string;\n};\n\nexport type DeployContractUDCResponse = {\n  contract_address: string;\n  transaction_hash: string;\n  address: string;\n  deployer: string;\n  unique: string;\n  classHash: string;\n  calldata_len: string;\n  calldata: Array<string>;\n  salt: string;\n};\n\nexport type DeclareDeployUDCResponse = {\n  declare: {\n    class_hash: BigNumberish;\n  } & Partial<DeclareTransactionReceiptResponse>;\n  deploy: DeployContractUDCResponse;\n};\n\nexport type SimulateTransactionDetails = {\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n  skipExecute?: boolean;\n};\n\nexport enum SIMULATION_FLAG {\n  SKIP_VALIDATE = 'SKIP_VALIDATE',\n  SKIP_EXECUTE = 'SKIP_EXECUTE',\n}\n","export enum ValidateType {\n  DEPLOY = 'DEPLOY',\n  CALL = 'CALL',\n  INVOKE = 'INVOKE',\n}\n\nexport enum Uint {\n  u8 = 'core::integer::u8',\n  u16 = 'core::integer::u16',\n  u32 = 'core::integer::u32',\n  u64 = 'core::integer::u64',\n  u128 = 'core::integer::u128',\n  u256 = 'core::integer::u256', // This one is struct\n}\n\nexport enum Litteral {\n  ClassHash = 'core::starknet::class_hash::ClassHash',\n  ContractAddress = 'core::starknet::contract_address::ContractAddress',\n}\n","import { LegacyCompiledContract, LegacyContractClass } from './legacy';\nimport { CompiledSierra, SierraContractClass } from './sierra';\n\n// Final types\n/**\n * format produced after compressing compiled contract\n * CompressedCompiledContract\n */\nexport type ContractClass = LegacyContractClass | SierraContractClass;\n\n/**\n * format produced after compile .cairo to .json\n */\nexport type CompiledContract = LegacyCompiledContract | CompiledSierra;\n\n/**\n * Compressed or decompressed Cairo0 or Cairo1 Contract\n */\nexport type CairoContract = ContractClass | CompiledContract;\n\n// Basic elements\nexport enum EntryPointType {\n  EXTERNAL = 'EXTERNAL',\n  L1_HANDLER = 'L1_HANDLER',\n  CONSTRUCTOR = 'CONSTRUCTOR',\n}\n\nexport * from './abi';\nexport * from './legacy';\nexport * from './sierra';\n","import { StarknetChainId } from '../../constants';\nimport { weierstrass } from '../../utils/ec';\nimport { CairoEnum } from '../cairoEnum';\nimport { CompiledContract, CompiledSierraCasm, ContractClass } from './contract';\n\nexport type WeierstrassSignatureType = weierstrass.SignatureType;\nexport type ArraySignatureType = string[];\nexport type Signature = ArraySignatureType | WeierstrassSignatureType;\n\nexport type BigNumberish = string | number | bigint;\n\n/**\n * Compiled calldata ready to be sent\n * decimal-string array\n */\nexport type Calldata = string[] & { readonly __compiled__?: boolean };\n\n/**\n * Represents an integer in the range [0, 2^256)\n */\nexport interface Uint256 {\n  // The low 128 bits of the value\n  low: BigNumberish;\n  // The high 128 bits of the value\n  high: BigNumberish;\n}\n\n/**\n * BigNumberish array\n * use CallData.compile() to convert to Calldata\n */\nexport type RawCalldata = BigNumberish[];\n\n/**\n * Hexadecimal-string array\n */\nexport type HexCalldata = string[];\n\nexport type AllowArray<T> = T | T[];\n\nexport type OptionalPayload<T> = { payload: T } | T;\n\nexport type RawArgs = RawArgsObject | RawArgsArray;\n\nexport type RawArgsObject = {\n  [inputName: string]: MultiType | MultiType[] | RawArgs;\n};\n\nexport type RawArgsArray = Array<MultiType | MultiType[] | RawArgs>;\n\nexport type MultiType = BigNumberish | Uint256 | object | boolean | CairoEnum;\n\nexport type UniversalDeployerContractPayload = {\n  classHash: BigNumberish;\n  salt?: string;\n  unique?: boolean;\n  constructorCalldata?: RawArgs;\n};\n\nexport type DeployAccountContractPayload = {\n  classHash: string;\n  constructorCalldata?: RawArgs;\n  addressSalt?: BigNumberish;\n  contractAddress?: string;\n};\n\nexport type DeployAccountContractTransaction = Omit<\n  DeployAccountContractPayload,\n  'contractAddress'\n> & {\n  signature?: Signature;\n};\n\nexport type DeclareContractPayload = {\n  contract: CompiledContract | string;\n  classHash?: string;\n  casm?: CompiledSierraCasm;\n  compiledClassHash?: string;\n};\n\nexport type CompleteDeclareContractPayload = {\n  contract: CompiledContract | string;\n  classHash: string;\n  casm?: CompiledSierraCasm;\n  compiledClassHash?: string;\n};\n\nexport type DeclareAndDeployContractPayload = Omit<UniversalDeployerContractPayload, 'classHash'> &\n  DeclareContractPayload;\n\nexport type DeclareContractTransaction = {\n  contract: ContractClass;\n  senderAddress: string;\n  signature?: Signature;\n  compiledClassHash?: string;\n};\n\nexport type CallDetails = {\n  contractAddress: string;\n  calldata?: RawArgs | Calldata;\n  entrypoint?: string; // TODO: check if required\n};\n\nexport type Invocation = CallDetails & { signature?: Signature };\n\nexport type Call = CallDetails & { entrypoint: string };\n\nexport type CairoVersion = '0' | '1' | undefined;\nexport type CompilerVersion = '0' | '1' | '2' | undefined;\n\nexport type InvocationsDetails = {\n  nonce?: BigNumberish;\n  maxFee?: BigNumberish;\n  version?: BigNumberish;\n};\n\n/**\n * Contain all additional details params\n */\nexport type Details = {\n  nonce: BigNumberish;\n  maxFee: BigNumberish;\n  version: BigNumberish;\n  chainId: StarknetChainId;\n};\n\nexport type InvocationsDetailsWithNonce = InvocationsDetails & {\n  nonce: BigNumberish;\n};\n\nexport enum TransactionType {\n  DECLARE = 'DECLARE',\n  DEPLOY = 'DEPLOY',\n  DEPLOY_ACCOUNT = 'DEPLOY_ACCOUNT',\n  INVOKE = 'INVOKE_FUNCTION',\n}\n\n/**\n * new statuses are defined by props: finality_status and execution_status\n * to be #deprecated\n */\nexport enum TransactionStatus {\n  NOT_RECEIVED = 'NOT_RECEIVED',\n  RECEIVED = 'RECEIVED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n  REJECTED = 'REJECTED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum TransactionFinalityStatus {\n  NOT_RECEIVED = 'NOT_RECEIVED',\n  RECEIVED = 'RECEIVED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\n\nexport enum TransactionExecutionStatus {\n  REJECTED = 'REJECTED',\n  REVERTED = 'REVERTED',\n  SUCCEEDED = 'SUCCEEDED',\n}\n\nexport enum BlockStatus {\n  PENDING = 'PENDING',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  REJECTED = 'REJECTED',\n}\n\nexport enum BlockTag {\n  pending = 'pending',\n  latest = 'latest',\n}\n\nexport type BlockNumber = BlockTag | null | number;\n\n/**\n * hex string and BN are detected as block hashes\n * decimal string and number are detected as block numbers\n * null appends nothing to the request url\n */\nexport type BlockIdentifier = BlockNumber | BigNumberish;\n\n/**\n * items used by AccountInvocations\n */\nexport type AccountInvocationItem = (\n  | ({ type: TransactionType.DECLARE } & DeclareContractTransaction)\n  | ({ type: TransactionType.DEPLOY_ACCOUNT } & DeployAccountContractTransaction)\n  | ({ type: TransactionType.INVOKE } & Invocation)\n) &\n  InvocationsDetailsWithNonce;\n\n/**\n * Complete invocations array with account details (internal type from account -> provider)\n */\nexport type AccountInvocations = AccountInvocationItem[];\n\n/**\n * Invocations array user provide to bulk method (simulate)\n */\nexport type Invocations = Array<\n  | ({ type: TransactionType.DECLARE } & OptionalPayload<DeclareContractPayload>)\n  | ({ type: TransactionType.DEPLOY } & OptionalPayload<\n      AllowArray<UniversalDeployerContractPayload>\n    >)\n  | ({ type: TransactionType.DEPLOY_ACCOUNT } & OptionalPayload<DeployAccountContractPayload>)\n  | ({ type: TransactionType.INVOKE } & OptionalPayload<AllowArray<Call>>)\n>;\n\nexport type Tupled = { element: any; type: string };\n\nexport type Args = {\n  [inputName: string]: BigNumberish | BigNumberish[] | ParsedStruct | ParsedStruct[];\n};\nexport type ParsedStruct = {\n  [key: string]: BigNumberish | BigNumberish[] | ParsedStruct | Uint256;\n};\n\nexport type waitForTransactionOptions = {\n  retryInterval?: number;\n  successStates?: Array<TransactionFinalityStatus | TransactionExecutionStatus>;\n  errorStates?: Array<TransactionFinalityStatus | TransactionExecutionStatus>;\n};\n\nexport type getSimulateTransactionOptions = {\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n  skipExecute?: boolean;\n  skipFeeCharge?: boolean;\n};\n\nexport type getContractVersionOptions = {\n  blockIdentifier?: BlockIdentifier;\n  compiler?: boolean;\n};\n\nexport type getEstimateFeeBulkOptions = {\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n};\n\nexport interface CallStruct {\n  to: string;\n  selector: string;\n  calldata: string[];\n}\n\n/**\n * Represent Contract version\n */\nexport type ContractVersion = {\n  /** version of the cairo language */\n  cairo: CairoVersion;\n  /** version of the cairo compiler used to compile the contract */\n  compiler: CompilerVersion;\n};\n\nexport * from './contract';\n","export * as JRPC from './jsonrpc';\nexport * from './rpcspec';\n","export type RequestBody = {\n  id: number | string;\n  jsonrpc: '2.0';\n  method: string;\n  params?: {};\n};\n\nexport type ResponseBody = {\n  id: number | string;\n  jsonrpc: '2.0';\n} & (SuccessResponseBody | ErrorResponseBody);\n\nexport type SuccessResponseBody = {\n  result: unknown;\n};\n\nexport type ErrorResponseBody = {\n  error: Error;\n};\n\nexport type Error = {\n  code: number;\n  message: string;\n  data?: unknown;\n};\n","export interface FAILED_TO_RECEIVE_TXN {\n  code: 1;\n  message: 'Failed to write transaction';\n}\n\nexport interface NO_TRACE_AVAILABLE {\n  code: 10;\n  message: 'No trace available for transaction';\n  data: {\n    status: 'RECEIVED' | 'REJECTED';\n  };\n}\n\nexport interface CONTRACT_NOT_FOUND {\n  code: 20;\n  message: 'Contract not found';\n}\n\nexport interface INVALID_MESSAGE_SELECTOR {\n  code: 21;\n  message: 'Invalid message selector';\n}\n\nexport interface INVALID_CALL_DATA {\n  code: 22;\n  message: 'Invalid call data';\n}\n\nexport interface BLOCK_NOT_FOUND {\n  code: 24;\n  message: 'Block not found';\n}\n\nexport interface INVALID_TXN_HASH {\n  code: 25;\n  message: 'Invalid transaction hash';\n}\n\nexport interface INVALID_BLOCK_HASH {\n  code: 26;\n  message: 'Invalid block hash';\n}\n\nexport interface INVALID_TXN_INDEX {\n  code: 27;\n  message: 'Invalid transaction index in a block';\n}\n\nexport interface CLASS_HASH_NOT_FOUND {\n  code: 28;\n  message: 'Class hash not found';\n}\n\nexport interface TXN_HASH_NOT_FOUND {\n  code: 29;\n  message: 'Transaction hash not found';\n}\n\nexport interface PAGE_SIZE_TOO_BIG {\n  code: 31;\n  message: 'Requested page size is too big';\n}\n\nexport interface NO_BLOCKS {\n  code: 32;\n  message: 'There are no blocks';\n}\n\nexport interface INVALID_CONTINUATION_TOKEN {\n  code: 33;\n  message: 'The supplied continuation token is invalid or unknown';\n}\n\nexport interface TOO_MANY_KEYS_IN_FILTER {\n  code: 34;\n  message: 'Too many keys provided in a filter';\n}\n\nexport interface CONTRACT_ERROR {\n  code: 40;\n  message: 'Contract error';\n  data: {\n    revert_error: string;\n  };\n}\n\nexport interface CLASS_ALREADY_DECLARED {\n  code: 51;\n  message: 'Class already declared';\n}\n\nexport interface INVALID_TRANSACTION_NONCE {\n  code: 52;\n  message: 'Invalid transaction nonce';\n}\n\nexport interface INSUFFICIENT_MAX_FEE {\n  code: 53;\n  message: 'Max fee is smaller than the minimal transaction cost (validation plus fee transfer)';\n}\n\nexport interface INSUFFICIENT_ACCOUNT_BALANCE {\n  code: 54;\n  message: \"Account balance is smaller than the transaction's max_fee\";\n}\n\nexport interface VALIDATION_FAILURE {\n  code: 55;\n  message: 'Account validation failed';\n}\n\nexport interface COMPILATION_FAILED {\n  code: 56;\n  message: 'Compilation failed';\n}\n\nexport interface CONTRACT_CLASS_SIZE_IS_TOO_LARGE {\n  code: 57;\n  message: 'Contract class size it too large';\n}\n\nexport interface NON_ACCOUNT {\n  code: 58;\n  message: 'Sender address in not an account contract';\n}\n\nexport interface DUPLICATE_TX {\n  code: 59;\n  message: 'A transaction with the same hash already exists in the mempool';\n}\n\nexport interface COMPILED_CLASS_HASH_MISMATCH {\n  code: 60;\n  message: 'the compiled class hash did not match the one supplied in the transaction';\n}\n\nexport interface UNSUPPORTED_TX_VERSION {\n  code: 61;\n  message: 'the transaction version is not supported';\n}\n\nexport interface UNSUPPORTED_CONTRACT_CLASS_VERSION {\n  code: 62;\n  message: 'the contract class version is not supported';\n}\n\nexport interface UNEXPECTED_ERROR {\n  code: 63;\n  message: 'An unexpected error occurred';\n  data: string;\n}\n","/**\n * PRIMITIVES\n */\n\n/**\n * A field element. represented by at most 63 hex digits\n * @pattern ^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,62})$\n */\nexport type FELT = string;\n/**\n * an ethereum address represented as 40 hex digits\n * @pattern ^0x[a-fA-F0-9]{40}$\n */\nexport type ETH_ADDRESS = string;\n/**\n * A storage key. Represented as up to 62 hex digits, 3 bits, and 5 leading zeroes.\n * @pattern ^0x0[0-7]{1}[a-fA-F0-9]{0,62}$\n */\nexport type STORAGE_KEY = string;\nexport type ADDRESS = FELT;\nexport type NUM_AS_HEX = string;\nexport type SIGNATURE = Array<FELT>;\nexport type BLOCK_NUMBER = number;\nexport type BLOCK_HASH = FELT;\nexport type TXN_HASH = FELT;\nexport type CHAIN_ID = NUM_AS_HEX;\nexport type STRUCT_ABI_TYPE = 'struct';\nexport type EVENT_ABI_TYPE = 'event';\nexport type FUNCTION_ABI_TYPE = 'function' | 'l1_handler' | 'constructor';\n// Represents the type of an entry point.\nexport type ENTRY_POINT_TYPE = 'EXTERNAL' | 'L1_HANDLER' | 'CONSTRUCTOR';\n// Represents the type of a function call.\nexport type CALL_TYPE = 'DELEGATE' | 'LIBRARY_CALL' | 'CALL';\n// Represents the status of the transaction\nexport type TXN_STATUS = 'RECEIVED' | 'REJECTED' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1';\n// Flags that indicate how to simulate a given transaction. By default, the sequencer behavior is replicated locally (enough funds are expected to be in the account, and the fee will be deducted from the balance before the simulation of the next transaction). To skip the fee charge, use the SKIP_FEE_CHARGE flag.\nexport type SIMULATION_FLAG = 'SKIP_VALIDATE' | 'SKIP_FEE_CHARGE';\n// Data availability mode\nexport type DA_MODE = 'L1' | 'L2';\nexport type TXN_TYPE = 'DECLARE' | 'DEPLOY' | 'DEPLOY_ACCOUNT' | 'INVOKE' | 'L1_HANDLER';\nexport type TXN_FINALITY_STATUS = 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1';\nexport type TXN_EXECUTION_STATUS = 'SUCCEEDED' | 'REVERTED';\nexport type BLOCK_STATUS = 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\nexport type BLOCK_TAG = 'latest' | 'pending';\n\n/**\n * READ API\n */\n\nexport type EVENTS_CHUNK = {\n  // Returns matching events\n  events: EMITTED_EVENT[];\n  // Use this token in a subsequent query to obtain the next page. Should not appear if there are no more pages.\n  continuation_token?: string;\n};\n\nexport type RESULT_PAGE_REQUEST = {\n  // The token returned from the previous query. If no token is provided the first page is returned.\n  continuation_token?: string;\n  // Chunk size\n  chunk_size: number;\n};\n\nexport type EMITTED_EVENT = EVENT & {\n  block_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  transaction_hash: TXN_HASH;\n};\n\nexport type EVENT = {\n  from_address: ADDRESS;\n} & EVENT_CONTENT;\n\nexport type EVENT_CONTENT = {\n  keys: FELT[];\n  data: FELT[];\n};\n\nexport type EVENT_FILTER = {\n  from_block?: BLOCK_ID;\n  to_block?: BLOCK_ID;\n  address?: ADDRESS;\n  keys?: FELT[][];\n};\n\nexport type BLOCK_ID =\n  | {\n      block_hash?: BLOCK_HASH;\n      block_number?: BLOCK_NUMBER;\n    }\n  | BLOCK_TAG;\n\nexport type SYNC_STATUS = {\n  starting_block_hash: BLOCK_HASH;\n  starting_block_num: BLOCK_NUMBER;\n  current_block_hash: BLOCK_HASH;\n  current_block_num: BLOCK_NUMBER;\n  highest_block_hash: BLOCK_HASH;\n  highest_block_num: BLOCK_NUMBER;\n};\n\nexport type NEW_CLASSES = {\n  class_hash: FELT;\n  compiled_class_hash: FELT;\n};\n\nexport type REPLACED_CLASS = {\n  class_hash: FELT;\n  contract_address: FELT;\n};\n\nexport type NONCE_UPDATE = {\n  contract_address: ADDRESS;\n  nonce: FELT;\n};\n\nexport type STATE_DIFF = {\n  storage_diffs: CONTRACT_STORAGE_DIFF_ITEM[];\n  deprecated_declared_classes: FELT[];\n  declared_classes: NEW_CLASSES[];\n  deployed_contracts: DEPLOYED_CONTRACT_ITEM[];\n  replaced_classes: REPLACED_CLASS[];\n  nonces: NONCE_UPDATE[];\n};\n\nexport type PENDING_STATE_UPDATE = {\n  old_root: FELT;\n  state_diff: STATE_DIFF;\n};\n\nexport type STATE_UPDATE = {\n  block_hash: BLOCK_HASH;\n  old_root: FELT;\n  new_root: FELT;\n  state_diff: STATE_DIFF;\n};\n\nexport type BLOCK_BODY_WITH_TX_HASHES = {\n  transactions: TXN_HASH[];\n};\n\nexport type BLOCK_BODY_WITH_TXS = {\n  transactions: {\n    transaction: TXN;\n    transaction_hash: TXN_HASH;\n  }[];\n};\n\nexport type BLOCK_HEADER = {\n  block_hash: BLOCK_HASH;\n  parent_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  new_root: FELT;\n  timestamp: number;\n  sequencer_address: FELT;\n  l1_gas_price: RESOURCE_PRICE;\n  starknet_version: string;\n};\n\nexport type PENDING_BLOCK_HEADER = {\n  parent_hash: BLOCK_HASH;\n  timestamp: number;\n  sequencer_address: FELT;\n  l1_gas_price: RESOURCE_PRICE;\n  starknet_version: string;\n};\n\nexport type BLOCK_WITH_TX_HASHES = { status: BLOCK_STATUS } & BLOCK_HEADER &\n  BLOCK_BODY_WITH_TX_HASHES;\n\nexport type BLOCK_WITH_TXS = { status: BLOCK_STATUS } & BLOCK_HEADER & BLOCK_BODY_WITH_TXS;\n\nexport type PENDING_BLOCK_WITH_TX_HASHES = BLOCK_BODY_WITH_TX_HASHES & PENDING_BLOCK_HEADER;\n\nexport type PENDING_BLOCK_WITH_TXS = BLOCK_BODY_WITH_TXS & PENDING_BLOCK_HEADER;\n\nexport type DEPLOYED_CONTRACT_ITEM = {\n  address: FELT;\n  class_hash: FELT;\n};\n\nexport type CONTRACT_STORAGE_DIFF_ITEM = {\n  // The contract address for which the storage changed (in FELT format)\n  address: string;\n  // The changes in the storage of the contract\n  storage_entries: StorageDiffItem[];\n};\n\nexport type StorageDiffItem = {\n  // The key of the changed value (in FELT format)\n  key: string;\n  // The new value applied to the given address (in FELT format)\n  value: string;\n};\n\nexport type TXN = INVOKE_TXN | L1_HANDLER_TXN | DECLARE_TXN | DEPLOY_TXN | DEPLOY_ACCOUNT_TXN;\n\nexport type DECLARE_TXN = DECLARE_TXN_V0 | DECLARE_TXN_V1 | DECLARE_TXN_V2;\n\nexport type DECLARE_TXN_V0 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: '0x0';\n  signature: SIGNATURE;\n  class_hash: FELT;\n};\n\nexport type DECLARE_TXN_V1 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: '0x1';\n  signature: SIGNATURE;\n  nonce: FELT;\n  class_hash: FELT;\n};\n\nexport type DECLARE_TXN_V2 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  compiled_class_hash: FELT;\n  max_fee: FELT;\n  version: '0x2';\n  signature: SIGNATURE;\n  nonce: FELT;\n  class_hash: FELT;\n};\n\nexport type BROADCASTED_TXN =\n  | BROADCASTED_INVOKE_TXN\n  | BROADCASTED_DECLARE_TXN\n  | BROADCASTED_DEPLOY_ACCOUNT_TXN;\n\nexport type BROADCASTED_INVOKE_TXN = INVOKE_TXN_V0 | INVOKE_TXN_V1;\n\nexport type BROADCASTED_DEPLOY_ACCOUNT_TXN = DEPLOY_ACCOUNT_TXN;\n\nexport type BROADCASTED_DECLARE_TXN = BROADCASTED_DECLARE_TXN_V1 | BROADCASTED_DECLARE_TXN_V2;\n\nexport type BROADCASTED_DECLARE_TXN_V1 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_class: DEPRECATED_CONTRACT_CLASS;\n};\n\nexport type BROADCASTED_DECLARE_TXN_V2 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  compiled_class_hash: FELT;\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_class: CONTRACT_CLASS;\n};\n\nexport type DEPLOY_ACCOUNT_TXN = DEPLOY_ACCOUNT_TXN_V1;\n\nexport type DEPLOY_ACCOUNT_TXN_V1 = {\n  type: 'DEPLOY_ACCOUNT';\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_address_salt: FELT;\n  constructor_calldata: FELT[];\n  class_hash: FELT;\n};\n\nexport type DEPLOY_TXN = {\n  type: 'DEPLOY';\n  version: NUM_AS_HEX;\n  contract_address_salt: FELT;\n  constructor_calldata: FELT[];\n  class_hash: FELT;\n};\n\nexport type INVOKE_TXN = INVOKE_TXN_V0 | INVOKE_TXN_V1;\n\nexport type INVOKE_TXN_V0 = {\n  type: 'INVOKE';\n  max_fee: FELT;\n  version: '0x0';\n  signature: SIGNATURE;\n  contract_address: ADDRESS;\n  entry_point_selector: FELT;\n  calldata: FELT[];\n};\n\nexport type INVOKE_TXN_V1 = {\n  type: 'INVOKE';\n  sender_address: ADDRESS;\n  calldata: FELT[];\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n};\n\nexport type L1_HANDLER_TXN = {\n  version: NUM_AS_HEX;\n  type: 'L1_HANDLER';\n  nonce: NUM_AS_HEX;\n} & FUNCTION_CALL;\n\nexport type COMMON_RECEIPT_PROPERTIES = {\n  transaction_hash: TXN_HASH;\n  actual_fee: FELT;\n  execution_status: TXN_EXECUTION_STATUS;\n  finality_status: TXN_FINALITY_STATUS;\n  block_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  messages_sent: MSG_TO_L1[];\n  revert_reason: string;\n  events: EVENT[];\n  execution_resources: EXECUTION_RESOURCES;\n};\n\nexport type PENDING_COMMON_RECEIPT_PROPERTIES = {\n  transaction_hash: TXN_HASH;\n  actual_fee: FELT;\n  type: TXN_TYPE;\n  messages_sent: MSG_TO_L1[];\n  events: EVENT[];\n  revert_reason: string;\n  finality_status: 'ACCEPTED_ON_L2';\n  execution_status: TXN_EXECUTION_STATUS;\n  execution_resources: EXECUTION_RESOURCES;\n};\n\nexport type INVOKE_TXN_RECEIPT = {\n  type: 'INVOKE';\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_INVOKE_TXN_RECEIPT = {\n  type: 'INVOKE';\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DECLARE_TXN_RECEIPT = {\n  type: 'DECLARE';\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_DECLARE_TXN_RECEIPT = {\n  type: 'DECLARE';\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DEPLOY_ACCOUNT_TXN_RECEIPT = {\n  type: 'DEPLOY_ACCOUNT';\n  contract_address: FELT;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT = {\n  type: 'DEPLOY_ACCOUNT';\n  contract_address: FELT;\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DEPLOY_TXN_RECEIPT = {\n  type: 'DEPLOY';\n  contract_address: FELT;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type L1_HANDLER_TXN_RECEIPT = {\n  type: 'L1_HANDLER';\n  message_hash: NUM_AS_HEX;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_L1_HANDLER_TXN_RECEIPT = {\n  type: 'L1_HANDLER';\n  message_hash: NUM_AS_HEX;\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type TXN_RECEIPT =\n  | INVOKE_TXN_RECEIPT\n  | L1_HANDLER_TXN_RECEIPT\n  | DECLARE_TXN_RECEIPT\n  | DEPLOY_TXN_RECEIPT\n  | DEPLOY_ACCOUNT_TXN_RECEIPT;\n\nexport type PENDING_TXN_RECEIPT =\n  | PENDING_INVOKE_TXN_RECEIPT\n  | PENDING_L1_HANDLER_TXN_RECEIPT\n  | PENDING_DECLARE_TXN_RECEIPT\n  | PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT;\n\nexport type MSG_TO_L1 = {\n  from_address: FELT;\n  to_address: FELT;\n  payload: FELT[];\n};\n\nexport type MSG_FROM_L1 = {\n  from_address: ETH_ADDRESS;\n  to_address: ADDRESS;\n  entry_point_selector: FELT;\n  payload: FELT[];\n};\n\nexport type FUNCTION_CALL = {\n  contract_address: ADDRESS;\n  entry_point_selector: FELT;\n  calldata: FELT[];\n};\n\nexport type CONTRACT_CLASS = {\n  sierra_program: FELT[];\n  contract_class_version: string;\n  entry_points_by_type: {\n    CONSTRUCTOR: SIERRA_ENTRY_POINT[];\n    EXTERNAL: SIERRA_ENTRY_POINT[];\n    L1_HANDLER: SIERRA_ENTRY_POINT[];\n  };\n  abi: string;\n};\n\nexport type DEPRECATED_CONTRACT_CLASS = {\n  program: string;\n  entry_points_by_type: {\n    CONSTRUCTOR: DEPRECATED_CAIRO_ENTRY_POINT[];\n    EXTERNAL: DEPRECATED_CAIRO_ENTRY_POINT[];\n    L1_HANDLER: DEPRECATED_CAIRO_ENTRY_POINT[];\n  };\n  abi: CONTRACT_ABI;\n};\n\nexport type DEPRECATED_CAIRO_ENTRY_POINT = {\n  offset: NUM_AS_HEX | number;\n  selector: FELT;\n};\n\nexport type SIERRA_ENTRY_POINT = {\n  selector: FELT;\n  function_idx: number;\n};\n\nexport type CONTRACT_ABI = CONTRACT_ABI_ENTRY[];\n\nexport type CONTRACT_ABI_ENTRY = {\n  selector: FELT;\n  input: string;\n  output: string;\n};\n\nexport type STRUCT_ABI_ENTRY = {\n  type: STRUCT_ABI_TYPE;\n  name: string;\n  size: number;\n  members: STRUCT_MEMBER[];\n};\n\nexport type STRUCT_MEMBER = TYPED_PARAMETER & {\n  offset: number;\n};\n\nexport type EVENT_ABI_ENTRY = {\n  type: EVENT_ABI_TYPE;\n  name: string;\n  keys: TYPED_PARAMETER[];\n  data: TYPED_PARAMETER[];\n};\n\nexport type FUNCTION_STATE_MUTABILITY = 'view';\n\nexport type FUNCTION_ABI_ENTRY = {\n  type: FUNCTION_ABI_TYPE;\n  name: string;\n  inputs: TYPED_PARAMETER[];\n  outputs: TYPED_PARAMETER[];\n  stateMutability: FUNCTION_STATE_MUTABILITY;\n};\n\nexport type TYPED_PARAMETER = {\n  name: string;\n  type: string;\n};\n\nexport type FEE_ESTIMATE = {\n  gas_consumed: NUM_AS_HEX;\n  gas_price: NUM_AS_HEX;\n  overall_fee: NUM_AS_HEX;\n};\n\nexport type RESOURCE_LIMITS = {\n  max_amount: NUM_AS_HEX;\n  max_price_per_unit: NUM_AS_HEX;\n};\n\nexport type RESOURCE_PRICE = {\n  price_in_strk?: NUM_AS_HEX;\n  price_in_wei: NUM_AS_HEX;\n};\n\nexport type EXECUTION_RESOURCES = {\n  steps: NUM_AS_HEX;\n  memory_holes: NUM_AS_HEX;\n  range_check_builtin_applications: NUM_AS_HEX;\n  pedersen_builtin_applications: NUM_AS_HEX;\n  poseidon_builtin_applications: NUM_AS_HEX;\n  ec_op_builtin_applications: NUM_AS_HEX;\n  ecdsa_builtin_applications: NUM_AS_HEX;\n  bitwise_builtin_applications: NUM_AS_HEX;\n  keccak_builtin_applications: NUM_AS_HEX;\n};\n\n/**\n * TRACE API\n */\n\n// Represents a transaction trace including the execution details.\nexport type TRANSACTION_TRACE = {\n  invoke_tx_trace?: INVOKE_TXN_TRACE;\n  declare_tx_trace?: DECLARE_TXN_TRACE;\n  deploy_account_tx_trace?: DEPLOY_ACCOUNT_TXN_TRACE;\n  l1_handler_tx_trace?: L1_HANDLER_TXN_TRACE;\n};\n\n// Represents a transaction trace for an invoke transaction.\nexport type INVOKE_TXN_TRACE = {\n  type: 'INVOKE';\n  execute_invocation: FUNCTION_INVOCATION | { revert_reason: string };\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for a declare transaction.\nexport type DECLARE_TXN_TRACE = {\n  type: 'DECLARE';\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for a deploy account transaction.\nexport type DEPLOY_ACCOUNT_TXN_TRACE = {\n  type: 'DEPLOY_ACCOUNT';\n  constructor_invocation: FUNCTION_INVOCATION;\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for an L1 handler transaction.\nexport type L1_HANDLER_TXN_TRACE = {\n  type: 'L1_HANDLER';\n  function_invocation: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a nested function call.\nexport type NESTED_CALL = FUNCTION_INVOCATION;\n\n// Represents a function invocation along with its execution details.\nexport type FUNCTION_INVOCATION = {\n  function_call: FUNCTION_CALL;\n  caller_address: string;\n  class_hash: string;\n  entry_point_type: ENTRY_POINT_TYPE;\n  call_type: CALL_TYPE;\n  result: string[];\n  calls: NESTED_CALL[];\n  events: ORDERED_EVENT[];\n  messages: ORDERED_MESSAGE[];\n};\n\n// Represents an ordered event alongside its order within the transaction.\nexport type ORDERED_EVENT = {\n  order: number;\n  event: EVENT;\n};\n\n// Represents an ordered message alongside its order within the transaction.\nexport type ORDERED_MESSAGE = {\n  order: number;\n  message: MSG_TO_L1;\n};\n","/**\n * Types that are not in spec but required for UX\n */\nimport {\n  ADDRESS,\n  BLOCK_HASH,\n  BLOCK_NUMBER,\n  BLOCK_WITH_TXS,\n  BLOCK_WITH_TX_HASHES,\n  BROADCASTED_TXN,\n  CHAIN_ID,\n  CONTRACT_CLASS,\n  CONTRACT_STORAGE_DIFF_ITEM,\n  DEPRECATED_CONTRACT_CLASS,\n  EVENTS_CHUNK,\n  EVENT_FILTER,\n  FEE_ESTIMATE,\n  FELT,\n  MSG_FROM_L1,\n  NONCE_UPDATE,\n  PENDING_BLOCK_WITH_TXS,\n  PENDING_BLOCK_WITH_TX_HASHES,\n  PENDING_STATE_UPDATE,\n  PENDING_TXN_RECEIPT,\n  REPLACED_CLASS,\n  RESULT_PAGE_REQUEST,\n  SIMULATION_FLAG,\n  STATE_UPDATE,\n  SYNC_STATUS,\n  TRANSACTION_TRACE,\n  TXN,\n  TXN_EXECUTION_STATUS,\n  TXN_HASH,\n  TXN_RECEIPT,\n  TXN_STATUS,\n} from './components';\n\n// METHOD RESPONSES\n// response starknet_getClass\nexport type ContractClass = CONTRACT_CLASS | DEPRECATED_CONTRACT_CLASS;\n// response starknet_simulateTransactions\nexport type SimulateTransactionResponse = {\n  transaction_trace: TRANSACTION_TRACE;\n  fee_estimation: FEE_ESTIMATE;\n}[];\n// response starknet_estimateFee\nexport type FeeEstimate = FEE_ESTIMATE;\n// response starknet_getTransactionByHash, starknet_getTransactionByBlockIdAndIndex\nexport type TransactionWithHash = TXN & { transaction_hash: TXN_HASH };\n// response starknet_blockHashAndNumber\nexport type BlockHashAndNumber = { block_hash: BLOCK_HASH; block_number: BLOCK_NUMBER };\n// response starknet_getBlockWithTxs\nexport type BlockWithTxs = BLOCK_WITH_TXS | PENDING_BLOCK_WITH_TXS;\n// response starknet_getBlockWithTxHashes\nexport type BlockWithTxHashes = BLOCK_WITH_TX_HASHES | PENDING_BLOCK_WITH_TX_HASHES;\n// response starknet_getStateUpdate\nexport type StateUpdate = STATE_UPDATE | PENDING_STATE_UPDATE;\n// response starknet_traceBlockTransactions\nexport type BlockTransactionsTraces = { transaction_hash: FELT; trace_root: TRANSACTION_TRACE }[];\n// response starknet_syncing\nexport type Syncing = false | SYNC_STATUS;\n// response starknet_getEvents\nexport type Events = EVENTS_CHUNK;\n// response starknet_addInvokeTransaction\nexport type InvokedTransaction = { transaction_hash: TXN_HASH };\n// response starknet_addDeclareTransaction\nexport type DeclaredTransaction = { transaction_hash: TXN_HASH; class_hash: FELT };\n// response starknet_addDeployAccountTransaction\nexport type DeployedAccountTransaction = { transaction_hash: TXN_HASH; contract_address: FELT };\n\n// Nice Components names\nexport type ContractAddress = ADDRESS;\nexport type Felt = FELT;\nexport type Nonce = FELT;\nexport type TransactionHash = TXN_HASH;\nexport type TransactionTrace = TRANSACTION_TRACE;\nexport type BlockHash = BLOCK_HASH;\nexport type TransactionReceipt = TXN_RECEIPT | PENDING_TXN_RECEIPT;\nexport type EventFilter = EVENT_FILTER & RESULT_PAGE_REQUEST;\nexport type SimulationFlags = Array<SIMULATION_FLAG>;\nexport type L1Message = MSG_FROM_L1;\nexport type BaseTransaction = BROADCASTED_TXN;\nexport type ChainId = CHAIN_ID;\nexport type Transaction = TXN;\nexport type TransactionStatus = {\n  finality_status: TXN_STATUS;\n  execution_status?: TXN_EXECUTION_STATUS;\n};\n\n// Diff Than Seq\nexport type StorageDiffs = Array<CONTRACT_STORAGE_DIFF_ITEM>;\nexport type DeprecatedDeclaredClasses = Array<FELT>;\nexport type NonceUpdates = NONCE_UPDATE[];\nexport type ReplacedClasses = REPLACED_CLASS[];\n\n// Enums Derived From Spec Types (require manual check for changes)\nexport enum ETransactionType {\n  DECLARE = 'DECLARE',\n  DEPLOY = 'DEPLOY',\n  DEPLOY_ACCOUNT = 'DEPLOY_ACCOUNT',\n  INVOKE = 'INVOKE',\n  L1_HANDLER = 'L1_HANDLER',\n}\n\nexport enum ESimulationFlag {\n  SKIP_VALIDATE = 'SKIP_VALIDATE',\n  SKIP_FEE_CHARGE = 'SKIP_FEE_CHARGE',\n}\n\nexport enum ETransactionStatus {\n  RECEIVED = 'RECEIVED',\n  REJECTED = 'REJECTED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\n\nexport enum ETransactionFinalityStatus {\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\nexport enum ETransactionExecutionStatus {\n  SUCCEEDED = 'SUCCEEDED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum EBlockTag {\n  LATEST = 'latest',\n  PENDING = 'pending',\n}\n\nexport enum EDataAvailabilityMode {\n  L1 = 'L1',\n  L2 = 'L2',\n}\n","import {\n  Abi,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  BlockNumber,\n  BlockStatus,\n  ByteCode,\n  CairoAssembly,\n  CompiledContract,\n  ContractClass,\n  EntryPointType,\n  RawCalldata,\n  TransactionExecutionStatus,\n  TransactionFinalityStatus,\n  TransactionStatus,\n  TransactionType,\n} from '../lib';\n\n// #region | originally not included in the namespace\nexport type GetTransactionStatusResponse = {\n  tx_status: TransactionStatus;\n  execution_status: TransactionExecutionStatus;\n  finality_status: TransactionFinalityStatus;\n  block_hash?: string;\n  tx_failure_reason?: {\n    code: string;\n    error_message: string;\n  };\n  tx_revert_reason?: string;\n};\n\nexport type GetContractAddressesResponse = {\n  Starknet: string;\n  GpsStatementVerifier: string;\n};\n\nexport type FunctionInvocation = {\n  caller_address: string;\n  contract_address: string;\n  calldata: RawCalldata;\n  call_type?: string;\n  class_hash?: string;\n  selector?: string;\n  entry_point_type?: EntryPointType.EXTERNAL; // TODO: check this\n  result: Array<any>;\n  execution_resources: ExecutionResources;\n  internal_calls: Array<FunctionInvocation>;\n  events: Array<any>;\n  messages: Array<any>;\n};\n\nexport type ExecutionResources = {\n  n_steps: number;\n  builtin_instance_counter: {\n    pedersen_builtin: number;\n    range_check_builtin: number;\n    bitwise_builtin: number;\n    output_builtin: number;\n    ecdsa_builtin: number;\n    ec_op_builtin?: number;\n  };\n  n_memory_holes: number;\n};\n\nexport type CallL1Handler = {\n  from_address: string;\n  to_address: string;\n  entry_point_selector: string;\n  payload: Array<string>;\n};\n\nexport type DeployedContractItem = {\n  address: string;\n  class_hash: string;\n};\n\nexport type SequencerIdentifier = { blockHash: string } | { blockNumber: BlockNumber };\n// #endregion\n\nexport type TransactionTraceResponse = {\n  validate_invocation?: FunctionInvocation;\n  function_invocation?: FunctionInvocation;\n  fee_transfer_invocation?: FunctionInvocation;\n  constructor_invocation?: FunctionInvocation;\n  signature: string[];\n};\n\nexport type DeclareTransaction = {\n  type: TransactionType.DECLARE;\n  sender_address: string;\n  contract_class: ContractClass;\n  signature?: string[];\n  nonce: BigNumberish;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  compiled_class_hash?: string; // v2 declare\n};\n\nexport type DeployTransaction = {\n  type: TransactionType.DEPLOY;\n  contract_definition: ContractClass;\n  contract_address_salt: BigNumberish;\n  constructor_calldata: string[];\n  nonce?: BigNumberish;\n};\n\nexport type DeployAccountTransaction = {\n  type: TransactionType.DEPLOY_ACCOUNT;\n  class_hash: string;\n  contract_address_salt: BigNumberish;\n  constructor_calldata: string[];\n  signature?: string[];\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  nonce?: BigNumberish;\n};\n\nexport type InvokeFunctionTransaction = {\n  type: TransactionType.INVOKE;\n  sender_address: string;\n  signature?: string[];\n  entry_point_type?: EntryPointType.EXTERNAL; // TODO: check this\n  calldata?: RawCalldata;\n  nonce: BigNumberish;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n};\n\nexport type Transaction =\n  | DeclareTransaction\n  | DeployTransaction\n  | InvokeFunctionTransaction\n  | DeployAccountTransaction;\n\nexport type AddTransactionResponse = {\n  transaction_hash: string;\n  code?: 'TRANSACTION_RECEIVED';\n  address?: string;\n  class_hash?: string;\n};\n\nexport type GetCodeResponse = {\n  bytecode: ByteCode;\n  abi: Abi;\n};\n\nexport interface InvokeFunctionTransactionResponse extends InvokeFunctionTransaction {\n  transaction_hash: string;\n  entry_point_selector: string;\n}\n\nexport type TransactionResponse =\n  | DeclareTransaction\n  | DeployTransaction\n  | InvokeFunctionTransactionResponse;\n\nexport type SuccessfulTransactionResponse = {\n  execution_status: TransactionExecutionStatus.SUCCEEDED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_index: number;\n  transaction: TransactionResponse;\n};\n\nexport type RevertedTransactionResponse = {\n  execution_status: TransactionExecutionStatus.REVERTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_index: number;\n  transaction: TransactionResponse;\n  revert_error: string;\n};\n\nexport type FailedTransactionResponse = {\n  status: TransactionStatus.REJECTED;\n  transaction_failure_reason: {\n    code: string;\n    error_message: string;\n  };\n  transaction: TransactionResponse;\n};\n\nexport type GetTransactionResponse =\n  | SuccessfulTransactionResponse\n  | RevertedTransactionResponse\n  | FailedTransactionResponse;\n\nexport type TransactionReceiptResponse =\n  | SuccessfulTransactionReceiptResponse\n  | RevertedTransactionReceiptResponse\n  | RejectedTransactionReceiptResponse;\n\nexport type SuccessfulTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.SUCCEEDED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  actual_fee: string;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_hash: string;\n  transaction_index: number;\n  l2_to_l1_messages: string[];\n  events: string[];\n  execution_resources?: ExecutionResources; // INVOKE ONLY\n};\n\nexport type RevertedTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.REVERTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus.REVERTED;\n  actual_fee: string;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_hash: string;\n  transaction_index: number;\n  l2_to_l1_messages: string[];\n  events: string[];\n  revert_error: string;\n};\n\nexport type RejectedTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.REJECTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus.REJECTED;\n  transaction_hash: string;\n  l2_to_l1_messages: string[];\n  events: string[];\n  transaction_failure_reason: {\n    code: string;\n    error_message: string;\n  };\n};\n\nexport type GetBlockResponse = {\n  block_number: number;\n  state_root: string;\n  block_hash: string;\n  transactions: {\n    [txHash: string]: TransactionResponse;\n  };\n  timestamp: number;\n  transaction_receipts: {\n    [txHash: string]: {\n      block_hash: string;\n      transaction_hash: string;\n      l2_to_l1_messages: {\n        to_address: string;\n        payload: string[];\n        from_address: string;\n      }[];\n      block_number: BlockNumber;\n      status: TransactionStatus;\n      transaction_index: number;\n    };\n  };\n  parent_block_hash: string;\n  status: BlockStatus;\n  gas_price: string;\n  sequencer_address: string;\n  starknet_version: string;\n};\n\nexport type CallContractTransaction = {\n  calldata?: RawCalldata;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  entry_point_selector: string;\n} & (\n  | {\n      sender_address: string;\n      signature: string[];\n    }\n  | {\n      contract_address: string;\n      signature?: never;\n    }\n);\n\nexport type CallContractResponse = {\n  result: string[];\n};\n\nexport type InvokeEstimateFee = Omit<InvokeFunctionTransaction, 'max_fee' | 'entry_point_type'>;\nexport type DeclareEstimateFee = Omit<DeclareTransaction, 'max_fee'>;\nexport type DeployAccountEstimateFee = Omit<DeployAccountTransaction, 'max_fee'>;\nexport type DeployEstimateFee = DeployTransaction;\n\nexport type SimulateTransactionResponse = {\n  trace: TransactionTraceResponse; // diff with OPENRPC \"transaction_trace\"\n  fee_estimation: EstimateFeeResponse;\n};\n\nexport type AccountTransactionItem =\n  | InvokeEstimateFee\n  | DeclareEstimateFee\n  | DeployEstimateFee\n  | DeployAccountEstimateFee;\n\n/**\n * Transaction filled with account data\n */\nexport type AccountTransaction = AllowArray<AccountTransactionItem>;\n\n// Support 0.9.1 changes in a backward-compatible way\nexport type EstimateFeeResponse =\n  | {\n      overall_fee: number;\n      gas_price: number;\n      gas_usage: number;\n      uint: string;\n    }\n  | {\n      amount: bigint;\n      unit: string;\n    };\n\nexport type EstimateFeeResponseBulk = AllowArray<EstimateFeeResponse>;\n\nexport type BlockTransactionTracesResponse = {\n  traces: Array<TransactionTraceResponse & { transaction_hash: string }>;\n};\n\nexport type Storage = string;\n\nexport type StateUpdateResponse = {\n  block_hash: string;\n  new_root: string;\n  old_root: string;\n  state_diff: {\n    storage_diffs: StorageDiffs;\n    nonces: Nonces;\n    deployed_contracts: Array<DeployedContractItem>;\n    old_declared_contracts: OldDeclaredContracts;\n    declared_classes: DeclaredClasses;\n    replaced_classes: ReplacedClasses; // no definition is it array of string\n  };\n};\n\nexport type StorageDiffs = { [address: string]: Array<StateDiffItem> };\n\nexport type StateDiffItem = { key: string; value: string };\n\nexport type Nonces = { [address: string]: Nonce };\n\nexport type Nonce = string;\n\nexport type DeployedContracts = DeployedContractItem[];\n\nexport type OldDeclaredContracts = string[];\n\nexport type DeclaredClasses = DeclaredClass[];\n\nexport type DeclaredClass = { class_hash: string; compiled_class_hash: string };\n\nexport type ReplacedClasses = string[]; // no definition is it array of string ?\n\nexport type Endpoints = {\n  get_contract_addresses: {\n    QUERY: never;\n    REQUEST: never;\n    RESPONSE: GetContractAddressesResponse;\n  };\n  add_transaction: {\n    QUERY: never;\n    REQUEST: Transaction;\n    RESPONSE: AddTransactionResponse;\n  };\n  get_transaction: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: GetTransactionResponse;\n  };\n  get_transaction_status: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: GetTransactionStatusResponse;\n  };\n  get_transaction_trace: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: TransactionTraceResponse;\n  };\n  get_transaction_receipt: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: TransactionReceiptResponse;\n  };\n  get_nonce: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: Nonce;\n  };\n  get_storage_at: {\n    QUERY: {\n      contractAddress: string;\n      key: BigNumberish;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: Storage;\n  };\n  get_code: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: GetCodeResponse;\n  };\n  get_block: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: GetBlockResponse;\n  };\n  call_contract: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: CallContractTransaction;\n    RESPONSE: CallContractResponse;\n  };\n  estimate_fee: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransactionItem;\n    RESPONSE: EstimateFeeResponse;\n  };\n  get_class_by_hash: {\n    QUERY: {\n      classHash: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: CompiledContract;\n  };\n  get_class_hash_at: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: string;\n  };\n  get_state_update: {\n    QUERY: {\n      blockHash?: string;\n      blockNumber?: BlockNumber;\n    };\n    REQUEST: never;\n    RESPONSE: StateUpdateResponse;\n  };\n  get_full_contract: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: CompiledContract;\n  };\n  estimate_message_fee: {\n    QUERY: any;\n    REQUEST: any;\n    RESPONSE: EstimateFeeResponse;\n  };\n  simulate_transaction: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransaction;\n    RESPONSE: SimulateTransactionResponse;\n  };\n  estimate_fee_bulk: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransaction;\n    RESPONSE: EstimateFeeResponseBulk;\n  };\n  get_block_traces: {\n    QUERY: {\n      blockHash?: string;\n      blockNumber?: BlockNumber;\n    };\n    REQUEST: never;\n    RESPONSE: BlockTransactionTracesResponse;\n  };\n  get_compiled_class_by_class_hash: {\n    QUERY: {\n      classHash: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: any;\n    RESPONSE: CairoAssembly;\n  };\n};\n","export default function assert(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failure');\n  }\n}\n","import { hexToBytes as hexToBytesNoble } from '@noble/curves/abstract/utils';\n\nimport { BigNumberish } from '../types';\nimport assert from './assert';\nimport { addHexPrefix, removeHexPrefix } from './encode';\n\n/** @deprecated prefer importing from 'types' over 'num' */\nexport type { BigNumberish };\n\n/**\n * Test if string is hex-string\n * @param hex hex-string\n */\nexport function isHex(hex: string): boolean {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\n\n/**\n * Convert BigNumberish to bigint\n */\nexport function toBigInt(value: BigNumberish): bigint {\n  return BigInt(value);\n}\n\n/**\n * Test if value is bigint\n */\nexport function isBigInt(value: any): value is bigint {\n  return typeof value === 'bigint';\n}\n\n/**\n * Convert BigNumberish to hex-string\n * @returns format: hex-string\n */\nexport function toHex(number: BigNumberish): string {\n  return addHexPrefix(toBigInt(number).toString(16));\n}\n\n/**\n * Alias of ToHex\n */\nexport const toHexString = toHex;\n\n/**\n * Convert BigNumberish to storage-key-string\n *\n * Same as toHex but conforming to the STORAGE_KEY pattern `^0x0[0-7]{1}[a-fA-F0-9]{0,62}$`.\n *\n * A storage key is represented as up to 62 hex digits, 3 bits, and 5 leading zeroes:\n * `0x0 + [0-7] + 62 hex = 0x + 64 hex`\n * @returns format: storage-key-string\n */\nexport function toStorageKey(number: BigNumberish): string {\n  const res = addHexPrefix(toBigInt(number).toString(16).padStart(64, '0'));\n  return res;\n}\n\n/**\n * Convert hexadecimal string to decimal string\n * @param hex hex-string\n * @returns format: decimal string\n */\nexport function hexToDecimalString(hex: string): string {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\n\n/**\n * Remove hex string leading zero and lowercase it\n * @example '0x01A...' -> '0x1a..'\n * @param hex hex-string\n * @returns format: hex-string\n */\nexport const cleanHex = (hex: string) => hex.toLowerCase().replace(/^(0x)0+/, '$1');\n\n/**\n * Asserts input is equal to or greater then lowerBound and lower then upperBound.\n *\n * The `inputName` parameter is used in the assertion message.\n */\nexport function assertInRange(\n  input: BigNumberish,\n  lowerBound: BigNumberish,\n  upperBound: BigNumberish,\n  inputName = ''\n) {\n  const messageSuffix = inputName === '' ? 'invalid length' : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n\n  assert(\n    inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,\n    `Message not signable, ${messageSuffix}.`\n  );\n}\n\n/**\n * Convert BigNumberish array to decimal string array\n * @returns format: decimal string array\n */\nexport function bigNumberishArrayToDecimalStringArray(rawCalldata: BigNumberish[]): string[] {\n  return rawCalldata.map((x) => toBigInt(x).toString(10));\n}\n\n/**\n * Convert BigNumberish array to hexadecimal string array\n * @returns format: hex-string array\n */\nexport function bigNumberishArrayToHexadecimalStringArray(rawCalldata: BigNumberish[]): string[] {\n  return rawCalldata.map((x) => toHex(x));\n}\n\n/**\n * Test if string is whole number (0, 1, 2, 3...)\n */\nexport const isStringWholeNumber = (value: string) => /^\\d+$/.test(value);\n\n/**\n * Convert string to decimal string\n * @returns format: decimal string\n */\nexport function getDecimalString(value: string) {\n  if (isHex(value)) {\n    return hexToDecimalString(value);\n  }\n  if (isStringWholeNumber(value)) {\n    return value;\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\n\n/**\n * Convert string to hexadecimal string\n * @returns format: hex-string\n */\nexport function getHexString(value: string) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\n\n/**\n * Convert string array to hex-string array\n * @returns format: hex-string array\n */\nexport function getHexStringArray(value: Array<string>) {\n  return value.map((el) => getHexString(el));\n}\n\n/**\n * Convert boolean to \"0\" or \"1\"\n */\nexport const toCairoBool = (value: boolean): string => (+value).toString();\n\n/**\n * Convert hex-string to an array of Bytes (Uint8Array)\n * @param value hex-string\n */\nexport function hexToBytes(value: string): Uint8Array {\n  if (!isHex(value)) throw new Error(`${value} need to be a hex-string`);\n\n  let adaptedValue: string = removeHexPrefix(value);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return hexToBytesNoble(adaptedValue);\n}\n","import { keccak } from '@scure/starknet';\n\nimport { MASK_250 } from '../constants';\nimport { BigNumberish } from '../types';\nimport { addHexPrefix, removeHexPrefix, utf8ToArray } from './encode';\nimport { hexToBytes, isHex, isStringWholeNumber, toHex, toHexString } from './num';\n\n/**\n * Calculate hex-string keccak hash for a given BigNumberish\n *\n * BigNumberish -> hex-string keccak hash\n * @returns format: hex-string\n */\nexport function keccakBn(value: BigNumberish): string {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix(keccak(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\n\n/**\n * Calculate hex-string keccak hash for a given string\n *\n * String -> hex-string keccak hash\n * @returns format: hex-string\n */\nfunction keccakHex(str: string): string {\n  return addHexPrefix(keccak(utf8ToArray(str)).toString(16));\n}\n\n/**\n * Calculate bigint keccak hash for a given string\n *\n * String -> bigint keccak hash\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param str the value you want to get the keccak hash from\n * @returns starknet keccak hash as BigInt\n */\nexport function starknetKeccak(str: string): bigint {\n  const hash = BigInt(keccakHex(str));\n  // eslint-disable-next-line no-bitwise\n  return hash & MASK_250;\n}\n\n/**\n * Calculate hex-string selector for a given abi-function-name\n *\n * Abi-function-name -> hex-string selector\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName ascii-string of 'abi function name'\n * @returns format: hex-string; selector for 'abi function name'\n */\nexport function getSelectorFromName(funcName: string) {\n  // sometimes BigInteger pads the hex string with zeros, which is not allowed in the starknet api\n  return toHex(starknetKeccak(funcName));\n}\n\n/**\n * Calculate hex-string selector from abi-function-name, decimal string or hex string\n *\n * ('abi-function-name' or dec-string or hex-string) -> hex-string selector\n *\n * @param value hex-string | dec-string | ascii-string\n * @returns format: hex-string\n */\nexport function getSelector(value: string) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n","import { TEXT_TO_FELT_MAX_LEN } from '../constants';\nimport { addHexPrefix, removeHexPrefix } from './encode';\nimport { isHex, isStringWholeNumber } from './num';\n\n/**\n * Test if string contains only ASCII characters (string can be ascii text)\n */\nexport function isASCII(str: string) {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\n/**\n * Test if string is a Cairo short string (string has less or equal 31 characters)\n */\nexport function isShortString(str: string) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\n\n/**\n * Test if string contains only numbers (string can be converted to decimal number)\n */\nexport function isDecimalString(str: string): boolean {\n  return /^[0-9]*$/i.test(str);\n}\n\n/**\n * Test if value is a free-from string text, and not a hex string or number string\n */\nexport function isText(val: any) {\n  return typeof val === 'string' && !isHex(val) && !isStringWholeNumber(val);\n}\n\n/**\n * Test if value is short text\n */\nexport const isShortText = (val: any) => isText(val) && isShortString(val);\n\n/**\n * Test if value is long text\n */\nexport const isLongText = (val: any) => isText(val) && !isShortString(val);\n\n/**\n * Split long text into short strings\n */\nexport function splitLongString(longStr: string): string[] {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, 'g');\n  return longStr.match(regex) || [];\n}\n\n/**\n * Convert an ASCII string to a hexadecimal string.\n * @param str short string (ASCII string, 31 characters max)\n * @returns format: hex-string; 248 bits max\n * @example\n * ```typescript\n * const myEncodedString: string = encodeShortString(\"uri/pict/t38.jpg\");\n * // return hex string (ex.\"0x7572692f706963742f7433382e6a7067\")\n * ```\n */\nexport function encodeShortString(str: string): string {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str)) throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));\n}\n\n/**\n * Convert a hexadecimal or decimal string to an ASCII string.\n * @param str representing a 248 bit max number (ex. \"0x1A4F64EA56\" or \"236942575435676423\")\n * @returns format: short string; 31 characters max\n * @example\n * ```typescript\n * const myDecodedString: string = decodeShortString(\"0x7572692f706963742f7433382e6a7067\");\n * // return string (ex.\"uri/pict/t38.jpg\")\n * ```\n */\nexport function decodeShortString(str: string): string {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString('0X'.concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n","import {\n  Abi,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  ContractVersion,\n  Litteral,\n  Uint,\n  Uint256,\n} from '../../types';\nimport { isBigInt, isHex, isStringWholeNumber } from '../num';\nimport { encodeShortString, isShortString, isText } from '../shortString';\nimport { UINT_128_MAX, isUint256 } from '../uint256';\n\n// Intended for internal usage, maybe should be exported somewhere else and not exported to utils\nexport const isLen = (name: string) => /_len$/.test(name);\nexport const isTypeFelt = (type: string) => type === 'felt' || type === 'core::felt252';\nexport const isTypeArray = (type: string) =>\n  /\\*/.test(type) ||\n  type.startsWith('core::array::Array::') ||\n  type.startsWith('core::array::Span::');\nexport const isTypeTuple = (type: string) => /^\\(.*\\)$/i.test(type);\nexport const isTypeNamedTuple = (type: string) => /\\(.*\\)/i.test(type) && type.includes(':');\nexport const isTypeStruct = (type: string, structs: AbiStructs) => type in structs;\nexport const isTypeEnum = (type: string, enums: AbiEnums) => type in enums;\nexport const isTypeOption = (type: string) => type.startsWith('core::option::Option::');\nexport const isTypeResult = (type: string) => type.startsWith('core::result::Result::');\nexport const isTypeUint = (type: string) => Object.values(Uint).includes(type as Uint);\nexport const isTypeLitteral = (type: string) => Object.values(Litteral).includes(type as Litteral);\nexport const isTypeUint256 = (type: string) => type === 'core::integer::u256';\nexport const isTypeBool = (type: string) => type === 'core::bool';\nexport const isTypeContractAddress = (type: string) =>\n  type === 'core::starknet::contract_address::ContractAddress';\nexport const isTypeEthAddress = (type: string) =>\n  type === 'core::starknet::eth_address::EthAddress';\nexport const isCairo1Type = (type: string) => type.includes('::');\nexport const getArrayType = (type: string) => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf('<') + 1, type.lastIndexOf('>'));\n  }\n  return type.replace('*', '');\n};\n\n/**\n * Test if an ABI comes from a Cairo 1 contract\n * @param abi representing the interface of a Cairo contract\n * @returns TRUE if it is an ABI from a Cairo1 contract\n * @example\n * ```typescript\n * const isCairo1: boolean = isCairo1Abi(myAbi: Abi);\n * ```\n */\nexport function isCairo1Abi(abi: Abi): boolean {\n  const { cairo } = getAbiContractVersion(abi);\n  if (cairo === undefined) {\n    throw Error('Unable to determine Cairo version');\n  }\n  return cairo === '1';\n}\n\n/**\n * Return ContractVersion (Abi version) based on Abi\n * or undefined for unknown version\n * @param abi\n * @returns string\n */\nexport function getAbiContractVersion(abi: Abi): ContractVersion {\n  // determine by interface for \"Cairo 1.2\"\n  if (abi.find((it) => it.type === 'interface')) {\n    return { cairo: '1', compiler: '2' };\n  }\n\n  // determine by function io types \"Cairo 1.1\" or \"Cairo 0.0\"\n  // find first function with inputs or outputs\n  const testFunction = abi.find(\n    (it) => it.type === 'function' && (it.inputs.length || it.outputs.length)\n  );\n  if (!testFunction) {\n    return { cairo: undefined, compiler: undefined };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return { cairo: '1', compiler: '1' };\n  }\n  return { cairo: '0', compiler: '0' };\n}\n\n/**\n * named tuple cairo type is described as js object {}\n * struct cairo type are described as js object {}\n * array cairo type are described as js array []\n */\n\n/**\n * Create Uint256 Cairo type (helper for common struct type)\n * @example\n * ```typescript\n * uint256('892349863487563453485768723498');\n * ```\n */\nexport const uint256 = (it: BigNumberish): Uint256 => {\n  const bn = BigInt(it);\n  if (!isUint256(bn)) throw new Error('Number is too large');\n  return {\n    // eslint-disable-next-line no-bitwise\n    low: (bn & UINT_128_MAX).toString(10),\n    // eslint-disable-next-line no-bitwise\n    high: (bn >> 128n).toString(10),\n  };\n};\n\n/**\n * Create unnamed tuple Cairo type (helper same as common struct type)\n * @example\n * ```typescript\n * tuple(1, '0x101', 16);\n * ```\n */\nexport const tuple = (\n  ...args: (BigNumberish | object | boolean)[]\n): Record<number, BigNumberish | object | boolean> => ({ ...args });\n\n/**\n * Create felt Cairo type (cairo type helper)\n * @returns format: felt-string\n */\nexport function felt(it: BigNumberish): string {\n  // BN or number\n  if (isBigInt(it) || (typeof it === 'number' && Number.isInteger(it))) {\n    return it.toString();\n  }\n  // string text\n  if (isText(it)) {\n    if (!isShortString(it as string))\n      throw new Error(\n        `${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`\n      );\n    const encoded = encodeShortString(it as string);\n    return BigInt(encoded).toString();\n  }\n  // hex string\n  if (typeof it === 'string' && isHex(it)) {\n    // toBN().toString\n    return BigInt(it).toString();\n  }\n  // string number (already converted), or unhandled type\n  if (typeof it === 'string' && isStringWholeNumber(it)) {\n    return it;\n  }\n  // bool to felt\n  if (typeof it === 'boolean') {\n    return `${+it}`;\n  }\n\n  throw new Error(`${it} can't be computed by felt()`);\n}\n","/* eslint-disable no-bitwise */\nimport { BigNumberish, Uint256 } from '../types';\nimport { addHexPrefix } from './encode';\nimport { toBigInt } from './num';\n\n/** @deprecated prefer importing from 'types' over 'uint256' */\nexport type { Uint256 };\n\nexport const UINT_128_MAX = (1n << 128n) - 1n;\nexport const UINT_256_MAX = (1n << 256n) - 1n;\n\n/**\n * Convert Uint256 to bigint\n */\nexport function uint256ToBN(uint256: Uint256) {\n  return (toBigInt(uint256.high) << 128n) + toBigInt(uint256.low);\n}\n\n/**\n * Test BigNumberish is smaller or equal 2**256-1\n */\nexport function isUint256(bn: BigNumberish): boolean {\n  return toBigInt(bn) <= UINT_256_MAX;\n}\n\n/**\n * Convert BigNumberish (string | number | bigint) to Uint256 (hex)\n */\nexport function bnToUint256(bn: BigNumberish): Uint256 {\n  const bi = toBigInt(bn);\n  if (!isUint256(bi)) throw new Error('Number is too large');\n  return {\n    low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n    high: addHexPrefix((bi >> 128n).toString(16)),\n  };\n}\n","export type CairoEnumRaw = {\n  [key: string]: any;\n};\n\n/**\n * Class to handle Cairo custom Enum\n * @param enumContent object containing the variants and its content. Example :\n *  {Success: 234, Warning: undefined, Error: undefined}.\n *  Only one variant with a value, object, array.\n * @returns an instance representing a Cairo custom Enum.\n * @example ```typescript\n * const myCairoEnum = new CairoCustomEnum( {Success: undefined, Warning: \"0x7f32ea\", Error: undefined})\n * ```\n */\nexport class CairoCustomEnum {\n  /**\n   * direct readonly access to variants of the Cairo Custom Enum.\n   * @returns a value of type any\n   * @example ```typescript\n   * const successValue = myCairoEnum.variant.Success;\n   */\n  readonly variant: CairoEnumRaw;\n\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent: CairoEnumRaw) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error('This Enum must have a least 1 variant');\n    }\n    const nbActiveVariants = variantsList.filter(\n      (content) => typeof content !== 'undefined'\n    ).length;\n    if (nbActiveVariants !== 1) {\n      throw new Error('This Enum must have exactly one active variant');\n    }\n    this.variant = enumContent;\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  public unwrap(): any {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== 'undefined');\n    if (typeof activeVariant === 'undefined') {\n      return undefined;\n    }\n    return activeVariant[1];\n  }\n\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  public activeVariant(): string {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== 'undefined');\n    if (typeof activeVariant === 'undefined') {\n      return '';\n    }\n    return activeVariant[0];\n  }\n}\n","export enum CairoOptionVariant {\n  Some = 0,\n  None = 1,\n}\n\n/**\n * Class to handle Cairo Option\n * @param variant CairoOptionVariant.Some or CairoOptionVariant.None\n * @param someContent value of type T.\n * @returns an instance representing a Cairo Option.\n * @example ```typescript\n * const myOption = new CairoOption<BigNumberish>(CairoOptionVariant.Some, \"0x54dda8\");\n * ```\n */\nexport class CairoOption<T> {\n  readonly Some?: T;\n\n  readonly None?: boolean;\n\n  constructor(variant: CairoOptionVariant, someContent?: T) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error('Wrong variant : should be CairoOptionVariant.Some or .None.');\n    }\n    if (variant === CairoOptionVariant.Some) {\n      if (typeof someContent === 'undefined') {\n        throw new Error(\n          'The creation of a Cairo Option with \"Some\" variant needs a content as input.'\n        );\n      }\n      this.Some = someContent;\n      this.None = undefined;\n    } else {\n      this.Some = undefined;\n      this.None = true;\n    }\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  public unwrap(): T | undefined {\n    if (this.None) {\n      return undefined;\n    }\n    return this.Some;\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  public isSome(): boolean {\n    return !(typeof this.Some === 'undefined');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  public isNone(): boolean {\n    return this.None === true;\n  }\n}\n","export enum CairoResultVariant {\n  Ok = 0,\n  Err = 1,\n}\n\n/**\n * Class to handle Cairo Result\n * @param variant CairoResultVariant.Ok or CairoResultVariant.Err\n * @param resultContent value of type T or U.\n * @returns an instance representing a Cairo Result.\n * @example ```typescript\n * const myOption = new CairoResult<BigNumberish, CustomError>(CairoResultVariant.Ok, \"0x54dda8\");\n * ```\n */\nexport class CairoResult<T, U> {\n  readonly Ok?: T;\n\n  readonly Err?: U;\n\n  constructor(variant: CairoResultVariant, resultContent: T | U) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error('Wrong variant : should be CairoResultVariant.Ok or .Err.');\n    }\n    if (variant === CairoResultVariant.Ok) {\n      this.Ok = resultContent as T;\n      this.Err = undefined;\n    } else {\n      this.Ok = undefined;\n      this.Err = resultContent as U;\n    }\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  public unwrap(): T | U {\n    if (typeof this.Ok !== 'undefined') {\n      return this.Ok;\n    }\n    if (typeof this.Err !== 'undefined') {\n      return this.Err;\n    }\n    throw new Error('Both Result.Ok and .Err are undefined. Not authorized.');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  public isOk(): boolean {\n    return !(typeof this.Ok === 'undefined');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  public isErr(): boolean {\n    return !(typeof this.Err === 'undefined');\n  }\n}\n","import { isBigInt } from '../num';\nimport { decodeShortString } from '../shortString';\n\nconst guard = {\n  isBN: (data: any, type: any, key: any) => {\n    if (!isBigInt(data[key]))\n      throw new Error(\n        `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${\n          data[key]\n        } to be BN instead it is ${typeof data[key]}`\n      );\n  },\n  unknown: (data: any, type: any, key: any) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  },\n};\n\nexport default function formatter(data: any, type: any, sameType?: any) {\n  // match data element with type element\n  return Object.entries(data).reduce((acc, [key, value]: [any, any]) => {\n    const elType = sameType ?? type[key];\n\n    if (!(key in type) && !sameType) {\n      // no type definition for element return original element\n      acc[key] = value;\n      return acc;\n    }\n\n    if (elType === 'string') {\n      if (Array.isArray(data[key])) {\n        // long string (felt*)\n        const arrayStr = formatter(\n          data[key],\n          data[key].map((_: any) => elType)\n        );\n        acc[key] = Object.values(arrayStr).join('');\n        return acc;\n      }\n      guard.isBN(data, type, key);\n      acc[key] = decodeShortString(value);\n      return acc;\n    }\n    if (elType === 'number') {\n      guard.isBN(data, type, key);\n      acc[key] = Number(value);\n      return acc;\n    }\n    if (typeof elType === 'function') {\n      acc[key] = elType(value);\n      return acc;\n    }\n    if (Array.isArray(elType)) {\n      const arrayObj = formatter(data[key], elType, elType[0]);\n      acc[key] = Object.values(arrayObj);\n      return acc;\n    }\n    if (typeof elType === 'object') {\n      acc[key] = formatter(data[key], elType);\n      return acc;\n    }\n\n    guard.unknown(data, type, key);\n    return acc;\n  }, {} as any);\n}\n","import { Abi, FunctionAbi } from '../../../types';\nimport { isLen } from '../cairo';\nimport { AbiParserInterface } from './interface';\n\nexport class AbiParser1 implements AbiParserInterface {\n  abi: Abi;\n\n  constructor(abi: Abi) {\n    this.abi = abi;\n  }\n\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  public methodInputsLength(abiMethod: FunctionAbi) {\n    return abiMethod.inputs.reduce((acc, input) => (!isLen(input.name) ? acc + 1 : acc), 0);\n  }\n\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  public getMethod(name: string): FunctionAbi | undefined {\n    return this.abi.find((it) => it.name === name);\n  }\n\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  public getLegacyFormat() {\n    return this.abi;\n  }\n}\n","import { Abi, FunctionAbi } from '../../../types';\nimport { AbiParserInterface } from './interface';\n\nexport class AbiParser2 implements AbiParserInterface {\n  abi: Abi;\n\n  constructor(abi: Abi) {\n    this.abi = abi;\n  }\n\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  public methodInputsLength(abiMethod: FunctionAbi) {\n    return abiMethod.inputs.length;\n  }\n\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  public getMethod(name: string): FunctionAbi | undefined {\n    const intf = this.abi.find((it) => it.type === 'interface');\n    return intf.items.find((it: any) => it.name === name);\n  }\n\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  public getLegacyFormat(): Abi {\n    return this.abi.flatMap((e) => {\n      if (e.type === 'interface') {\n        return e.items;\n      }\n      return e;\n    });\n  }\n}\n","import { Abi, FunctionAbi, RawArgs } from '../../../types';\nimport { isCairo1Abi } from '../cairo';\nimport { AbiParserInterface } from './interface';\nimport { AbiParser1 } from './parser-0-1.1.0';\nimport { AbiParser2 } from './parser-2.0.0';\n\nexport function createAbiParser(abi: Abi): AbiParserInterface {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\n\nexport function getAbiVersion(abi: Abi) {\n  if (abi.find((it) => it.type === 'interface')) return 2;\n  if (isCairo1Abi(abi)) return 1;\n  return 0;\n}\n\nexport function isNoConstructorValid(\n  method: string,\n  argsCalldata: RawArgs,\n  abiMethod?: FunctionAbi\n) {\n  // No constructor in abi and validly empty args\n  return method === 'constructor' && !abiMethod && !argsCalldata.length;\n}\n","/* eslint-disable no-plusplus */\nimport { isCairo1Type, isTypeNamedTuple } from './cairo';\n\nfunction parseNamedTuple(namedTuple: string): any {\n  const name = namedTuple.substring(0, namedTuple.indexOf(':'));\n  const type = namedTuple.substring(name.length + ':'.length);\n  return { name, type };\n}\n\nfunction parseSubTuple(s: string) {\n  if (!s.includes('(')) return { subTuple: [], result: s };\n  const subTuple: string[] = [];\n  let result = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === '(') {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === ')') counter--;\n        if (s[i] === '(') counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += ' ';\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n\n  return {\n    subTuple,\n    result,\n  };\n}\n\nfunction extractCairo0Tuple(type: string) {\n  const cleanType = type.replace(/\\s/g, '').slice(1, -1); // remove first lvl () and spaces\n\n  // Decompose subTuple\n  const { subTuple, result } = parseSubTuple(cleanType);\n\n  // Recompose subTuple\n  let recomposed = result.split(',').map((it) => {\n    return subTuple.length ? it.replace(' ', subTuple.shift() as string) : it;\n  });\n\n  // Parse named tuple\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n\n  return recomposed;\n}\n\nfunction extractCairo1Tuple(type: string) {\n  // un-named tuples support\n  const cleanType = type.replace(/\\s/g, '').slice(1, -1); // remove first lvl () and spaces\n  const { subTuple, result } = parseSubTuple(cleanType);\n  const recomposed = result.split(',').map((it) => {\n    return subTuple.length ? it.replace(' ', subTuple.shift() as string) : it;\n  });\n  return recomposed;\n}\n\n/**\n * Convert tuple string definition into object like definition\n * @param type tuple string definition\n * @returns object like tuple\n */\nexport default function extractTupleMemberTypes(type: string): (string | object)[] {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n","import { AbiEntry, AbiEnums, AbiStructs, CairoEnum, RawArgsObject } from '../../types';\nimport {\n  getArrayType,\n  isCairo1Type,\n  isLen,\n  isTypeArray,\n  isTypeEnum,\n  isTypeEthAddress,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\nfunction errorU256(key: string) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`\n  );\n}\nexport default function orderPropsByAbi(\n  unorderedObject: RawArgsObject,\n  abiOfObject: AbiEntry[],\n  structs: AbiStructs,\n  enums: AbiEnums\n): object {\n  const orderInput = (unorderedItem: any, abiType: string): any => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeUint256(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== 'object') {\n        // BigNumberish --> just copy\n        return u256;\n      }\n      if (!('low' in u256 && 'high' in u256)) {\n        throw errorU256(abiType);\n      }\n      return { low: u256.low, high: u256.high };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    // litterals\n    return unorderedItem;\n  };\n\n  const orderStruct = (unorderedObject2: RawArgsObject, abiObject: AbiEntry[]): object => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = (value?: any) =>\n        Object.defineProperty(orderedObject, abiParam.name, {\n          enumerable: true,\n          value: value ?? unorderedObject2[abiParam.name],\n        });\n\n      if (unorderedObject2[abiParam.name] === 'undefined') {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n\n  function orderArray(myArray: Array<any> | string, abiParam: string): Array<any> | string {\n    const typeInArray = getArrayType(abiParam);\n    if (typeof myArray === 'string') {\n      return myArray; // longstring\n    }\n    return myArray.map((myElem) => orderInput(myElem, typeInArray));\n  }\n\n  function orderTuple(unorderedObject2: RawArgsObject, abiParam: string): object {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject: object, abiTypeCairoX: any, index) => {\n      const myObjKeys: string[] = Object.keys(unorderedObject2);\n      const setProperty = (value?: any) =>\n        Object.defineProperty(orderedObject, index.toString(), {\n          enumerable: true,\n          value: value ?? unorderedObject2[myObjKeys[index]],\n        });\n      const abiType: string = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX; // Named tuple, or tuple\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n\n  const orderEnum = (unorderedObject2: CairoEnum, abiObject: AbiEntry): CairoEnum => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2 as CairoResult<any, any>;\n      const resultOkType: string = abiObject.name.substring(\n        abiObject.name.indexOf('<') + 1,\n        abiObject.name.lastIndexOf(',')\n      );\n      const resultErrType: string = abiObject.name.substring(\n        abiObject.name.indexOf(',') + 1,\n        abiObject.name.lastIndexOf('>')\n      );\n      if (unorderedResult.isOk()) {\n        return new CairoResult<any, any>(\n          CairoResultVariant.Ok,\n          orderInput(unorderedObject2.unwrap(), resultOkType)\n        );\n      }\n      return new CairoResult<any, any>(\n        CairoResultVariant.Err,\n        orderInput(unorderedObject2.unwrap(), resultErrType)\n      );\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2 as CairoOption<any>;\n      const resultSomeType: string = abiObject.name.substring(\n        abiObject.name.indexOf('<') + 1,\n        abiObject.name.lastIndexOf('>')\n      );\n      if (unorderedOption.isSome()) {\n        return new CairoOption<any>(\n          CairoOptionVariant.Some,\n          orderInput(unorderedOption.unwrap(), resultSomeType)\n        );\n      }\n      // none(())\n      return new CairoOption<any>(CairoOptionVariant.None, {});\n    }\n    // custom Enum\n    const unorderedCustomEnum = unorderedObject2 as CairoCustomEnum;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map((variant) => {\n      if (typeof variant[1] === 'undefined') {\n        return variant;\n      }\n      const variantType: string = abiObject.type.substring(\n        abiObject.type.lastIndexOf('<') + 1,\n        abiObject.type.lastIndexOf('>')\n      );\n      if (variantType === '()') {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n\n  // Order Call Parameters\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = (value: any) =>\n      Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value,\n      });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n","import {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  CairoEnum,\n  ParsedStruct,\n  Tupled,\n  Uint256,\n} from '../../types';\nimport { isText, splitLongString } from '../shortString';\nimport {\n  felt,\n  getArrayType,\n  isTypeArray,\n  isTypeEnum,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint256,\n  uint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\n/**\n * parse base types\n * @param type type from abi\n * @param val value provided\n * @returns string | string[]\n */\nfunction parseBaseTypes(type: string, val: BigNumberish) {\n  switch (true) {\n    case isTypeUint256(type):\n      // eslint-disable-next-line no-case-declarations\n      const el_uint256 = uint256(val);\n      return [felt(el_uint256.low), felt(el_uint256.high)];\n    default:\n      return felt(val);\n  }\n}\n\n/**\n * Parse tuple type string to array of known objects\n * @param element request element\n * @param typeStr tuple type string\n * @returns Tupled[]\n */\nfunction parseTuple(element: object, typeStr: string): Tupled[] {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n\n  if (elements.length !== memberTypes.length) {\n    throw Error(\n      `ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`\n    );\n  }\n\n  return memberTypes.map((it: any, dx: number) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it,\n    };\n  });\n}\n\nfunction parseUint256(element: object | BigNumberish) {\n  if (typeof element === 'object') {\n    const { low, high } = element as Uint256;\n    return [felt(low as BigNumberish), felt(high as BigNumberish)];\n  }\n  const el_uint256 = uint256(element);\n  return [felt(el_uint256.low), felt(el_uint256.high)];\n}\n\n/**\n * Deep parse of the object that has been passed to the method\n *\n * @param element - element that needs to be parsed\n * @param type  - name of the method\n * @param structs - structs from abi\n * @param enums - enums from abi\n * @return {string | string[]} - parsed arguments in format that contract is expecting\n */\nfunction parseCalldataValue(\n  element:\n    | ParsedStruct\n    | BigNumberish\n    | BigNumberish[]\n    | CairoOption<any>\n    | CairoResult<any, any>\n    | CairoEnum,\n  type: string,\n  structs: AbiStructs,\n  enums: AbiEnums\n): string | string[] {\n  if (element === undefined) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n\n  // value is Array\n  if (Array.isArray(element)) {\n    const result: string[] = [];\n    result.push(felt(element.length)); // Add length to array\n    const arrayType = getArrayType(type);\n\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n\n  // checking if the passed element is struct\n  if (structs[type] && structs[type].members.length) {\n    if (isTypeUint256(type)) {\n      return parseUint256(element);\n    }\n\n    if (type === 'core::starknet::eth_address::EthAddress')\n      return parseBaseTypes(type, element as BigNumberish);\n\n    const { members } = structs[type];\n    const subElement = element as any;\n\n    return members.reduce((acc, it: AbiEntry) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, [] as string[]);\n  }\n  // check if abi element is tuple\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element as object, type);\n\n    return tupled.reduce((acc, it: Tupled) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, [] as string[]);\n  }\n  // check if u256 C1v0\n  if (isTypeUint256(type)) {\n    return parseUint256(element);\n  }\n  // check if Enum\n  if (isTypeEnum(type, enums)) {\n    const { variants } = enums[type];\n    // Option Enum\n    if (isTypeOption(type)) {\n      const myOption = element as CairoOption<any>;\n      if (myOption.isSome()) {\n        const listTypeVariant = variants.find((variant) => variant.name === 'Some');\n        if (typeof listTypeVariant === 'undefined') {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant.type;\n        if (typeVariantSome === '()') {\n          return CairoOptionVariant.Some.toString();\n        }\n        const parsedParameter = parseCalldataValue(\n          myOption.unwrap(),\n          typeVariantSome,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter)) {\n          return [CairoOptionVariant.Some.toString(), ...parsedParameter];\n        }\n        return [CairoOptionVariant.Some.toString(), parsedParameter];\n      }\n      return CairoOptionVariant.None.toString();\n    }\n    // Result Enum\n    if (isTypeResult(type)) {\n      const myResult = element as CairoResult<any, any>;\n      if (myResult.isOk()) {\n        const listTypeVariant = variants.find((variant) => variant.name === 'Ok');\n        if (typeof listTypeVariant === 'undefined') {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant.type;\n        if (typeVariantOk === '()') {\n          return CairoResultVariant.Ok.toString();\n        }\n        const parsedParameter = parseCalldataValue(\n          myResult.unwrap(),\n          typeVariantOk,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter)) {\n          return [CairoResultVariant.Ok.toString(), ...parsedParameter];\n        }\n        return [CairoResultVariant.Ok.toString(), parsedParameter];\n      }\n      // is Result::Err\n      const listTypeVariant = variants.find((variant) => variant.name === 'Err');\n      if (typeof listTypeVariant === 'undefined') {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant.type;\n      if (typeVariantErr === '()') {\n        return CairoResultVariant.Err.toString();\n      }\n      const parsedParameter = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter)) {\n        return [CairoResultVariant.Err.toString(), ...parsedParameter];\n      }\n      return [CairoResultVariant.Err.toString(), parsedParameter];\n    }\n    // Custom Enum\n    const myEnum = element as CairoCustomEnum;\n    const activeVariant: string = myEnum.activeVariant();\n    const listTypeVariant = variants.find((variant) => variant.name === activeVariant);\n    if (typeof listTypeVariant === 'undefined') {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant); // can not fail due to check of listTypeVariant\n    if (typeActiveVariant === '()') {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n\n  if (typeof element === 'object') {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\n\n/**\n * Parse one field of the calldata by using input field from the abi for that method\n *\n * @param argsIterator - Iterator<any> for value of the field\n * @param input  - input(field) information from the abi that will be used to parse the data\n * @param structs - structs from abi\n * @param enums - enums from abi\n * @return {string | string[]} - parsed arguments in format that contract is expecting\n */\nexport function parseCalldataField(\n  argsIterator: Iterator<any>,\n  input: AbiEntry,\n  structs: AbiStructs,\n  enums: AbiEnums\n): string | string[] {\n  const { name, type } = input;\n  let { value } = argsIterator.next();\n\n  switch (true) {\n    // Array\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (typeof value === 'string') {\n        // long string match cairo felt*\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n\n    case type === 'core::starknet::eth_address::EthAddress':\n      return parseBaseTypes(type, value);\n    // Struct or Tuple\n    case isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type):\n      return parseCalldataValue(value as ParsedStruct | BigNumberish[], type, structs, enums);\n\n    // Enums\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(\n        value as CairoOption<any> | CairoResult<any, any> | CairoEnum,\n        type,\n        structs,\n        enums\n      );\n\n    // Felt or unhandled\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n","/* eslint-disable no-case-declarations */\nimport {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  Args,\n  BigNumberish,\n  CairoEnum,\n  EventEntry,\n  ParsedStruct,\n} from '../../types';\nimport { uint256ToBN } from '../uint256';\nimport {\n  getArrayType,\n  isCairo1Type,\n  isLen,\n  isTypeArray,\n  isTypeBool,\n  isTypeEnum,\n  isTypeTuple,\n  isTypeUint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoEnumRaw,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\n/**\n * Parse base types\n * @param type type of element\n * @param it iterator\n * @returns bigint | boolean\n */\nfunction parseBaseTypes(type: string, it: Iterator<string>) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case isTypeUint256(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return uint256ToBN({ low, high });\n    case type === 'core::starknet::eth_address::EthAddress':\n      temp = it.next().value;\n      return BigInt(temp);\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\n\n/**\n * Parse of the response elements that are converted to Object (Struct) by using the abi\n *\n * @param responseIterator - iterator of the response\n * @param element - element of the field {name: string, type: string}\n * @param structs - structs from abi\n * @return {any} - parsed arguments in format that contract is expecting\n */\nfunction parseResponseValue(\n  responseIterator: Iterator<string>,\n  element: { name: string; type: string },\n  structs?: AbiStructs,\n  enums?: AbiEnums\n): BigNumberish | ParsedStruct | boolean | any[] | CairoEnum {\n  if (element.type === '()') {\n    return {};\n  }\n  // type uint256 struct (c1v2)\n  if (isTypeUint256(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return uint256ToBN({ low, high });\n  }\n\n  // type c1 array\n  if (isTypeArray(element.type)) {\n    // eslint-disable-next-line no-case-declarations\n    const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n    const el: AbiEntry = { name: '', type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value); // get length\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n\n  // type struct\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === 'core::starknet::eth_address::EthAddress') {\n      return parseBaseTypes(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {} as any);\n  }\n\n  // type Enum (only CustomEnum)\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum: number = Number(responseIterator.next().value); // get variant number\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(\n          responseIterator,\n          { name: '', type: variant.type },\n          structs,\n          enums\n        );\n        return acc;\n      }\n      acc[variant.name] = undefined;\n      return acc;\n    }, {} as CairoEnumRaw);\n    // Option\n    if (element.type.startsWith('core::option::Option')) {\n      const content = variantNum === CairoOptionVariant.Some ? rawEnum.Some : undefined;\n      return new CairoOption<Object>(variantNum, content);\n    }\n    // Result\n    if (element.type.startsWith('core::result::Result')) {\n      let content: Object;\n      if (variantNum === CairoResultVariant.Ok) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult<Object, Object>(variantNum, content);\n    }\n    // Cairo custom Enum\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n\n  // type tuple\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it: any, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = { name, type };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {} as any);\n  }\n\n  // type c1 array\n  if (isTypeArray(element.type)) {\n    // eslint-disable-next-line no-case-declarations\n    const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n    const el = { name: '', type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value); // get length\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n\n  // base type\n  return parseBaseTypes(element.type, responseIterator);\n}\n\n/**\n * Parse elements of the response and structuring them into one field by using output property from the abi for that method\n *\n * @param responseIterator - iterator of the response\n * @param output - output(field) information from the abi that will be used to parse the data\n * @param structs - structs from abi\n * @param parsedResult\n * @return - parsed response corresponding to the abi structure of the field\n */\nexport default function responseParser(\n  responseIterator: Iterator<string>,\n  output: AbiEntry | EventEntry,\n  structs?: AbiStructs,\n  enums?: AbiEnums,\n  parsedResult?: Args | ParsedStruct\n): any {\n  const { name, type } = output;\n  let temp;\n\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n\n    case (structs && type in structs) || isTypeTuple(type):\n      return parseResponseValue(responseIterator, output, structs, enums);\n\n    case enums && isTypeEnum(type, enums):\n      return parseResponseValue(responseIterator, output, structs, enums);\n\n    case isTypeArray(type):\n      // C1 Array\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      // C0 Array\n      // eslint-disable-next-line no-case-declarations\n      const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`] as number;\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(\n            parseResponseValue(\n              responseIterator,\n              { name, type: output.type.replace('*', '') },\n              structs,\n              enums\n            )\n          );\n        }\n      }\n      return parsedDataArr;\n\n    default:\n      return parseBaseTypes(type, responseIterator);\n  }\n}\n","/**\n * Validate cairo contract method arguments\n * Flow: Determine type from abi and than validate against parameter\n */\nimport {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  FunctionAbi,\n  Litteral,\n  Uint,\n} from '../../types';\nimport assert from '../assert';\nimport { isHex, toBigInt } from '../num';\nimport { isLongText } from '../shortString';\nimport { uint256ToBN } from '../uint256';\nimport {\n  getArrayType,\n  isLen,\n  isTypeArray,\n  isTypeBool,\n  isTypeEnum,\n  isTypeFelt,\n  isTypeLitteral,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint,\n} from './cairo';\n\nconst validateFelt = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'string' || typeof parameter === 'number' || typeof parameter === 'bigint',\n    `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`\n  );\n  if (typeof parameter === 'string' && !isHex(parameter)) return; // shortstring\n  const param = BigInt(parameter.toString(10));\n  assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n  );\n};\n\nconst validateUint = (parameter: any, input: AbiEntry) => {\n  if (typeof parameter === 'number') {\n    assert(\n      parameter <= Number.MAX_SAFE_INTEGER,\n      `Validation: Parameter is to large to be typed as Number use (BigInt or String)`\n    );\n  }\n  assert(\n    typeof parameter === 'string' ||\n      typeof parameter === 'number' ||\n      typeof parameter === 'bigint' ||\n      (typeof parameter === 'object' && 'low' in parameter && 'high' in parameter),\n    `Validate: arg ${input.name} of cairo type ${\n      input.type\n    } should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`\n  );\n  const param = typeof parameter === 'object' ? uint256ToBN(parameter) : toBigInt(parameter);\n\n  switch (input.type) {\n    case Uint.u8:\n      assert(\n        param >= 0n && param <= 255n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`\n      );\n      break;\n\n    case Uint.u16:\n      assert(\n        param >= 0n && param <= 65535n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`\n      );\n      break;\n\n    case Uint.u32:\n      assert(\n        param >= 0n && param <= 4294967295n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`\n      );\n      break;\n\n    case Uint.u64:\n      assert(\n        param >= 0n && param <= 2n ** 64n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`\n      );\n      break;\n\n    case Uint.u128:\n      assert(\n        param >= 0n && param <= 2n ** 128n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`\n      );\n      break;\n\n    case Uint.u256:\n      assert(\n        param >= 0n && param <= 2n ** 256n - 1n,\n        `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`\n      );\n      break;\n\n    case Litteral.ClassHash:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n\n    case Litteral.ContractAddress:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    default:\n      break;\n  }\n};\n\nconst validateBool = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'boolean',\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`\n  );\n};\n\nconst validateStruct = (parameter: any, input: AbiEntry, structs: AbiStructs) => {\n  // c1v2 uint256 in struct\n  if (input.type === Uint.u256) {\n    validateUint(parameter, input);\n    return;\n  }\n\n  if (input.type === 'core::starknet::eth_address::EthAddress') {\n    assert(\n      typeof parameter !== 'object',\n      `EthAdress type is waiting a BigNumberish. Got ${parameter}`\n    );\n    const param = BigInt(parameter.toString(10));\n    assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n      param >= 0n && param <= 2n ** 160n - 1n,\n      `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`\n    );\n    return;\n  }\n\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`\n  );\n\n  // shallow struct validation, only first depth level\n  structs[input.type].members.forEach(({ name }) => {\n    assert(\n      Object.keys(parameter).includes(name),\n      `Validate: arg ${input.name} should have a property ${name}`\n    );\n  });\n};\n\nconst validateEnum = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`\n  );\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes('isSome') && keys.includes('isNone')) {\n    return; // Option Enum\n  }\n  if (isTypeResult(input.type) && keys.includes('isOk') && keys.includes('isErr')) {\n    return; // Result Enum\n  }\n  if (keys.includes('variant') && keys.includes('activeVariant')) {\n    return; // Custom Enum\n  }\n  throw new Error(\n    `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`\n  );\n};\n\nconst validateTuple = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} should be a tuple (defined as object)`\n  );\n  // todo: skip tuple structural validation for now\n};\n\nconst validateArray = (parameter: any, input: AbiEntry, structs: AbiStructs, enums: AbiEnums) => {\n  const baseType = getArrayType(input.type);\n\n  // Long text (special case when parameter is not an array but long text)\n  // console.log(\n  //   'validate array = ',\n  //   isTypeFelt(baseType),\n  //   isLongText(parameter),\n  //   baseType,\n  //   parameter\n  // );\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    // console.log('long text.');\n    return;\n  }\n\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach((param: BigNumberish) => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach((it: any) => validateTuple(it, { name: input.name, type: baseType }));\n      break;\n\n    case isTypeArray(baseType):\n      parameter.forEach((param: BigNumberish) =>\n        validateArray(param, { name: '', type: baseType }, structs, enums)\n      );\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach((it: any) =>\n        validateStruct(it, { name: input.name, type: baseType }, structs)\n      );\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach((it: any) => validateEnum(it, { name: input.name, type: baseType }));\n      break;\n    case isTypeUint(baseType) || isTypeLitteral(baseType):\n      parameter.forEach((param: BigNumberish) => validateUint(param, input));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach((param: BigNumberish) => validateBool(param, input));\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\n\nexport default function validateFields(\n  abiMethod: FunctionAbi,\n  args: Array<any>,\n  structs: AbiStructs,\n  enums: AbiEnums\n) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case isTypeUint(input.type) || isTypeLitteral(input.type):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      default:\n        throw new Error(\n          `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n        );\n    }\n\n    return acc + 1;\n  }, 0);\n}\n","/* eslint-disable no-plusplus */\nimport {\n  Abi,\n  AbiEnums,\n  AbiStructs,\n  Args,\n  ArgsOrCalldata,\n  Calldata,\n  FunctionAbi,\n  HexCalldata,\n  RawArgs,\n  RawArgsArray,\n  Result,\n  ValidateType,\n} from '../../types';\nimport assert from '../assert';\nimport { isBigInt, toHex } from '../num';\nimport { getSelectorFromName } from '../selector';\nimport { isLongText, splitLongString } from '../shortString';\nimport { felt, isCairo1Type, isLen } from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport formatter from './formatter';\nimport { createAbiParser, isNoConstructorValid } from './parser';\nimport { AbiParserInterface } from './parser/interface';\nimport orderPropsByAbi from './propertyOrder';\nimport { parseCalldataField } from './requestParser';\nimport responseParser from './responseParser';\nimport validateFields from './validate';\n\nexport * as cairo from './cairo';\n\nexport class CallData {\n  abi: Abi;\n\n  parser: AbiParserInterface;\n\n  protected readonly structs: AbiStructs;\n\n  protected readonly enums: AbiEnums;\n\n  constructor(abi: Abi) {\n    this.structs = CallData.getAbiStruct(abi);\n    this.enums = CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  public validate(type: ValidateType, method: string, args: ArgsOrCalldata = []) {\n    // ensure provided method of type exists\n    if (type !== ValidateType.DEPLOY) {\n      const invocableFunctionNames = this.abi\n        .filter((abi) => {\n          if (abi.type !== 'function') return false;\n          const isView = abi.stateMutability === 'view' || abi.state_mutability === 'view';\n          return type === ValidateType.INVOKE ? !isView : isView;\n        })\n        .map((abi) => abi.name);\n      assert(\n        invocableFunctionNames.includes(method),\n        `${type === ValidateType.INVOKE ? 'invocable' : 'viewable'} method not found in abi`\n      );\n    }\n\n    // get requested method from abi\n    const abiMethod = this.abi.find((abi) =>\n      type === ValidateType.DEPLOY\n        ? abi.name === method && abi.type === 'constructor'\n        : abi.name === method && abi.type === 'function'\n    ) as FunctionAbi;\n\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n\n    // validate arguments length\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(\n        `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`\n      );\n    }\n\n    // validate parameters\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  public compile(method: string, argsCalldata: RawArgs): Calldata {\n    const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method) as FunctionAbi;\n\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n\n    let args: RawArgsArray;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      // order the object\n      const orderedObject = orderPropsByAbi(\n        argsCalldata,\n        abiMethod.inputs,\n        this.structs,\n        this.enums\n      );\n      // console.log('ordered =', orderedObject);\n      args = Object.values(orderedObject);\n      //   // validate array elements to abi\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n\n    const argsIterator = args[Symbol.iterator]();\n\n    const callArray = abiMethod.inputs.reduce(\n      (acc, input) =>\n        isLen(input.name) && !isCairo1Type(input.type)\n          ? acc\n          : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),\n      [] as Calldata\n    );\n\n    // add compiled property to array object\n    Object.defineProperty(callArray, '__compiled__', {\n      enumerable: false,\n      writable: false,\n      value: true,\n    });\n    return callArray;\n  }\n\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs: RawArgs): Calldata {\n    const createTree = (obj: object) => {\n      const getEntries = (o: object, prefix = '.'): any => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (isLongText(value)) value = splitLongString(value);\n          if (k === 'entrypoint') value = getSelectorFromName(value);\n          const kk = Array.isArray(oe) && k === '0' ? '$$len' : k;\n          if (isBigInt(value)) return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes('isSome') && keys.includes('isNone')) {\n              // Option\n              const myOption = value as CairoOption<any>;\n              const variantNb = myOption.isSome()\n                ? CairoOptionVariant.Some\n                : CairoOptionVariant.None;\n              if (myOption.isSome())\n                return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes('isOk') && keys.includes('isErr')) {\n              // Result\n              const myResult = value as CairoResult<any, any>;\n              const variantNb = myResult.isOk() ? CairoResultVariant.Ok : CairoResultVariant.Err;\n              return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);\n            }\n            if (keys.includes('variant') && keys.includes('activeVariant')) {\n              // CustomEnum\n              const myEnum = value as CairoCustomEnum;\n              const activeVariant: string = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(\n                (variant: any) => variant === activeVariant\n              );\n              if (\n                typeof myEnum.unwrap() === 'object' &&\n                Object.keys(myEnum.unwrap()).length === 0 // empty object : {}\n              ) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);\n            }\n            // normal object\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      // flatten structs, tuples, add array length. Process leafs as Felt\n      const callTree = createTree(rawArgs);\n      // convert to array\n      callTreeArray = Object.values(callTree);\n    } else {\n      // already compiled data but modified or raw args provided as array, recompile it\n      // recreate tree\n      const callObj = { ...rawArgs };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n\n    // add compiled property to array object\n    Object.defineProperty(callTreeArray, '__compiled__', {\n      enumerable: false,\n      writable: false,\n      value: true,\n    });\n    return callTreeArray;\n  }\n\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  public parse(method: string, response: string[]): Result {\n    const { outputs } = this.abi.find((abi) => abi.name === method) as FunctionAbi;\n    const responseIterator = response.flat()[Symbol.iterator]();\n\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {} as Args);\n\n    // Cairo1 avoid object.0 structure\n    return Object.keys(parsed).length === 1 && 0 in parsed ? (parsed[0] as Result) : parsed;\n  }\n\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  public format(method: string, response: string[], format: object): Result {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi: Abi): AbiStructs {\n    return abi\n      .filter((abiEntry) => abiEntry.type === 'struct')\n      .reduce(\n        (acc, abiEntry) => ({\n          ...acc,\n          [abiEntry.name]: abiEntry,\n        }),\n        {}\n      );\n  }\n\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi: Abi): AbiEnums {\n    const fullEnumList = abi\n      .filter((abiEntry) => abiEntry.type === 'enum')\n      .reduce(\n        (acc, abiEntry) => ({\n          ...acc,\n          [abiEntry.name]: abiEntry,\n        }),\n        {}\n      );\n    delete fullEnumList['core::bool'];\n    return fullEnumList;\n  }\n\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata: RawArgs = []): Calldata {\n    return CallData.compile(rawCalldata);\n  }\n\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw: RawArgs = []): HexCalldata {\n    const calldata = CallData.compile(raw);\n    return calldata.map((it) => toHex(it));\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/extensions */\nimport { poseidonHashMany } from '@scure/starknet';\n\nimport {\n  API_VERSION,\n  BN_FEE_TRANSACTION_VERSION_1,\n  BN_FEE_TRANSACTION_VERSION_2,\n  BN_TRANSACTION_VERSION_1,\n  BN_TRANSACTION_VERSION_2,\n  StarknetChainId,\n  TransactionHashPrefix,\n} from '../constants';\nimport {\n  BigNumberish,\n  Builtins,\n  CompiledContract,\n  CompiledSierra,\n  CompiledSierraCasm,\n  ContractEntryPointFields,\n  LegacyCompiledContract,\n  RawArgs,\n  RawCalldata,\n  SierraContractEntryPointFields,\n} from '../types';\nimport { CallData } from './calldata';\nimport { felt } from './calldata/cairo';\nimport { starkCurve } from './ec';\nimport { addHexPrefix, utf8ToArray } from './encode';\nimport { parse, stringify } from './json';\nimport { toBigInt, toHex } from './num';\nimport { getSelectorFromName } from './selector';\nimport { encodeShortString } from './shortString';\n\nexport * as poseidon from '@noble/curves/abstract/poseidon';\nexport * from './selector'; // Preserve legacy export structure\n\nexport const transactionVersion = BN_TRANSACTION_VERSION_1;\nexport const transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nexport const feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nexport const feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\n\n/**\n * Return transaction versions based on version type, default version type is 'transaction'\n */\nexport function getVersionsByType(versionType?: 'fee' | 'transaction') {\n  return versionType === 'fee'\n    ? { v1: feeTransactionVersion, v2: feeTransactionVersion_2 }\n    : { v1: transactionVersion, v2: transactionVersion_2 };\n}\n\n/**\n * Compute pedersen hash from data\n * @returns format: hex-string - pedersen hash\n */\nexport function computeHashOnElements(data: BigNumberish[]): string {\n  return [...data, data.length]\n    .reduce((x: BigNumberish, y: BigNumberish) => starkCurve.pedersen(toBigInt(x), toBigInt(y)), 0)\n    .toString();\n}\n\n/**\n * Calculate transaction pedersen hash for common properties\n *\n * Following implementation is based on this python [implementation #](https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py)\n * @returns format: hex-string\n */\nexport function calculateTransactionHashCommon(\n  txHashPrefix: TransactionHashPrefix,\n  version: BigNumberish,\n  contractAddress: BigNumberish,\n  entryPointSelector: BigNumberish,\n  calldata: RawCalldata,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  additionalData: BigNumberish[] = []\n): string {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [\n    txHashPrefix,\n    version,\n    contractAddress,\n    entryPointSelector,\n    calldataHash,\n    maxFee,\n    chainId,\n    ...additionalData,\n  ];\n  return computeHashOnElements(dataToHash);\n}\n\n/**\n * Calculate deploy transaction hash\n * @returns format: hex-string\n */\nexport function calculateDeployTransactionHash(\n  contractAddress: BigNumberish,\n  constructorCalldata: RawCalldata,\n  version: BigNumberish,\n  chainId: StarknetChainId,\n  constructorName: string = 'constructor'\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DEPLOY,\n    version,\n    contractAddress,\n    getSelectorFromName(constructorName),\n    constructorCalldata,\n    0,\n    chainId\n  );\n}\n\n/**\n * Calculate declare transaction hash\n * @param classHash hex-string\n * @param compiledClassHash hex-string\n * @returns format: hex-string\n */\nexport function calculateDeclareTransactionHash(\n  classHash: string,\n  senderAddress: BigNumberish,\n  version: BigNumberish,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish,\n  compiledClassHash?: string\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DECLARE,\n    version,\n    senderAddress,\n    0,\n    [classHash],\n    maxFee,\n    chainId,\n    [nonce, ...(compiledClassHash ? [compiledClassHash] : [])]\n  );\n}\n\n/**\n * Calculate deploy_account transaction hash\n * @returns format: hex-string\n */\nexport function calculateDeployAccountTransactionHash(\n  contractAddress: BigNumberish,\n  classHash: BigNumberish,\n  constructorCalldata: RawCalldata,\n  salt: BigNumberish,\n  version: BigNumberish,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish\n) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DEPLOY_ACCOUNT,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\n\n/**\n * Calculate invoke transaction hash\n * @returns format: hex-string\n */\nexport function calculateTransactionHash(\n  contractAddress: BigNumberish,\n  version: BigNumberish,\n  calldata: RawCalldata,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.INVOKE,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\n\n/**\n * Calculate contract address from class hash\n * @returns format: hex-string\n */\nexport function calculateContractAddressFromHash(\n  salt: BigNumberish,\n  classHash: BigNumberish,\n  constructorCalldata: RawArgs,\n  deployerAddress: BigNumberish\n) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n\n  const CONTRACT_ADDRESS_PREFIX = felt('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n\n  return computeHashOnElements([\n    CONTRACT_ADDRESS_PREFIX,\n    deployerAddress,\n    salt,\n    classHash,\n    constructorCalldataHash,\n  ]);\n}\n\nfunction nullSkipReplacer(key: string, value: any) {\n  if (key === 'attributes' || key === 'accessible_scopes') {\n    return Array.isArray(value) && value.length === 0 ? undefined : value;\n  }\n\n  if (key === 'debug_info') {\n    return null;\n  }\n\n  return value === null ? undefined : value;\n}\n\n/**\n * Format json-string to conform starknet json-string\n * @param json json-string\n * @returns format: json-string\n */\nexport function formatSpaces(json: string) {\n  let insideQuotes = false;\n  const newString = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for (const char of json) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === '\\\\') === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      // eslint-disable-next-line no-nested-ternary\n      newString.push(char === ':' ? ': ' : char === ',' ? ', ' : char);\n    }\n  }\n  return newString.join('');\n}\n\n/**\n * Compute hinted class hash for legacy compiled contract (Cairo 0)\n * @returns format: hex-string\n */\nexport default function computeHintedClassHash(compiledContract: LegacyCompiledContract) {\n  const { abi, program } = compiledContract;\n  const contractClass = { abi, program };\n  const serializedJson = formatSpaces(stringify(contractClass, nullSkipReplacer));\n\n  return addHexPrefix(starkCurve.keccak(utf8ToArray(serializedJson)).toString(16));\n}\n\n/**\n * Computes the class hash for legacy compiled contract (Cairo 0)\n * @returns format: hex-string\n */\nexport function computeLegacyContractClassHash(contract: LegacyCompiledContract | string) {\n  const compiledContract =\n    typeof contract === 'string' ? (parse(contract) as LegacyCompiledContract) : contract;\n\n  const apiVersion = toHex(API_VERSION);\n\n  const externalEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const l1HandlerEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const constructorEntryPointHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const builtinsHash = computeHashOnElements(\n    compiledContract.program.builtins.map((s) => encodeShortString(s))\n  );\n\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n\n  const dataHash = computeHashOnElements(compiledContract.program.data);\n\n  return computeHashOnElements([\n    apiVersion,\n    externalEntryPointsHash,\n    l1HandlerEntryPointsHash,\n    constructorEntryPointHash,\n    builtinsHash,\n    hintedClassHash,\n    dataHash,\n  ]);\n}\n\n// Cairo 1 code\n\nfunction hashBuiltins(builtins: Builtins) {\n  return poseidonHashMany(\n    builtins.flatMap((it: any) => {\n      return BigInt(encodeShortString(it));\n    })\n  );\n}\n\nfunction hashEntryPoint(data: ContractEntryPointFields[]) {\n  const base = data.flatMap((it: any) => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return poseidonHashMany(base);\n}\n\n/**\n * Compute compiled class hash for contract (Cairo 1)\n * @returns format: hex-string\n */\nexport function computeCompiledClassHash(casm: CompiledSierraCasm) {\n  const COMPILED_CLASS_VERSION = 'COMPILED_CLASS_V1';\n\n  // Hash compiled class version\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n\n  // Hash external entry points.\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n\n  // Hash L1 handler entry points.\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n\n  // Hash constructor entry points.\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n\n  // Hash bytecode.\n  const bytecode = poseidonHashMany(casm.bytecode.map((it: string) => BigInt(it)));\n\n  return toHex(\n    poseidonHashMany([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      bytecode,\n    ])\n  );\n}\n\nfunction hashEntryPointSierra(data: SierraContractEntryPointFields[]) {\n  const base = data.flatMap((it: any) => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return poseidonHashMany(base);\n}\n\nfunction hashAbi(sierra: CompiledSierra) {\n  const indentString = formatSpaces(stringify(sierra.abi, null));\n  return BigInt(addHexPrefix(starkCurve.keccak(utf8ToArray(indentString)).toString(16)));\n}\n\n/**\n * Compute sierra contract class hash (Cairo 1)\n * @returns format: hex-string\n */\nexport function computeSierraContractClassHash(sierra: CompiledSierra) {\n  const CONTRACT_CLASS_VERSION = 'CONTRACT_CLASS_V0.1.0';\n\n  // Hash class version\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n\n  // Hash external entry points.\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n\n  // Hash L1 handler entry points.\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n\n  // Hash constructor entry points.\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n\n  // Hash abi_hash.\n  const abiHash = hashAbi(sierra);\n\n  // Hash Sierra program.\n  const sierraProgram = poseidonHashMany(sierra.sierra_program.map((it: string) => BigInt(it)));\n\n  return toHex(\n    poseidonHashMany([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      abiHash,\n      sierraProgram,\n    ])\n  );\n}\n\n/**\n * Compute ClassHash (sierra or legacy) based on provided contract\n * @returns format: hex-string\n */\nexport function computeContractClassHash(contract: CompiledContract | string) {\n  const compiledContract = typeof contract === 'string' ? parse(contract) : contract;\n\n  if ('sierra_program' in compiledContract) {\n    return computeSierraContractClassHash(compiledContract as CompiledSierra);\n  }\n\n  return computeLegacyContractClassHash(compiledContract as LegacyCompiledContract);\n}\n","// TODO rename\nexport * as starkCurve from '@scure/starknet';\nexport * as weierstrass from '@noble/curves/abstract/weierstrass';\n","// the ts-ignore suppresses an esm to cjs import error that is resolved with bundling\n// @ts-ignore\nimport * as json from 'lossless-json';\n\n/**\n * Convert string to number or bigint based on size\n */\nconst parseIntAsNumberOrBigInt = (x: string) => {\n  if (!json.isInteger(x)) return parseFloat(x);\n  const v = parseInt(x, 10);\n  return Number.isSafeInteger(v) ? v : BigInt(x);\n};\n\n/**\n * Convert JSON string to JSON object\n *\n * NOTE: the String() wrapping is used so the behavior conforms to JSON.parse()\n * which can accept simple data types but is not represented in the default typing\n * @param x JSON string\n */\nexport const parse = (x: string): any => json.parse(String(x), undefined, parseIntAsNumberOrBigInt);\n\n/**\n * Convert JSON string to JSON object with all numbers as bigint\n * @param x JSON string\n */\nexport const parseAlwaysAsBig = (x: string): any =>\n  json.parse(String(x), undefined, json.parseNumberAndBigInt);\n\n/**\n * Convert JSON object to JSON string\n *\n * NOTE: the not-null assertion is used so the return type conforms to JSON.stringify()\n * which can also return undefined but is not represented in the default typing\n * @returns JSON string\n */\nexport const stringify = (\n  value: json.JavaScriptValue,\n  replacer?: any,\n  space?: string | number | undefined,\n  numberStringifiers?: json.NumberStringifier[] | undefined\n): string => json.stringify(value, replacer, space, numberStringifiers)!;\n\n/** @deprecated equivalent to 'stringify', alias will be removed */\nexport const stringifyAlwaysAsBig = stringify;\n","import { getStarkKey, utils } from '@scure/starknet';\nimport { gzip, ungzip } from 'pako';\n\nimport { ArraySignatureType, BigNumberish, CompressedProgram, Program, Signature } from '../types';\nimport { addHexPrefix, arrayBufferToString, atobUniversal, btoaUniversal } from './encode';\nimport { parse, stringify } from './json';\nimport {\n  bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray,\n  toBigInt,\n  toHex,\n} from './num';\n\n/**\n * Compress compiled Cairo program\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/services/api/gateway/transaction.py#L54-L58)\n * @param jsonProgram Representing the compiled cairo program\n */\nexport function compressProgram(jsonProgram: Program | string): CompressedProgram {\n  const stringified = typeof jsonProgram === 'string' ? jsonProgram : stringify(jsonProgram);\n  const compressedProgram = gzip(stringified);\n  return btoaUniversal(compressedProgram);\n}\n\n/**\n * Decompress compressed compiled Cairo program\n * @param base64 Compressed program\n * @returns Parsed decompressed compiled Cairo program\n */\nexport function decompressProgram(base64: CompressedProgram) {\n  if (Array.isArray(base64)) return base64;\n  const decompressed = arrayBufferToString(ungzip(atobUniversal(base64)));\n  return parse(decompressed);\n}\n\n/**\n * Random Address based on random keyPair\n */\nexport function randomAddress(): string {\n  const randomKeyPair = utils.randomPrivateKey();\n  return getStarkKey(randomKeyPair);\n}\n\n/**\n * Lowercase and hex prefix string\n *\n * @deprecated Not used internally, naming is confusing based on functionality\n */\nexport function makeAddress(input: string): string {\n  return addHexPrefix(input).toLowerCase();\n}\n\n/**\n * Format Signature to standard type (hex array)\n * @returns Custom hex array or weierstrass.SignatureType hex array\n */\nexport function formatSignature(sig?: Signature): ArraySignatureType {\n  if (!sig) throw Error('formatSignature: provided signature is undefined');\n  if (Array.isArray(sig)) {\n    return sig.map((it) => toHex(it));\n  }\n  try {\n    const { r, s } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error('Signature need to be weierstrass.SignatureType or an array for custom');\n  }\n}\n\n/**\n * Format Signature to decimal string array\n */\nexport function signatureToDecimalArray(sig?: Signature): ArraySignatureType {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\n\n/**\n * Format Signature to hex string array\n */\nexport function signatureToHexArray(sig?: Signature): ArraySignatureType {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\n\n/**\n * Convert estimated fee to max fee with overhead\n */\nexport function estimatedFeeToMaxFee(estimatedFee: BigNumberish, overhead: number = 0.5): bigint {\n  // BN can only handle Integers, so we need to do all calculations with integers\n  const overHeadPercent = Math.round((1 + overhead) * 100);\n  return (toBigInt(estimatedFee) * toBigInt(overHeadPercent)) / 100n;\n}\n","import { ContractClassResponse } from '../types';\nimport {\n  CairoContract,\n  CompiledSierra,\n  LegacyCompiledContract,\n  LegacyContractClass,\n  SierraContractClass,\n} from '../types/lib/contract/index';\nimport { CompleteDeclareContractPayload, DeclareContractPayload } from '../types/lib/index';\nimport { computeCompiledClassHash, computeContractClassHash } from './hash';\nimport { parse } from './json';\nimport { decompressProgram } from './stark';\n\nexport function isSierra(\n  contract: CairoContract | string\n): contract is SierraContractClass | CompiledSierra {\n  const compiledContract = typeof contract === 'string' ? parse(contract) : contract;\n  return 'sierra_program' in compiledContract;\n}\n\nexport function extractContractHashes(\n  payload: DeclareContractPayload\n): CompleteDeclareContractPayload {\n  const response = { ...payload } as CompleteDeclareContractPayload;\n\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash)\n      throw new Error(\n        'Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash'\n      );\n  }\n\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash)\n    throw new Error('Extract classHash failed, provide (CompiledContract).json file or classHash');\n\n  return response;\n}\n\n/**\n * Helper to redeclare response Cairo0 contract\n */\nexport function contractClassResponseToLegacyCompiledContract(ccr: ContractClassResponse) {\n  if (isSierra(ccr)) {\n    throw Error('ContractClassResponse need to be LegacyContractClass (cairo0 response class)');\n  }\n  const contract = ccr as LegacyContractClass;\n  return { ...contract, program: decompressProgram(contract.program) } as LegacyCompiledContract;\n}\n","import isomorphicFetch from 'isomorphic-fetch';\n\nexport default (typeof window !== 'undefined' && window.fetch) || // use buildin fetch in browser if available\n  (typeof global !== 'undefined' && global.fetch) || // use buildin fetch in node, react-native and service worker if available\n  isomorphicFetch; // ponyfill fetch in node and browsers that don't have it\n","import {\n  CompiledContract,\n  CompiledSierra,\n  ContractClass,\n  LegacyContractClass,\n  SierraContractClass,\n} from '../types';\nimport { isSierra } from './contract';\nimport { formatSpaces } from './hash';\nimport { parse, stringify } from './json';\nimport { compressProgram } from './stark';\n\n/**\n * Helper - Async Sleep for 'delay' time\n */\nexport function wait(delay: number) {\n  return new Promise((res) => {\n    setTimeout(res, delay);\n  });\n}\n\n/**\n * Create Sierra Contract Class from a given Compiled Sierra\n *\n * CompiledSierra -> SierraContractClass\n */\nexport function createSierraContractClass(contract: CompiledSierra): SierraContractClass {\n  const result = { ...contract } as any;\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify(contract.abi));\n  result.sierra_program = formatSpaces(stringify(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\n\n/**\n * Create Contract Class from a given CompiledContract or string\n *\n * (CompiledContract or string) -> ContractClass\n */\nexport function parseContract(contract: CompiledContract | string): ContractClass {\n  const parsedContract =\n    typeof contract === 'string' ? (parse(contract) as CompiledContract) : contract;\n\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...('program' in parsedContract && { program: compressProgram(parsedContract.program) }),\n    } as LegacyContractClass;\n  }\n\n  return createSierraContractClass(parsedContract as CompiledSierra);\n}\n","/**\n * Map RPC Response to common interface response\n * Intersection (sequencer response ∩ (∪ rpc responses))\n */\nimport {\n  BlockStatus,\n  CallContractResponse,\n  ContractClassResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetTransactionResponse,\n  SimulateTransactionResponse,\n} from '../../types';\nimport {\n  BlockWithTxHashes,\n  ContractClass,\n  FeeEstimate,\n  SimulateTransactionResponse as RPCSimulateTransactionResponse,\n  TransactionWithHash,\n} from '../../types/api/rpcspec';\nimport { toBigInt } from '../num';\nimport { estimatedFeeToMaxFee } from '../stark';\nimport { ResponseParser } from '.';\n\nexport class RPCResponseParser\n  implements\n    Omit<\n      ResponseParser,\n      | 'parseDeclareContractResponse'\n      | 'parseDeployContractResponse'\n      | 'parseInvokeFunctionResponse'\n      | 'parseGetTransactionReceiptResponse'\n    >\n{\n  public parseGetBlockResponse(res: BlockWithTxHashes): GetBlockResponse {\n    return {\n      timestamp: res.timestamp,\n      block_hash: 'block_hash' in res ? res.block_hash : '',\n      block_number: 'block_number' in res ? res.block_number : -1,\n      new_root: 'new_root' in res ? res.new_root : '',\n      parent_hash: res.parent_hash,\n      status: 'status' in res ? (res.status as BlockStatus) : BlockStatus.PENDING,\n      transactions: res.transactions,\n    };\n  }\n\n  public parseGetTransactionResponse(res: TransactionWithHash): GetTransactionResponse {\n    return {\n      calldata: 'calldata' in res ? res.calldata : [],\n      contract_address: 'contract_address' in res ? res.contract_address : '',\n      sender_address: 'sender_address' in res ? res.sender_address : '',\n      max_fee: 'max_fee' in res ? res.max_fee : '',\n      nonce: 'nonce' in res ? res.nonce : '',\n      signature: 'signature' in res ? res.signature : [],\n      transaction_hash: res.transaction_hash,\n      version: res.version,\n    };\n  }\n\n  public parseFeeEstimateResponse(res: FeeEstimate[]): EstimateFeeResponse {\n    return {\n      overall_fee: toBigInt(res[0].overall_fee),\n      gas_consumed: toBigInt(res[0].gas_consumed),\n      gas_price: toBigInt(res[0].gas_price),\n    };\n  }\n\n  public parseFeeEstimateBulkResponse(res: FeeEstimate[]): EstimateFeeResponseBulk {\n    return res.map((val) => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price),\n    }));\n  }\n\n  public parseCallContractResponse(res: string[]): CallContractResponse {\n    return {\n      result: res,\n    };\n  }\n\n  public parseSimulateTransactionResponse(\n    res: RPCSimulateTransactionResponse\n  ): SimulateTransactionResponse {\n    return res.map((it) => {\n      return {\n        ...it,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee)),\n      };\n    });\n  }\n\n  public parseContractClassResponse(res: ContractClass): ContractClassResponse {\n    return {\n      ...res,\n      abi: typeof res.abi === 'string' ? JSON.parse(res.abi) : res.abi,\n    };\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nexport function fixStack(target: Error, fn: Function = target.constructor) {\n  const { captureStackTrace } = Error as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  captureStackTrace && captureStackTrace(target, fn);\n}\n\nexport function fixProto(target: Error, prototype: {}) {\n  const { setPrototypeOf } = Object as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-proto, no-param-reassign\n  setPrototypeOf ? setPrototypeOf(target, prototype) : ((target as any).__proto__ = prototype);\n}\n\n/* eslint-disable max-classes-per-file */\nexport class CustomError extends Error {\n  name!: string;\n\n  constructor(message?: string) {\n    super(message);\n    // set error name as constructor name, make it not enumerable to keep native Error behavior\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n    // see https://github.com/adriengibrat/ts-custom-error/issues/30\n    Object.defineProperty(this, 'name', {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true,\n    });\n    // fix the extended error prototype chain\n    // because typescript __extends implementation can't\n    // see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    fixProto(this, new.target.prototype);\n    // try to remove constructor from stack trace\n    fixStack(this);\n  }\n}\n\nexport class LibraryError extends CustomError {}\n\nexport class GatewayError extends LibraryError {\n  constructor(message: string, public errorCode: string) {\n    super(message);\n  }\n}\n\nexport class HttpError extends LibraryError {\n  constructor(message: string, public errorCode: number) {\n    super(message);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { StarknetChainId, ZERO } from '../constants';\n\nconst basicAlphabet = 'abcdefghijklmnopqrstuvwxyz0123456789-';\nconst basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nconst bigAlphabet = '这来';\nconst basicAlphabetSize = BigInt(basicAlphabet.length);\nconst bigAlphabetSize = BigInt(bigAlphabet.length);\nconst bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\n\nfunction extractStars(str: string): [string, number] {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\n\nexport function useDecoded(encoded: bigint[]): string {\n  let decoded = '';\n\n  encoded.forEach((subdomain) => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO) decoded += basicAlphabet[0];\n          else decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else decoded += basicAlphabet[Number(code)];\n    }\n\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded =\n        str +\n        (k % 2 === 0\n          ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) +\n            bigAlphabet[0] +\n            basicAlphabet[1]\n          : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += '.';\n  });\n\n  if (!decoded) {\n    return decoded;\n  }\n\n  return decoded.concat('stark');\n}\n\nexport function useEncoded(decoded: string): bigint {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k) decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n\n    if (index !== -1) {\n      // add encoded + multiplier * index\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        // add 0\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      // add encoded + multiplier * (basicAlphabetSize)\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      // add encoded + multiplier * index\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n\n  return encoded;\n}\n\nexport const enum StarknetIdContract {\n  MAINNET = '0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678',\n  TESTNET = '0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce',\n}\n\nexport function getStarknetIdContract(chainId: StarknetChainId): string {\n  switch (chainId) {\n    case StarknetChainId.SN_MAIN:\n      return StarknetIdContract.MAINNET;\n\n    case StarknetChainId.SN_GOERLI:\n      return StarknetIdContract.TESTNET;\n\n    default:\n      throw new Error('Starknet.id is not yet deployed on this network');\n  }\n}\n","import { BigNumberish } from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getStarknetIdContract, useDecoded, useEncoded } from '../utils/starknetId';\nimport { ProviderInterface } from './interface';\n\nexport async function getStarkName(\n  provider: ProviderInterface,\n  address: BigNumberish,\n  StarknetIdContract?: string\n): Promise<string> {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract ?? getStarknetIdContract(chainId);\n\n  try {\n    const hexDomain = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: 'address_to_domain',\n      calldata: CallData.compile({\n        address,\n      }),\n    });\n    const decimalDomain = hexDomain.result.map((element) => BigInt(element)).slice(1);\n\n    const stringDomain = useDecoded(decimalDomain);\n\n    if (!stringDomain) {\n      throw Error('Starkname not found');\n    }\n\n    return stringDomain;\n  } catch (e) {\n    if (e instanceof Error && e.message === 'Starkname not found') {\n      throw e;\n    }\n    throw Error('Could not get stark name');\n  }\n}\n\nexport async function getAddressFromStarkName(\n  provider: ProviderInterface,\n  name: string,\n  StarknetIdContract?: string\n): Promise<string> {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract ?? getStarknetIdContract(chainId);\n\n  try {\n    const addressData = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: 'domain_to_address',\n      calldata: CallData.compile({\n        domain: [useEncoded(name.replace('.stark', '')).toString(10)],\n      }),\n    });\n\n    return addressData.result[0];\n  } catch {\n    throw Error('Could not get address from stark name');\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport {\n  BigNumberish,\n  BlockIdentifier,\n  BlockNumber,\n  BlockTag,\n  SequencerIdentifier,\n} from '../types';\nimport { isHex, toHex } from '../utils/num';\n\n/** @deprecated prefer importing from 'types' over 'provider/utils' */\nexport type { BlockIdentifier };\n\n/**\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L148-L153)\n */\nexport function formatHash(hashValue: BigNumberish): string {\n  if (typeof hashValue === 'string') return hashValue;\n  return toHex(hashValue);\n}\n\n/**\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L156-L161)\n */\nexport function txIdentifier(txHash?: BigNumberish, txId?: BigNumberish): string {\n  if (!txHash) {\n    return `transactionId=${JSON.stringify(txId)}`;\n  }\n  const hashString = formatHash(txHash);\n\n  return `transactionHash=${hashString}`;\n}\n\nexport const validBlockTags = Object.values(BlockTag);\n\nexport class Block {\n  hash: BlockIdentifier = null;\n\n  number: BlockIdentifier = null;\n\n  tag: BlockIdentifier = null;\n\n  private setIdentifier(__identifier: BlockIdentifier) {\n    if (typeof __identifier === 'string' && isHex(__identifier)) {\n      this.hash = __identifier;\n    } else if (typeof __identifier === 'bigint') {\n      this.hash = toHex(__identifier);\n    } else if (typeof __identifier === 'number') {\n      this.number = __identifier;\n    } else if (\n      typeof __identifier === 'string' &&\n      validBlockTags.includes(__identifier as BlockTag)\n    ) {\n      this.tag = __identifier;\n    } else {\n      // default\n      this.tag = BlockTag.pending;\n    }\n  }\n\n  constructor(_identifier: BlockIdentifier) {\n    this.setIdentifier(_identifier);\n  }\n\n  // TODO: fix any\n  get queryIdentifier(): any {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n\n    return `blockNumber=${this.tag}`;\n  }\n\n  // TODO: fix any\n  get identifier(): any {\n    if (this.number !== null) {\n      return { block_number: this.number };\n    }\n\n    if (this.hash !== null) {\n      return { block_hash: this.hash };\n    }\n\n    return this.tag;\n  }\n\n  set identifier(_identifier: BlockIdentifier) {\n    this.setIdentifier(_identifier);\n  }\n\n  valueOf = () => this.number;\n\n  toString = () => this.hash;\n\n  get sequencerIdentifier(): SequencerIdentifier {\n    return this.hash !== null\n      ? { blockHash: this.hash as string }\n      : { blockNumber: (this.number ?? this.tag) as BlockNumber };\n  }\n}\n","import {\n  HEX_STR_TRANSACTION_VERSION_1,\n  HEX_STR_TRANSACTION_VERSION_2,\n  NetworkName,\n  RPC_GOERLI_NODES,\n  RPC_MAINNET_NODES,\n  StarknetChainId,\n} from '../constants';\nimport {\n  AccountInvocationItem,\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  BlockTag,\n  Call,\n  ContractVersion,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  GetCodeResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  RPC,\n  RpcProviderOptions,\n  TransactionType,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getAbiContractVersion } from '../utils/calldata/cairo';\nimport { isSierra } from '../utils/contract';\nimport fetch from '../utils/fetchPonyfill';\nimport { getSelector, getSelectorFromName, getVersionsByType } from '../utils/hash';\nimport { stringify } from '../utils/json';\nimport { getHexStringArray, toHex, toStorageKey } from '../utils/num';\nimport { wait } from '../utils/provider';\nimport { RPCResponseParser } from '../utils/responseParser/rpc';\nimport { decompressProgram, signatureToHexArray } from '../utils/stark';\nimport { LibraryError } from './errors';\nimport { ProviderInterface } from './interface';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\nimport { Block } from './utils';\n\nexport const getDefaultNodeUrl = (networkName?: NetworkName, mute: boolean = false): string => {\n  if (!mute)\n    // eslint-disable-next-line no-console\n    console.warn('Using default public node url, please provide nodeUrl in provider options!');\n  const nodes = networkName === NetworkName.SN_MAIN ? RPC_MAINNET_NODES : RPC_GOERLI_NODES;\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return nodes[randIdx];\n};\n\nconst defaultOptions = {\n  headers: { 'Content-Type': 'application/json' },\n  blockIdentifier: BlockTag.pending,\n  retries: 200,\n};\n\nexport class RpcProvider implements ProviderInterface {\n  public nodeUrl: string;\n\n  public headers: object;\n\n  private responseParser = new RPCResponseParser();\n\n  private retries: number;\n\n  private blockIdentifier: BlockIdentifier;\n\n  private chainId?: StarknetChainId;\n\n  constructor(optionsOrProvider?: RpcProviderOptions) {\n    const { nodeUrl, retries, headers, blockIdentifier, chainId } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl as NetworkName)) {\n      // Network name provided for nodeUrl\n      this.nodeUrl = getDefaultNodeUrl(nodeUrl as NetworkName, optionsOrProvider?.default);\n    } else if (nodeUrl) {\n      // NodeUrl provided\n      this.nodeUrl = nodeUrl;\n    } else {\n      // none provided fallback to default testnet\n      this.nodeUrl = getDefaultNodeUrl(undefined, optionsOrProvider?.default);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = { ...defaultOptions.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId; // setting to a non-null value skips making a request in getChainId()\n  }\n\n  public fetch(method: string, params?: object, id: string | number = 0) {\n    const rpcRequestBody: RPC.JRPC.RequestBody = {\n      id,\n      jsonrpc: '2.0',\n      method,\n      ...(params && { params }),\n    };\n    return fetch(this.nodeUrl, {\n      method: 'POST',\n      body: stringify(rpcRequestBody),\n      headers: this.headers as Record<string, string>,\n    });\n  }\n\n  protected errorHandler(method: string, params: any, rpcError?: RPC.JRPC.Error, otherError?: any) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify(params)}\\n ${code}: ${message}: ${stringify(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n\n  protected async fetchEndpoint<T extends keyof RPC.Methods>(\n    method: T,\n    params?: RPC.Methods[T]['params']\n  ): Promise<RPC.Methods[T]['result']> {\n    try {\n      const rawResult = await this.fetch(method, params);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result as RPC.Methods[T]['result'];\n    } catch (error: any) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n\n  public async getChainId() {\n    this.chainId ??= (await this.fetchEndpoint('starknet_chainId')) as StarknetChainId;\n    return this.chainId;\n  }\n\n  /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */\n  public async getSpecVersion() {\n    return this.fetchEndpoint('starknet_specVersion');\n  }\n\n  public async getNonceForAddress(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getNonce', {\n      contract_address,\n      block_id,\n    });\n  }\n\n  /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */\n  public async getBlock(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    return this.getBlockWithTxHashes(blockIdentifier).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n\n  /**\n   * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n   */\n  public getBlockHashAndNumber = this.getBlockLatestAccepted;\n\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  public async getBlockLatestAccepted() {\n    return this.fetchEndpoint('starknet_blockHashAndNumber');\n  }\n\n  /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */\n  public async getBlockNumber() {\n    return this.fetchEndpoint('starknet_blockNumber');\n  }\n\n  public async getBlockWithTxHashes(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockWithTxHashes', { block_id });\n  }\n\n  public async getBlockWithTxs(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockWithTxs', { block_id });\n  }\n\n  public async getBlockStateUpdate(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getStateUpdate', { block_id });\n  }\n\n  /**\n   * @deprecated renamed to getBlockStateUpdate();\n   */\n  public getStateUpdate = this.getBlockStateUpdate;\n\n  public async getBlockTransactionsTraces(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_traceBlockTransactions', { block_id });\n  }\n\n  /**\n   * Returns the execution traces of all transactions included in the given block\n   * @deprecated renamed to getBlockTransactionsTraces()\n   */\n  public traceBlockTransactions = this.getBlockTransactionsTraces;\n\n  public async getBlockTransactionCount(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockTransactionCount', { block_id });\n  }\n\n  /**\n   * Get the number of transactions in a block given a block id\n   * @deprecated renamed to getBlockTransactionCount()\n   * @returns Number of transactions\n   */\n  public getTransactionCount = this.getBlockTransactionCount;\n\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */\n  public async getPendingTransactions() {\n    const { transactions } = await this.getBlock(BlockTag.pending);\n    return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));\n  }\n\n  /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */\n  public async getTransaction(txHash: BigNumberish) {\n    return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n  }\n\n  public async getTransactionByHash(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_getTransactionByHash', {\n      transaction_hash,\n    });\n  }\n\n  public async getTransactionByBlockIdAndIndex(blockIdentifier: BlockIdentifier, index: number) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getTransactionByBlockIdAndIndex', { block_id, index });\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_getTransactionReceipt', { transaction_hash });\n  }\n\n  public async getTransactionTrace(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_traceTransaction', { transaction_hash });\n  }\n\n  /**\n   * @deprecated renamed to getTransactionTrace();\n   * For a given executed transaction, return the trace of its execution, including internal calls\n   */\n  public traceTransaction = this.getTransactionTrace;\n\n  /**\n   * NEW: Get the status of a transaction\n   */\n  public async getTransactionStatus(transactionHash: BigNumberish) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint('starknet_getTransactionStatus', { transaction_hash });\n  }\n\n  /**\n   * @deprecated renamed to simulateTransaction();\n   */\n  public getSimulateTransaction = this.simulateTransaction;\n\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  public async simulateTransaction(\n    invocations: AccountInvocations,\n    {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = false,\n      skipFeeCharge = true,\n    }: getSimulateTransactionOptions\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate) simulationFlags.push(RPC.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge) simulationFlags.push(RPC.ESimulationFlag.SKIP_FEE_CHARGE);\n\n    return this.fetchEndpoint('starknet_simulateTransactions', {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags,\n    }).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n\n  public async waitForTransaction(txHash: BigNumberish, options?: waitForTransactionOptions) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5000;\n    const errorStates: any = options?.errorStates ?? [\n      RPC.ETransactionStatus.REJECTED,\n      RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates: any = options?.successStates ?? [\n      RPC.ETransactionExecutionStatus.SUCCEEDED,\n      RPC.ETransactionStatus.ACCEPTED_ON_L2,\n      RPC.ETransactionStatus.ACCEPTED_ON_L1,\n    ];\n\n    let txStatus: RPC.TransactionStatus;\n    while (!onchain) {\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        txStatus = await this.getTransactionStatus(transactionHash);\n\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n\n        if (!finalityStatus) {\n          // Transaction is potentially NOT_RECEIVED or RPC not Synced yet\n          // so we will retry '{ retries }' times\n          const error = new Error('waiting for transaction status');\n          throw error;\n        }\n\n        if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        } else if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message) as Error & { response: RPC.TransactionStatus };\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n\n      retries -= 1;\n    }\n\n    /**\n     * For some nodes even though the transaction has executionStatus SUCCEEDED finalityStatus ACCEPTED_ON_L2, getTransactionReceipt returns \"Transaction hash not found\"\n     * Retry until rpc is actually ready to work with txHash\n     */\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n    }\n    return txReceipt as RPC.TransactionReceipt;\n  }\n\n  public async getStorageAt(\n    contractAddress: BigNumberish,\n    key: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getStorageAt', {\n      contract_address,\n      key: parsedKey,\n      block_id,\n    });\n  }\n\n  public async getClassHashAt(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClassHashAt', {\n      block_id,\n      contract_address,\n    });\n  }\n\n  public async getClassByHash(classHash: BigNumberish) {\n    return this.getClass(classHash);\n  }\n\n  public async getClass(\n    classHash: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClass', {\n      class_hash,\n      block_id,\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n\n  public async getClassAt(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClassAt', {\n      block_id,\n      contract_address,\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n\n  public async getCode(\n    _contractAddress: string,\n    _blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse> {\n    throw new Error('RPC does not implement getCode function');\n  }\n\n  public async getContractVersion(\n    contractAddress: BigNumberish,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: BigNumberish,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: BigNumberish,\n    classHash?: BigNumberish,\n    { blockIdentifier = this.blockIdentifier, compiler = true }: getContractVersionOptions = {}\n  ): Promise<ContractVersion> {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error('getContractVersion require contractAddress or classHash');\n    }\n\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: '1', compiler: abiTest.compiler };\n      }\n      return { cairo: '1', compiler: undefined };\n    }\n    return { cairo: '0', compiler: '0' };\n  }\n\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  public async getEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n  }\n\n  public async getInvokeEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.INVOKE,\n        ...invocation,\n        ...invocationDetails,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getDeclareEstimateFee(\n    invocation: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DECLARE,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getDeployAccountEstimateFee(\n    invocation: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DEPLOY_ACCOUNT,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    { blockIdentifier = this.blockIdentifier, skipValidate = false }: getEstimateFeeBulkOptions\n  ) {\n    if (skipValidate) {\n      // eslint-disable-next-line no-console\n      console.warn('getEstimateFeeBulk RPC does not support skipValidate');\n    }\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: invocations.map((it) => this.buildTransaction(it, 'fee')),\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ) {\n    return this.fetchEndpoint('starknet_addInvokeTransaction', {\n      invoke_transaction: {\n        sender_address: functionInvocation.contractAddress,\n        calldata: CallData.toHex(functionInvocation.calldata),\n        type: RPC.ETransactionType.INVOKE,\n        max_fee: toHex(details.maxFee || 0),\n        version: '0x1',\n        signature: signatureToHexArray(functionInvocation.signature),\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async declareContract(\n    { contract, signature, senderAddress, compiledClassHash }: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint('starknet_addDeclareTransaction', {\n        declare_transaction: {\n          type: RPC.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi,\n          },\n          version: HEX_STR_TRANSACTION_VERSION_1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce),\n        },\n      });\n    }\n    return this.fetchEndpoint('starknet_addDeclareTransaction', {\n      declare_transaction: {\n        type: RPC.ETransactionType.DECLARE,\n        contract_class: {\n          sierra_program: decompressProgram(contract.sierra_program),\n          contract_class_version: contract.contract_class_version,\n          entry_points_by_type: contract.entry_points_by_type,\n          abi: contract.abi,\n        },\n        compiled_class_hash: compiledClassHash || '',\n        version: HEX_STR_TRANSACTION_VERSION_2,\n        max_fee: toHex(details.maxFee || 0),\n        signature: signatureToHexArray(signature),\n        sender_address: senderAddress,\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async deployAccountContract(\n    { classHash, constructorCalldata, addressSalt, signature }: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ) {\n    return this.fetchEndpoint('starknet_addDeployAccountTransaction', {\n      deploy_account_transaction: {\n        constructor_calldata: CallData.toHex(constructorCalldata || []),\n        class_hash: toHex(classHash),\n        contract_address_salt: toHex(addressSalt || 0),\n        type: RPC.ETransactionType.DEPLOY_ACCOUNT,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(details.version || 0),\n        signature: signatureToHexArray(signature),\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async callContract(call: Call, blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const result = await this.fetchEndpoint('starknet_call', {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata),\n      },\n      block_id,\n    });\n\n    return this.responseParser.parseCallContractResponse(result);\n  }\n\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  public async estimateMessageFee(\n    message: RPC.L1Message,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: toHex(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload),\n    };\n\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_estimateMessageFee', {\n      message: formattedMessage,\n      block_id,\n    });\n  }\n\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  public async getSyncingStats() {\n    return this.fetchEndpoint('starknet_syncing');\n  }\n\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  public async getEvents(eventFilter: RPC.EventFilter) {\n    return this.fetchEndpoint('starknet_getEvents', { filter: eventFilter });\n  }\n\n  /**\n   * StarknetId Endpoint (get name from address)\n   */\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string) {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  /**\n   * StarknetId Endpoint (get address from name)\n   */\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string) {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  public buildTransaction(\n    invocation: AccountInvocationItem,\n    versionType?: 'fee' | 'transaction'\n  ): RPC.BaseTransaction {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToHexArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n      max_fee: toHex(invocation.maxFee || 0),\n    };\n\n    if (invocation.type === TransactionType.INVOKE) {\n      return {\n        type: RPC.ETransactionType.INVOKE, // Diff between sequencer and rpc invoke type\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DECLARE) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details,\n        };\n      }\n      return {\n        // compiled_class_hash\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program),\n        },\n        compiled_class_hash: invocation.compiledClassHash || '',\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DEPLOY_ACCOUNT) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    throw Error('RPC buildTransaction received unknown TransactionType');\n  }\n}\n","import urljoin from 'url-join';\n\nimport { BaseUrl, NetworkName, StarknetChainId } from '../constants';\nimport {\n  AccountInvocationItem,\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  BlockTag,\n  CairoAssembly,\n  Call,\n  CallContractResponse,\n  CallL1Handler,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetContractAddressesResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  GetTransactionStatusResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Sequencer,\n  SequencerHttpMethod,\n  SequencerProviderOptions,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  TransactionExecutionStatus,\n  TransactionFinalityStatus,\n  TransactionType,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getAbiContractVersion } from '../utils/calldata/cairo';\nimport { isSierra } from '../utils/contract';\nimport fetch from '../utils/fetchPonyfill';\nimport {\n  getSelector,\n  getSelectorFromName,\n  getVersionsByType,\n  transactionVersion,\n  transactionVersion_2,\n} from '../utils/hash';\nimport { parse, parseAlwaysAsBig, stringify } from '../utils/json';\nimport { getDecimalString, getHexString, getHexStringArray, toBigInt, toHex } from '../utils/num';\nimport { wait } from '../utils/provider';\nimport { SequencerAPIResponseParser } from '../utils/responseParser/sequencer';\nimport { randomAddress, signatureToDecimalArray } from '../utils/stark';\nimport { buildUrl } from '../utils/url';\nimport { GatewayError, HttpError, LibraryError } from './errors';\nimport { ProviderInterface } from './interface';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\nimport { Block } from './utils';\n\nfunction isEmptyQueryObject(obj?: Record<any, any>): obj is undefined {\n  return (\n    obj === undefined ||\n    Object.keys(obj).length === 0 ||\n    (Object.keys(obj).length === 1 &&\n      Object.entries(obj).every(([k, v]) => k === 'blockIdentifier' && v === null))\n  );\n}\n\nconst defaultOptions = {\n  network: NetworkName.SN_GOERLI,\n  blockIdentifier: BlockTag.pending,\n};\n/**\n * @deprecated Feeder gateway will be removed during November 2023, as Network is switching to P2P Nodes.\n * Use RPC Provider or Default provider (Default provider will be RPC Provider with public nodes and legacy interface/response)\n */\nexport class SequencerProvider implements ProviderInterface {\n  public baseUrl: string;\n\n  public feederGatewayUrl: string;\n\n  public gatewayUrl: string;\n\n  public headers?: Record<string, string>;\n\n  private blockIdentifier: BlockIdentifier;\n\n  private chainId: StarknetChainId;\n\n  private responseParser = new SequencerAPIResponseParser();\n\n  constructor(optionsOrProvider: SequencerProviderOptions = defaultOptions) {\n    if ('network' in optionsOrProvider) {\n      this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n      this.feederGatewayUrl = buildUrl(this.baseUrl, 'feeder_gateway');\n      this.gatewayUrl = buildUrl(this.baseUrl, 'gateway');\n    } else {\n      this.baseUrl = optionsOrProvider.baseUrl;\n      this.feederGatewayUrl = buildUrl(\n        this.baseUrl,\n        'feeder_gateway',\n        optionsOrProvider.feederGatewayUrl\n      );\n      this.gatewayUrl = buildUrl(this.baseUrl, 'gateway', optionsOrProvider.gatewayUrl);\n    }\n    this.chainId =\n      optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n    this.headers = optionsOrProvider.headers;\n    this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions.blockIdentifier;\n  }\n\n  protected static getNetworkFromName(name: NetworkName | StarknetChainId) {\n    switch (name) {\n      case NetworkName.SN_MAIN:\n      case StarknetChainId.SN_MAIN:\n        return BaseUrl.SN_MAIN;\n      case NetworkName.SN_GOERLI:\n      case StarknetChainId.SN_GOERLI:\n        return BaseUrl.SN_GOERLI;\n      default:\n        throw new Error('Could not detect base url from NetworkName');\n    }\n  }\n\n  protected static getChainIdFromBaseUrl(baseUrl: string): StarknetChainId {\n    try {\n      const url = new URL(baseUrl);\n      if (url.host.includes('mainnet.starknet.io')) {\n        return StarknetChainId.SN_MAIN;\n      }\n      return StarknetChainId.SN_GOERLI;\n    } catch {\n      // eslint-disable-next-line no-console\n      console.error(`Could not parse baseUrl: ${baseUrl}`);\n      return StarknetChainId.SN_GOERLI;\n    }\n  }\n\n  private getFetchUrl(endpoint: keyof Sequencer.Endpoints) {\n    const gatewayUrlEndpoints = ['add_transaction'];\n    return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n  }\n\n  private getFetchMethod(endpoint: keyof Sequencer.Endpoints) {\n    const postMethodEndpoints = [\n      'add_transaction',\n      'call_contract',\n      'estimate_fee',\n      'estimate_message_fee',\n      'estimate_fee_bulk',\n      'simulate_transaction',\n    ];\n\n    return postMethodEndpoints.includes(endpoint) ? 'POST' : 'GET';\n  }\n\n  private getQueryString(query?: Record<string, any>): string {\n    if (isEmptyQueryObject(query)) {\n      return '';\n    }\n    const queryString = Object.entries(query)\n      .map(([key, value]) => {\n        if (key === 'blockIdentifier') {\n          const block = new Block(value);\n          return `${block.queryIdentifier}`;\n        }\n        return `${key}=${value}`;\n      })\n      .join('&');\n\n    return `?${queryString}`;\n  }\n\n  private getHeaders(method: SequencerHttpMethod): Record<string, string> | undefined {\n    if (method === 'POST') {\n      return {\n        'Content-Type': 'application/json',\n        ...this.headers,\n      };\n    }\n    return this.headers;\n  }\n\n  // typesafe fetch\n  protected async fetchEndpoint<T extends keyof Sequencer.Endpoints>(\n    endpoint: T,\n    // typescript type magic to create a nice fitting function interface\n    ...[query, request]: Sequencer.Endpoints[T]['QUERY'] extends never\n      ? Sequencer.Endpoints[T]['REQUEST'] extends never\n        ? [] // when no query and no request is needed, we can omit the query and request parameters\n        : [undefined, Sequencer.Endpoints[T]['REQUEST']]\n      : Sequencer.Endpoints[T]['REQUEST'] extends never\n      ? [Sequencer.Endpoints[T]['QUERY']] // when no request is needed, we can omit the request parameter\n      : [Sequencer.Endpoints[T]['QUERY'], Sequencer.Endpoints[T]['REQUEST']] // when both query and request are needed, we cant omit anything\n  ): Promise<Sequencer.Endpoints[T]['RESPONSE']> {\n    const baseUrl = this.getFetchUrl(endpoint);\n    const method = this.getFetchMethod(endpoint);\n    const queryString = this.getQueryString(query);\n    const url = urljoin(baseUrl, endpoint, queryString);\n\n    return this.fetch(url, {\n      method,\n      body: request,\n    });\n  }\n\n  public async fetch(\n    endpoint: string,\n    options?: {\n      method?: SequencerHttpMethod;\n      body?: any;\n      parseAlwaysAsBigInt?: boolean;\n    }\n  ): Promise<any> {\n    const url = buildUrl(this.baseUrl, '', endpoint);\n    const method = options?.method ?? 'GET';\n    const headers = this.getHeaders(method);\n    const body = stringify(options?.body);\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n      });\n      const textResponse = await response.text();\n\n      if (!response.ok) {\n        // This will allow the user to handle contract errors\n        let responseBody: any;\n        try {\n          responseBody = parse(textResponse);\n        } catch {\n          throw new HttpError(response.statusText, response.status);\n        }\n        throw new GatewayError(responseBody.message, responseBody.code);\n      }\n\n      const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse;\n      return parseChoice(textResponse);\n    } catch (error) {\n      if (error instanceof Error && !(error instanceof LibraryError))\n        throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n\n      throw error;\n    }\n  }\n\n  public async getChainId(): Promise<StarknetChainId> {\n    return Promise.resolve(this.chainId);\n  }\n\n  public async callContract(\n    { contractAddress, entrypoint: entryPointSelector, calldata = [] }: Call,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<CallContractResponse> {\n    return this.fetchEndpoint(\n      'call_contract',\n      { blockIdentifier },\n      {\n        // TODO - determine best choice once both are fully supported in devnet\n        // signature: [],\n        // sender_address: contractAddress,\n        contract_address: contractAddress,\n        entry_point_selector: getSelectorFromName(entryPointSelector),\n        calldata: CallData.compile(calldata),\n      }\n    ).then(this.responseParser.parseCallContractResponse);\n  }\n\n  public async getBlock(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<GetBlockResponse> {\n    return this.fetchEndpoint('get_block', { blockIdentifier }).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n\n  public async getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.Nonce> {\n    return this.fetchEndpoint('get_nonce', { contractAddress, blockIdentifier });\n  }\n\n  public async getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.Storage> {\n    const parsedKey = toBigInt(key).toString(10);\n    return this.fetchEndpoint('get_storage_at', {\n      blockIdentifier,\n      contractAddress,\n      key: parsedKey,\n    });\n  }\n\n  public async getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction', { transactionHash: txHashHex }).then((result) => {\n      // throw for no matching transaction to unify behavior with RPC and avoid parsing errors\n      if (Object.values(result).length === 1) throw new LibraryError(result.status);\n      return this.responseParser.parseGetTransactionResponse(result);\n    });\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_receipt', { transactionHash: txHashHex }).then(\n      this.responseParser.parseGetTransactionReceiptResponse\n    );\n  }\n\n  public async getClassAt(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.fetchEndpoint('get_full_contract', { blockIdentifier, contractAddress }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n\n  public async getClassHashAt(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<string> {\n    return this.fetchEndpoint('get_class_hash_at', { blockIdentifier, contractAddress });\n  }\n\n  public async getClassByHash(\n    classHash: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.fetchEndpoint('get_class_by_hash', { classHash, blockIdentifier }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n\n  public async getCompiledClassByClassHash(\n    classHash: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<CairoAssembly> {\n    return this.fetchEndpoint('get_compiled_class_by_class_hash', { classHash, blockIdentifier });\n  }\n\n  public async getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: string,\n    classHash?: string,\n    { blockIdentifier = this.blockIdentifier, compiler = true }: getContractVersionOptions = {}\n  ): Promise<ContractVersion> {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClassByHash(classHash, blockIdentifier);\n    } else {\n      throw Error('getContractVersion require contractAddress or classHash');\n    }\n\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: '1', compiler: abiTest.compiler };\n      }\n      return { cairo: '1', compiler: undefined };\n    }\n    return { cairo: '0', compiler: '0' };\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse> {\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.INVOKE,\n      sender_address: functionInvocation.contractAddress,\n      calldata: CallData.compile(functionInvocation.calldata ?? []),\n      signature: signatureToDecimalArray(functionInvocation.signature),\n      nonce: toHex(details.nonce),\n      max_fee: toHex(details.maxFee || 0),\n      version: '0x1',\n    }).then(this.responseParser.parseInvokeFunctionResponse);\n  }\n\n  public async deployAccountContract(\n    { classHash, constructorCalldata, addressSalt, signature }: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse> {\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.DEPLOY_ACCOUNT,\n      contract_address_salt: addressSalt ?? randomAddress(),\n      constructor_calldata: CallData.compile(constructorCalldata ?? []),\n      class_hash: toHex(classHash),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(details.version || 0),\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n    }).then(this.responseParser.parseDeployContractResponse);\n  }\n\n  public async declareContract(\n    { senderAddress, contract, signature, compiledClassHash }: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse> {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint('add_transaction', undefined, {\n        type: TransactionType.DECLARE,\n        contract_class: contract,\n        nonce: toHex(details.nonce),\n        signature: signatureToDecimalArray(signature),\n        sender_address: senderAddress,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(transactionVersion),\n      }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    // Cairo 1\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.DECLARE,\n      sender_address: senderAddress,\n      compiled_class_hash: compiledClassHash,\n      contract_class: contract,\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(transactionVersion_2),\n    }).then(this.responseParser.parseDeclareContractResponse);\n  }\n\n  public async getEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n\n  public async getInvokeEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.INVOKE,\n        ...invocation,\n        ...invocationDetails,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getDeclareEstimateFee(\n    invocation: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DECLARE,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getDeployAccountEstimateFee(\n    invocation: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DEPLOY_ACCOUNT,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    { blockIdentifier = this.blockIdentifier, skipValidate = false }: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk> {\n    const transactions = invocations.map((it) => this.buildTransaction(it, 'fee'));\n    return this.fetchEndpoint(\n      'estimate_fee_bulk',\n      { blockIdentifier, skipValidate },\n      transactions\n    ).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n\n  public async getCode(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.GetCodeResponse> {\n    return this.fetchEndpoint('get_code', { contractAddress, blockIdentifier });\n  }\n\n  public async waitForTransaction(txHash: BigNumberish, options?: waitForTransactionOptions) {\n    let res;\n    let completed = false;\n    let retries = 0;\n    const retryInterval = options?.retryInterval ?? 5000;\n    const errorStates = options?.errorStates ?? [\n      TransactionExecutionStatus.REJECTED,\n      TransactionFinalityStatus.NOT_RECEIVED,\n      TransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      TransactionExecutionStatus.SUCCEEDED,\n      TransactionFinalityStatus.ACCEPTED_ON_L1,\n      TransactionFinalityStatus.ACCEPTED_ON_L2,\n    ];\n\n    while (!completed) {\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n      // eslint-disable-next-line no-await-in-loop\n      res = await this.getTransactionStatus(txHash);\n\n      if (TransactionFinalityStatus.NOT_RECEIVED === res.finality_status && retries < 3) {\n        retries += 1;\n      } else if (\n        successStates.includes(res.finality_status) ||\n        successStates.includes(res.execution_status)\n      ) {\n        completed = true;\n      } else if (\n        errorStates.includes(res.finality_status) ||\n        errorStates.includes(res.execution_status)\n      ) {\n        let message;\n        if (res.tx_failure_reason) {\n          message = `${res.tx_status}: ${res.tx_failure_reason.code}\\n${res.tx_failure_reason.error_message}`;\n        } else if (res.tx_revert_reason) {\n          message = `${res.tx_status}: ${res.tx_revert_reason}`;\n        } else {\n          message = res.tx_status;\n        }\n        const error = new Error(message) as Error & { response: GetTransactionStatusResponse };\n        error.response = res;\n        throw error;\n      }\n    }\n    const txReceipt = await this.getTransactionReceipt(txHash);\n    return txReceipt;\n  }\n\n  /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */\n  public async getTransactionStatus(txHash: BigNumberish): Promise<GetTransactionStatusResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_status', { transactionHash: txHashHex });\n  }\n\n  /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */\n  public async getContractAddresses(): Promise<GetContractAddressesResponse> {\n    return this.fetchEndpoint('get_contract_addresses');\n  }\n\n  /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */\n  public async getTransactionTrace(\n    txHash: BigNumberish\n  ): Promise<Sequencer.TransactionTraceResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_trace', { transactionHash: txHashHex });\n  }\n\n  public async estimateMessageFee(\n    { from_address, to_address, entry_point_selector, payload }: CallL1Handler,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.EstimateFeeResponse> {\n    const validCallL1Handler = {\n      from_address: getDecimalString(from_address),\n      to_address: getHexString(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload),\n    };\n\n    return this.fetchEndpoint('estimate_message_fee', { blockIdentifier }, validCallL1Handler);\n  }\n\n  /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */\n  public async getSimulateTransaction(\n    invocations: AccountInvocations,\n    {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = false,\n      skipExecute = false,\n    }: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse> {\n    if (invocations.length > 1) {\n      // eslint-disable-next-line no-console\n      console.warn('Sequencer simulate process only first element from invocations list');\n    }\n    if (skipExecute) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Sequencer can't skip account __execute__\");\n    }\n    const transaction = this.buildTransaction(invocations[0]);\n    return this.fetchEndpoint(\n      'simulate_transaction',\n      {\n        blockIdentifier,\n        skipValidate: skipValidate ?? false,\n      },\n      transaction\n    ).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n\n  public async getStateUpdate(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<StateUpdateResponse> {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint('get_state_update', { ...args }).then(\n      this.responseParser.parseGetStateUpdateResponse\n    );\n  }\n\n  // consider adding an optional trace retrieval parameter to the getBlock method\n  public async getBlockTraces(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.BlockTransactionTracesResponse> {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint('get_block_traces', { ...args });\n  }\n\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string): Promise<string> {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string): Promise<string> {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */\n  public buildTransaction(\n    invocation: AccountInvocationItem,\n    versionType?: 'fee' | 'transaction'\n  ): Sequencer.AccountTransactionItem {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToDecimalArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n    };\n\n    if (invocation.type === TransactionType.INVOKE) {\n      return {\n        type: invocation.type,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.compile(invocation.calldata ?? []),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DECLARE) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1), // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n          ...details,\n        };\n      }\n      return {\n        type: invocation.type,\n        contract_class: invocation.contract,\n        compiled_class_hash: invocation.compiledClassHash,\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2), // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DEPLOY_ACCOUNT) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    throw Error('Sequencer buildTransaction received unknown TransactionType');\n  }\n}\n","import {\n  CallContractResponse,\n  DeclareContractResponse,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  GetBlockResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  InvokeFunctionResponse,\n  SimulateTransactionResponse,\n} from '../../types';\n\nexport abstract class ResponseParser {\n  abstract parseGetBlockResponse(res: any): GetBlockResponse;\n\n  abstract parseGetTransactionResponse(res: any): GetTransactionResponse;\n\n  abstract parseGetTransactionReceiptResponse(res: any): GetTransactionReceiptResponse;\n\n  abstract parseFeeEstimateResponse(res: any): EstimateFeeResponse;\n\n  abstract parseCallContractResponse(res: any): CallContractResponse;\n\n  abstract parseInvokeFunctionResponse(res: any): InvokeFunctionResponse;\n\n  abstract parseDeployContractResponse(res: any): DeployContractResponse;\n\n  abstract parseDeclareContractResponse(res: any): DeclareContractResponse;\n\n  abstract parseSimulateTransactionResponse(res: any): SimulateTransactionResponse;\n}\n","/**\n * Map Sequencer Response to common interface response\n * Intersection (sequencer response ∩ (∪ rpc responses))\n */\n\nimport { LibraryError } from '../../provider/errors';\nimport {\n  CallContractResponse,\n  CompiledContract,\n  ContractClassResponse,\n  DeclareContractResponse,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  HexCalldata,\n  InvokeFunctionResponse,\n  Sequencer,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  TransactionFinalityStatus,\n  TransactionStatus,\n} from '../../types';\nimport { isSierra } from '../contract';\nimport { toBigInt } from '../num';\nimport { parseContract } from '../provider';\nimport { estimatedFeeToMaxFee } from '../stark';\nimport { ResponseParser } from '.';\n\nexport class SequencerAPIResponseParser extends ResponseParser {\n  public parseGetBlockResponse(res: Sequencer.GetBlockResponse): GetBlockResponse {\n    return {\n      ...res,\n      new_root: res.state_root,\n      parent_hash: res.parent_block_hash,\n      transactions: Object.values(res.transactions)\n        .map((value) => 'transaction_hash' in value && value.transaction_hash)\n        .filter(Boolean) as Array<string>,\n    };\n  }\n\n  public parseGetTransactionResponse(\n    res: Sequencer.GetTransactionResponse\n  ): GetTransactionResponse {\n    if (\n      res.status === TransactionStatus.NOT_RECEIVED &&\n      res.finality_status === TransactionFinalityStatus.NOT_RECEIVED\n    ) {\n      throw new LibraryError();\n    }\n\n    return {\n      ...res,\n      calldata: 'calldata' in res.transaction ? (res.transaction.calldata as HexCalldata) : [],\n      contract_class:\n        'contract_class' in res.transaction ? (res.transaction.contract_class as any) : undefined,\n      entry_point_selector:\n        'entry_point_selector' in res.transaction\n          ? res.transaction.entry_point_selector\n          : undefined,\n      max_fee: 'max_fee' in res.transaction ? (res.transaction.max_fee as string) : undefined,\n      nonce: res.transaction.nonce as string,\n      sender_address:\n        'sender_address' in res.transaction\n          ? (res.transaction.sender_address as string)\n          : undefined,\n      signature: 'signature' in res.transaction ? res.transaction.signature : undefined,\n      transaction_hash:\n        'transaction_hash' in res.transaction ? res.transaction.transaction_hash : undefined,\n      version: 'version' in res.transaction ? (res.transaction.version as string) : undefined,\n    };\n  }\n\n  public parseGetTransactionReceiptResponse(\n    res: Sequencer.TransactionReceiptResponse\n  ): GetTransactionReceiptResponse {\n    return {\n      ...res,\n      messages_sent: res.l2_to_l1_messages as any,\n      ...('revert_error' in res && { revert_reason: res.revert_error }),\n    };\n  }\n\n  public parseFeeEstimateResponse(res: Sequencer.EstimateFeeResponse): EstimateFeeResponse {\n    if ('overall_fee' in res) {\n      let gasInfo = {};\n\n      try {\n        gasInfo = {\n          gas_consumed: toBigInt(res.gas_usage),\n          gas_price: toBigInt(res.gas_price),\n        };\n      } catch {\n        // do nothing\n      }\n\n      return {\n        overall_fee: toBigInt(res.overall_fee),\n        ...gasInfo,\n      };\n    }\n    return {\n      overall_fee: toBigInt(res.amount),\n    };\n  }\n\n  public parseFeeEstimateBulkResponse(\n    res: Sequencer.EstimateFeeResponseBulk\n  ): EstimateFeeResponseBulk {\n    return [].concat(res as []).map((item: Sequencer.EstimateFeeResponse) => {\n      if ('overall_fee' in item) {\n        let gasInfo = {};\n\n        try {\n          gasInfo = {\n            gas_consumed: toBigInt(item.gas_usage),\n            gas_price: toBigInt(item.gas_price),\n          };\n        } catch {\n          // do nothing\n        }\n\n        return {\n          overall_fee: toBigInt(item.overall_fee),\n          ...gasInfo,\n        };\n      }\n      return {\n        overall_fee: toBigInt(item.amount),\n      };\n    });\n  }\n\n  public parseSimulateTransactionResponse(\n    res: Sequencer.SimulateTransactionResponse\n  ): SimulateTransactionResponse {\n    const suggestedMaxFee =\n      'overall_fee' in res.fee_estimation\n        ? res.fee_estimation.overall_fee\n        : res.fee_estimation.amount;\n    return [\n      {\n        transaction_trace: res.trace,\n        fee_estimation: res.fee_estimation,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee)),\n      },\n    ];\n  }\n\n  public parseCallContractResponse(res: Sequencer.CallContractResponse): CallContractResponse {\n    return {\n      result: res.result,\n    };\n  }\n\n  public parseInvokeFunctionResponse(\n    res: Sequencer.AddTransactionResponse\n  ): InvokeFunctionResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n    };\n  }\n\n  public parseDeployContractResponse(\n    res: Sequencer.AddTransactionResponse\n  ): DeployContractResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n      contract_address: res.address as string,\n    };\n  }\n\n  public parseDeclareContractResponse(\n    res: Sequencer.AddTransactionResponse\n  ): DeclareContractResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n      class_hash: res.class_hash as string,\n    };\n  }\n\n  public parseGetStateUpdateResponse(res: Sequencer.StateUpdateResponse): StateUpdateResponse {\n    const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({\n      contract_address,\n      nonce,\n    }));\n    const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(\n      ([address, storage_entries]) => ({ address, storage_entries })\n    );\n\n    return {\n      ...res,\n      state_diff: {\n        ...res.state_diff,\n        storage_diffs,\n        nonces,\n      },\n    };\n  }\n\n  public parseContractClassResponse(res: CompiledContract): ContractClassResponse {\n    const response = isSierra(res) ? res : parseContract(res);\n    return {\n      ...response,\n      abi: typeof response.abi === 'string' ? JSON.parse(response.abi) : response.abi,\n    };\n  }\n}\n","import urljoin from 'url-join';\n\n/**\n * Inspired from https://github.com/segmentio/is-url\n */\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\nconst protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nconst localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nconst nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n */\nexport function isUrl(s?: string): boolean {\n  if (!s) {\n    return false;\n  }\n\n  if (typeof s !== 'string') {\n    return false;\n  }\n\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (\n    localhostDomainRE.test(everythingAfterProtocol) ||\n    nonLocalhostDomainRE.test(everythingAfterProtocol)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function buildUrl(baseUrl: string, defaultPath: string, urlOrPath?: string) {\n  return isUrl(urlOrPath) ? urlOrPath! : urljoin(baseUrl, urlOrPath ?? defaultPath);\n}\n","import { StarknetChainId } from '../constants';\nimport {\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  Call,\n  CallContractResponse,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetCodeResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Nonce,\n  ProviderOptions,\n  RpcProviderOptions,\n  SequencerProviderOptions,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  Storage,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { ProviderInterface } from './interface';\nimport { RpcProvider } from './rpc';\nimport { SequencerProvider } from './sequencer';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\n\n/**\n * @deprecated Use RpcProvider instead. Common Provider will be removed with Sequencer provider.\n */\nexport class Provider implements ProviderInterface {\n  private provider!: ProviderInterface;\n\n  constructor(providerOrOptions?: ProviderOptions | ProviderInterface) {\n    if (providerOrOptions instanceof Provider) {\n      // providerOrOptions is Provider\n      this.provider = providerOrOptions.provider;\n    } else if (\n      providerOrOptions instanceof RpcProvider ||\n      providerOrOptions instanceof SequencerProvider\n    ) {\n      // providerOrOptions is SequencerProvider or RpcProvider\n      this.provider = <ProviderInterface>providerOrOptions;\n    } else if (providerOrOptions && 'rpc' in providerOrOptions) {\n      // providerOrOptions is rpc option\n      this.provider = new RpcProvider(<RpcProviderOptions>providerOrOptions.rpc);\n    } else if (providerOrOptions && 'sequencer' in providerOrOptions) {\n      // providerOrOptions is sequencer option\n      this.provider = new SequencerProvider(<SequencerProviderOptions>providerOrOptions.sequencer);\n    } else {\n      // providerOrOptions is none, create SequencerProvider as default\n      this.provider = new RpcProvider();\n    }\n  }\n\n  public async getChainId(): Promise<StarknetChainId> {\n    return this.provider.getChainId();\n  }\n\n  public async getBlock(blockIdentifier: BlockIdentifier): Promise<GetBlockResponse> {\n    return this.provider.getBlock(blockIdentifier);\n  }\n\n  public async getClassAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.provider.getClassAt(contractAddress, blockIdentifier);\n  }\n\n  public async getClassHashAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<string> {\n    return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n  }\n\n  public getClassByHash(classHash: string): Promise<ContractClassResponse> {\n    return this.provider.getClassByHash(classHash);\n  }\n\n  public async getEstimateFee(\n    invocationWithTxType: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n  }\n\n  public async getInvokeEstimateFee(\n    invocationWithTxType: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getInvokeEstimateFee(\n      invocationWithTxType,\n      invocationDetails,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    options: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk> {\n    return this.provider.getEstimateFeeBulk(invocations, options);\n  }\n\n  public async getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Nonce> {\n    return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n\n  public async getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Storage> {\n    return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n\n  public async getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse> {\n    return this.provider.getTransaction(txHash);\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse> {\n    return this.provider.getTransactionReceipt(txHash);\n  }\n\n  public async callContract(\n    request: Call,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<CallContractResponse> {\n    return this.provider.callContract(request, blockIdentifier);\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse> {\n    return this.provider.invokeFunction(functionInvocation, details);\n  }\n\n  public async deployAccountContract(\n    payload: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse> {\n    return this.provider.deployAccountContract(payload, details);\n  }\n\n  public async declareContract(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse> {\n    return this.provider.declareContract(transaction, details);\n  }\n\n  public async getDeclareEstimateFee(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n\n  public getDeployAccountEstimateFee(\n    transaction: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getDeployAccountEstimateFee(\n      transaction,\n      details,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n\n  public async getCode(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse> {\n    return this.provider.getCode(contractAddress, blockIdentifier);\n  }\n\n  public async waitForTransaction(\n    txHash: BigNumberish,\n    options?: waitForTransactionOptions\n  ): Promise<GetTransactionReceiptResponse> {\n    return this.provider.waitForTransaction(txHash, options);\n  }\n\n  public async getSimulateTransaction(\n    invocations: AccountInvocations,\n    options?: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse> {\n    return this.provider.getSimulateTransaction(invocations, options);\n  }\n\n  public async getStateUpdate(blockIdentifier?: BlockIdentifier): Promise<StateUpdateResponse> {\n    return this.provider.getStateUpdate(blockIdentifier);\n  }\n\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string): Promise<string> {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string): Promise<string> {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  public async getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: string,\n    classHash?: string,\n    options?: getContractVersionOptions\n  ) {\n    return this.provider.getContractVersion(contractAddress as any, classHash as any, options);\n  }\n}\n","import {\n  Abi,\n  Call,\n  DeclareSignerDetails,\n  DeployAccountSignerDetails,\n  InvocationsSignerDetails,\n  Signature,\n  TypedData,\n} from '../types';\n\nexport abstract class SignerInterface {\n  /**\n   * Method to get the public key of the signer\n   *\n   * @returns public key of signer as hex string with 0x prefix\n   */\n  public abstract getPubKey(): Promise<string>;\n\n  /**\n   * Sign an JSON object for off-chain usage with the starknet private key and return the signature\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param typedData - JSON object to be signed\n   * @param accountAddress - account\n   * @returns the signature of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract signMessage(typedData: TypedData, accountAddress: string): Promise<Signature>;\n\n  /**\n   * Signs a transaction with the starknet private key and returns the signature\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * @param abi (optional) the abi of the contract for better displaying\n   *\n   * @returns signature\n   */\n  public abstract signTransaction(\n    transactions: Call[],\n    transactionsDetail: InvocationsSignerDetails,\n    abis?: Abi[]\n  ): Promise<Signature>;\n\n  /**\n   * Signs a DEPLOY_ACCOUNT transaction with the starknet private key and returns the signature\n   *\n   * @param transaction\n   * - contractAddress - the computed address of the contract\n   * - constructorCalldata - calldata to be passed in deploy constructor\n   * - addressSalt - contract address salt\n   * - chainId - the chainId to declare contract on\n   * - maxFee - maxFee for the declare transaction\n   * - version - transaction version\n   * - nonce - Nonce of the declare transaction\n   * @returns signature\n   */\n  public abstract signDeployAccountTransaction(\n    transaction: DeployAccountSignerDetails\n  ): Promise<Signature>;\n\n  /**\n   * Signs a DECLARE transaction with the starknet private key and returns the signature\n   *\n   * @param transaction\n   * - classHash - computed class hash. Will be replaced by ContractClass in future once class hash is present in CompiledContract\n   * - senderAddress - the address of the sender\n   * - chainId - the chainId to declare contract on\n   * - maxFee - maxFee for the declare transaction\n   * - version - transaction version\n   * - nonce - Nonce of the declare transaction\n   * @returns signature\n   */\n  public abstract signDeclareTransaction(transaction: DeclareSignerDetails): Promise<Signature>;\n}\n","import {\n  BigNumberish,\n  CairoVersion,\n  Call,\n  CallStruct,\n  Calldata,\n  ParsedStruct,\n  RawArgs,\n} from '../types';\nimport { CallData } from './calldata';\nimport { getSelectorFromName } from './hash';\nimport { toBigInt } from './num';\n\n/**\n * Transforms a list of Calls, each with their own calldata, into\n * two arrays: one with the entry points, and one with the concatenated calldata\n */\nexport const transformCallsToMulticallArrays = (calls: Call[]) => {\n  const callArray: ParsedStruct[] = [];\n  const calldata: BigNumberish[] = [];\n  calls.forEach((call) => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString(),\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({ calldata }),\n  };\n};\n\n/**\n * Transforms a list of calls into the Cairo 0 `__execute__` calldata.\n */\nexport const fromCallsToExecuteCalldata = (calls: Call[]) => {\n  const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({ callArray });\n  return [...compiledCalls, ...calldata] as Calldata;\n};\n\n/**\n * Transforms a list of calls into the Cairo 0 `__execute__` calldata including nonce.\n *\n * @deprecated\n */\nexport const fromCallsToExecuteCalldataWithNonce = (calls: Call[], nonce: BigNumberish) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()] as Calldata;\n};\n\n/**\n * Format Data inside Calls\n *\n * @deprecated Not required for getting execute Calldata\n */\nexport const transformCallsToMulticallArrays_cairo1 = (calls: Call[]) => {\n  const callArray = calls.map<CallStruct>((call) => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || []),\n  }));\n  return callArray;\n};\n\n/**\n * Transforms a list of calls into the Cairo 1 `__execute__` calldata.\n */\nexport const fromCallsToExecuteCalldata_cairo1 = (calls: Call[]) => {\n  // ensure property order\n  const orderCalls = calls.map((call) => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata:\n      Array.isArray(call.calldata) && '__compiled__' in call.calldata\n        ? call.calldata // Calldata type\n        : CallData.compile(call.calldata as RawArgs), // RawArgsObject | RawArgsArray type\n  }));\n\n  return CallData.compile({ orderCalls });\n};\n\n/**\n * Create `__execute__` Calldata from Calls based on Cairo versions\n */\nexport const getExecuteCalldata = (calls: Call[], cairoVersion: CairoVersion = '0') => {\n  if (cairoVersion === '1') {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\n","import { BigNumberish, StarkNetMerkleType, StarkNetType, TypedData } from '../types';\nimport { computeHashOnElements, getSelectorFromName } from './hash';\nimport { MerkleTree } from './merkle';\nimport { isHex, toHex } from './num';\nimport { encodeShortString } from './shortString';\n\n/** @deprecated prefer importing from 'types' over 'typedData' */\nexport * from '../types/typedData';\n\nfunction getHex(value: BigNumberish): string {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (typeof value === 'string') {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\n\n/**\n * Validates that `data` matches the EIP-712 JSON schema.\n *\n * @param {any} data\n * @return {boolean}\n */\nconst validateTypedData = (data: unknown): data is TypedData => {\n  const typedData = data as TypedData;\n\n  // Validate that the data matches the EIP-712 JSON schema\n  const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n\n  return valid;\n};\n\nexport function prepareSelector(selector: string): string {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\n\nexport function isMerkleTreeType(type: StarkNetType): type is StarkNetMerkleType {\n  return type.type === 'merkletree';\n}\n\ninterface Context {\n  parent?: string;\n  key?: string;\n}\n\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {string[]} [dependencies]\n * @return {string[]}\n */\nexport const getDependencies = (\n  types: TypedData['types'],\n  type: string,\n  dependencies: string[] = []\n): string[] => {\n  // Include pointers (struct arrays)\n  if (type[type.length - 1] === '*') {\n    // eslint-disable-next-line no-param-reassign\n    type = type.slice(0, -1);\n  }\n\n  if (dependencies.includes(type)) {\n    return dependencies;\n  }\n\n  if (!types[type]) {\n    return dependencies;\n  }\n\n  return [\n    type,\n    ...types[type].reduce<string[]>(\n      (previous, t) => [\n        ...previous,\n        ...getDependencies(types, t.type, previous).filter(\n          (dependency) => !previous.includes(dependency)\n        ),\n      ],\n      []\n    ),\n  ];\n};\n\nfunction getMerkleTreeType(types: TypedData['types'], ctx: Context) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find((t) => t.name === ctx.key)!;\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith('*')) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return 'raw';\n}\n\n/**\n * Encode a type to a string. All dependent types are alphabetically sorted.\n */\nexport const encodeType = (types: TypedData['types'], type: string): string => {\n  const [primary, ...dependencies] = getDependencies(types, type);\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n\n  return newTypes\n    .map((dependency) => {\n      return `${dependency}(${types[dependency].map((t) => `${t.name}:${t.type}`)})`;\n    })\n    .join('');\n};\n\n/**\n * Get a type string as hash.\n */\nexport const getTypeHash = (types: TypedData['types'], type: string): string => {\n  return getSelectorFromName(encodeType(types, type));\n};\n\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nexport const encodeValue = (\n  types: TypedData['types'],\n  type: string,\n  data: unknown,\n  ctx: Context = {}\n): [string, string] => {\n  if (types[type]) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return [type, getStructHash(types, type, data as Record<string, unknown>)];\n  }\n\n  if (\n    Object.keys(types)\n      .map((x) => `${x}*`)\n      .includes(type)\n  ) {\n    const structHashes: string[] = (data as unknown[]).map((struct) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return getStructHash(types, type.slice(0, -1), struct as Record<string, unknown>);\n    });\n    return [type, computeHashOnElements(structHashes)];\n  }\n\n  if (type === 'merkletree') {\n    const merkleTreeType = getMerkleTreeType(types, ctx);\n    const structHashes: string[] = (data as unknown[]).map((struct) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return encodeValue(types, merkleTreeType, struct as Record<string, unknown>)[1];\n    });\n    const { root } = new MerkleTree(structHashes as string[]);\n    return ['felt', root];\n  }\n\n  if (type === 'felt*') {\n    return ['felt*', computeHashOnElements(data as string[])];\n  }\n\n  if (type === 'selector') {\n    return ['felt', prepareSelector(data as string)];\n  }\n\n  return [type, getHex(data as string)];\n};\n\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values.\n * All dependent types are automatically encoded.\n */\nexport const encodeData = <T extends TypedData>(\n  types: T['types'],\n  type: string,\n  data: T['message']\n) => {\n  const [returnTypes, values] = types[type].reduce<[string[], string[]]>(\n    ([ts, vs], field) => {\n      if (data[field.name] === undefined || data[field.name] === null) {\n        throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n      }\n\n      const value = data[field.name];\n      const [t, encodedValue] = encodeValue(types, field.type, value, {\n        parent: type,\n        key: field.name,\n      });\n\n      return [\n        [...ts, t],\n        [...vs, encodedValue],\n      ];\n    },\n    [['felt'], [getTypeHash(types, type)]]\n  );\n\n  return [returnTypes, values];\n};\n\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values.\n * All dependent types are automatically encoded.\n */\nexport const getStructHash = <T extends TypedData>(\n  types: T['types'],\n  type: string,\n  data: T['message']\n) => {\n  return computeHashOnElements(encodeData(types, type, data)[1]);\n};\n\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object.\n */\nexport const getMessageHash = (typedData: TypedData, account: BigNumberish): string => {\n  if (!validateTypedData(typedData)) {\n    throw new Error('Typed data does not match JSON schema');\n  }\n\n  const message = [\n    encodeShortString('StarkNet Message'),\n    getStructHash(typedData.types, 'StarkNetDomain', typedData.domain),\n    account,\n    getStructHash(typedData.types, typedData.primaryType, typedData.message),\n  ];\n\n  return computeHashOnElements(message);\n};\n","import { starkCurve } from './ec';\nimport { toBigInt } from './num';\n\nexport class MerkleTree {\n  public leaves: string[];\n\n  public branches: string[][] = [];\n\n  public root: string;\n\n  constructor(leafHashes: string[]) {\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n\n  /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */\n  private build(leaves: string[]): string {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves: string[] = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(MerkleTree.hash(leaves[i], '0x0'));\n      } else {\n        newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n      }\n    }\n    return this.build(newLeaves);\n  }\n\n  /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */\n  static hash(a: string, b: string) {\n    const [aSorted, bSorted] = [toBigInt(a), toBigInt(b)].sort((x, y) => (x >= y ? 1 : -1));\n    return starkCurve.pedersen(aSorted, bSorted);\n  }\n\n  /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */\n  public getProof(leaf: string, branch = this.leaves, hashPath: string[] = []): string[] {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error('leaf not found');\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? '0x0';\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex =\n      this.leaves.length === branch.length\n        ? -1\n        : this.branches.findIndex((b) => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(\n      MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf),\n      nextBranch,\n      newHashPath\n    );\n  }\n}\n\n/**\n * Test Merkle tree path\n * @param root hex-string\n * @param leaf hex-string\n * @param path hex-string array\n */\nexport function proofMerklePath(root: string, leaf: string, path: string[]): boolean {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n","import {\n  Abi,\n  Call,\n  DeclareSignerDetails,\n  DeployAccountSignerDetails,\n  InvocationsSignerDetails,\n  Signature,\n  TypedData,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { starkCurve } from '../utils/ec';\nimport { buf2hex } from '../utils/encode';\nimport {\n  calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash,\n  calculateTransactionHash,\n} from '../utils/hash';\nimport { toHex } from '../utils/num';\nimport { getExecuteCalldata } from '../utils/transaction';\nimport { getMessageHash } from '../utils/typedData';\nimport { SignerInterface } from './interface';\n\nexport class Signer implements SignerInterface {\n  protected pk: Uint8Array | string;\n\n  constructor(pk: Uint8Array | string = starkCurve.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n\n  public async getPubKey(): Promise<string> {\n    return starkCurve.getStarkKey(this.pk);\n  }\n\n  public async signMessage(typedData: TypedData, accountAddress: string): Promise<Signature> {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signTransaction(\n    transactions: Call[],\n    transactionsDetail: InvocationsSignerDetails,\n    abis?: Abi[]\n  ): Promise<Signature> {\n    if (abis && abis.length !== transactions.length) {\n      throw new Error('ABI must be provided for each transaction or no transaction');\n    }\n    // now use abi to display decoded data somewhere, but as this signer is headless, we can't do that\n\n    const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n\n    const msgHash = calculateTransactionHash(\n      transactionsDetail.walletAddress,\n      transactionsDetail.version,\n      calldata,\n      transactionsDetail.maxFee,\n      transactionsDetail.chainId,\n      transactionsDetail.nonce\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signDeployAccountTransaction({\n    classHash,\n    contractAddress,\n    constructorCalldata,\n    addressSalt,\n    maxFee,\n    version,\n    chainId,\n    nonce,\n  }: DeployAccountSignerDetails): Promise<Signature> {\n    const msgHash = calculateDeployAccountTransactionHash(\n      contractAddress,\n      classHash,\n      CallData.compile(constructorCalldata),\n      addressSalt,\n      version,\n      maxFee,\n      chainId,\n      nonce\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signDeclareTransaction(\n    // contractClass: ContractClass,  // Should be used once class hash is present in ContractClass\n    {\n      classHash,\n      senderAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      compiledClassHash,\n    }: DeclareSignerDetails\n  ): Promise<Signature> {\n    const msgHash = calculateDeclareTransactionHash(\n      classHash,\n      senderAddress,\n      version,\n      maxFee,\n      chainId,\n      nonce,\n      compiledClassHash\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n}\n","import { UDC } from '../constants';\nimport { InvokeTransactionReceiptResponse } from '../types/provider';\nimport { cleanHex } from './num';\n\n/**\n * Parse Transaction Receipt Event from UDC invoke transaction and\n * create DeployContractResponse compatible response with addition of the UDC Event data\n *\n * @returns DeployContractResponse | UDC Event Response data\n */\nexport function parseUDCEvent(txReceipt: InvokeTransactionReceiptResponse) {\n  if (!txReceipt.events) {\n    throw new Error('UDC emitted event is empty');\n  }\n  const event = txReceipt.events.find(\n    (it) => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)\n  ) || {\n    data: [],\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1],\n  };\n}\n","import { UDC, ZERO } from '../constants';\nimport { ProviderInterface } from '../provider';\nimport { Provider } from '../provider/default';\nimport { Signer, SignerInterface } from '../signer';\nimport {\n  Abi,\n  AccountInvocationItem,\n  AccountInvocations,\n  AccountInvocationsFactoryDetails,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  CairoVersion,\n  Call,\n  DeclareAndDeployContractPayload,\n  DeclareContractPayload,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeclareDeployUDCResponse,\n  DeployAccountContractPayload,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  DeployContractUDCResponse,\n  DeployTransactionReceiptResponse,\n  Details,\n  EstimateFee,\n  EstimateFeeAction,\n  EstimateFeeBulk,\n  EstimateFeeDetails,\n  Invocation,\n  Invocations,\n  InvocationsDetails,\n  InvocationsSignerDetails,\n  InvokeFunctionResponse,\n  MultiDeployContractResponse,\n  Nonce,\n  ProviderOptions,\n  Signature,\n  SimulateTransactionDetails,\n  SimulateTransactionResponse,\n  TransactionType,\n  TypedData,\n  UniversalDeployerContractPayload,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { extractContractHashes, isSierra } from '../utils/contract';\nimport { starkCurve } from '../utils/ec';\nimport { parseUDCEvent } from '../utils/events';\nimport {\n  calculateContractAddressFromHash,\n  feeTransactionVersion,\n  feeTransactionVersion_2,\n  transactionVersion,\n  transactionVersion_2,\n} from '../utils/hash';\nimport { toBigInt, toCairoBool } from '../utils/num';\nimport { parseContract } from '../utils/provider';\nimport { estimatedFeeToMaxFee, formatSignature, randomAddress } from '../utils/stark';\nimport { getExecuteCalldata } from '../utils/transaction';\nimport { getMessageHash } from '../utils/typedData';\nimport { AccountInterface } from './interface';\n\nexport class Account extends Provider implements AccountInterface {\n  public signer: SignerInterface;\n\n  public address: string;\n\n  public cairoVersion: CairoVersion;\n\n  constructor(\n    providerOrOptions: ProviderOptions | ProviderInterface,\n    address: string,\n    pkOrSigner: Uint8Array | string | SignerInterface,\n    cairoVersion?: CairoVersion\n  ) {\n    super(providerOrOptions);\n    this.address = address.toLowerCase();\n    this.signer =\n      typeof pkOrSigner === 'string' || pkOrSigner instanceof Uint8Array\n        ? new Signer(pkOrSigner)\n        : pkOrSigner;\n\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString() as CairoVersion;\n    }\n  }\n\n  public async getNonce(blockIdentifier?: BlockIdentifier): Promise<Nonce> {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n\n  private async getNonceSafe(nonce?: BigNumberish) {\n    // Patch DEPLOY_ACCOUNT: RPC getNonce for non-existing address will result in error, on Sequencer it is '0x0'\n    try {\n      return toBigInt(nonce ?? (await this.getNonce()));\n    } catch (error) {\n      return 0n;\n    }\n  }\n\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  public async getCairoVersion(classHash?: string) {\n    if (!this.cairoVersion) {\n      const { cairo } = classHash\n        ? await super.getContractVersion(undefined, classHash)\n        : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n\n  public async estimateFee(\n    calls: AllowArray<Call>,\n    estimateFeeDetails?: EstimateFeeDetails | undefined\n  ): Promise<EstimateFee> {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n\n  public async estimateInvokeFee(\n    calls: AllowArray<Call>,\n    { nonce: providedNonce, blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = toBigInt(feeTransactionVersion);\n    const chainId = await this.getChainId();\n\n    const signerDetails: InvocationsSignerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion(),\n    };\n\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    const response = await super.getInvokeEstimateFee(\n      { ...invocation },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateDeclareFee(\n    { contract, classHash: providedClassHash, casm, compiledClassHash }: DeclareContractPayload,\n    { blockIdentifier, nonce: providedNonce, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n    const chainId = await this.getChainId();\n\n    const declareContractTransaction = await this.buildDeclarePayload(\n      { classHash: providedClassHash, contract, casm, compiledClassHash },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        maxFee: ZERO,\n        cairoVersion: undefined, // unused parameter\n      }\n    );\n\n    const response = await super.getDeclareEstimateFee(\n      declareContractTransaction,\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateAccountDeployFee(\n    {\n      classHash,\n      addressSalt = 0,\n      constructorCalldata = [],\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    { blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const version = toBigInt(feeTransactionVersion);\n    const nonce = ZERO; // DEPLOY_ACCOUNT transaction will have a nonce zero as it is the first transaction in the account\n    const chainId = await this.getChainId();\n\n    const payload = await this.buildAccountDeployPayload(\n      { classHash, addressSalt, constructorCalldata, contractAddress: providedContractAddress },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address, // unused parameter\n        maxFee: ZERO,\n        cairoVersion: undefined, // unused parameter\n      }\n    );\n\n    const response = await super.getDeployAccountEstimateFee(\n      { ...payload },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateDeployFee(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    transactionsDetail?: InvocationsDetails | undefined\n  ): Promise<EstimateFee> {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, transactionsDetail);\n  }\n\n  public async estimateFeeBulk(\n    invocations: Invocations,\n    { nonce, blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFeeBulk> {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [feeTransactionVersion, feeTransactionVersion_2],\n      nonce,\n      blockIdentifier,\n    });\n\n    const response = await super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n    });\n\n    return [].concat(response as []).map((elem: any) => {\n      const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n      return {\n        ...elem,\n        suggestedMaxFee,\n      };\n    });\n  }\n\n  public async buildInvocation(\n    call: Array<Call>,\n    signerDetails: InvocationsSignerDetails\n  ): Promise<Invocation> {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = await this.signer.signTransaction(call, signerDetails);\n\n    return {\n      contractAddress: this.address,\n      calldata,\n      signature,\n    };\n  }\n\n  public async execute(\n    calls: AllowArray<Call>,\n    abis: Abi[] | undefined = undefined,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<InvokeFunctionResponse> {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    const maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        { type: TransactionType.INVOKE, payload: calls },\n        transactionsDetail\n      ));\n    const version = toBigInt(transactionVersion);\n    const chainId = await this.getChainId();\n\n    const signerDetails: InvocationsSignerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion(),\n    };\n\n    const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n\n    const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n\n    return this.invokeFunction(\n      { contractAddress: this.address, calldata, signature },\n      {\n        nonce,\n        maxFee,\n        version,\n      }\n    );\n  }\n\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  public async declareIfNot(\n    payload: DeclareContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeclareContractResponse> {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: '',\n      class_hash: declareContractPayload.classHash,\n    };\n  }\n\n  public async declare(\n    payload: DeclareContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeclareContractResponse> {\n    const declareContractPayload = extractContractHashes(payload);\n    const details = {} as Details;\n\n    details.nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    details.maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        {\n          type: TransactionType.DECLARE,\n          payload: declareContractPayload,\n        },\n        transactionsDetail\n      ));\n    details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n    details.chainId = await this.getChainId();\n\n    const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n      ...details,\n      walletAddress: this.address,\n      cairoVersion: undefined, // unused parameter\n    });\n\n    return this.declareContract(declareContractTransaction, details);\n  }\n\n  public async deploy(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<MultiDeployContractResponse> {\n    const params = [].concat(payload as []).map((it) => {\n      const {\n        classHash,\n        salt,\n        unique = true,\n        constructorCalldata = [],\n      } = it as UniversalDeployerContractPayload;\n\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      const deploySalt = salt ?? randomAddress();\n\n      return {\n        call: {\n          contractAddress: UDC.ADDRESS,\n          entrypoint: UDC.ENTRYPOINT,\n          calldata: [\n            classHash,\n            deploySalt,\n            toCairoBool(unique),\n            compiledConstructorCallData.length,\n            ...compiledConstructorCallData,\n          ],\n        },\n        address: calculateContractAddressFromHash(\n          unique ? starkCurve.pedersen(this.address, deploySalt) : deploySalt,\n          classHash,\n          compiledConstructorCallData,\n          unique ? UDC.ADDRESS : 0\n        ),\n      };\n    });\n\n    const calls = params.map((it) => it.call);\n    const addresses = params.map((it) => it.address);\n    const invokeResponse = await this.execute(calls, undefined, details);\n\n    return {\n      ...invokeResponse,\n      contract_address: addresses,\n    };\n  }\n\n  public async deployContract(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<DeployContractUDCResponse> {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt as DeployTransactionReceiptResponse);\n  }\n\n  public async declareAndDeploy(\n    payload: DeclareAndDeployContractPayload,\n    details?: InvocationsDetails | undefined\n  ): Promise<DeclareDeployUDCResponse> {\n    const { constructorCalldata, salt, unique } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== '') {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = { ...declare, ...tx };\n    }\n    const deploy = await this.deployContract(\n      { classHash: declare.class_hash, salt, unique, constructorCalldata },\n      details\n    );\n    return { declare: { ...declare }, deploy };\n  }\n\n  public deploySelf = this.deployAccount;\n\n  public async deployAccount(\n    {\n      classHash,\n      constructorCalldata = [],\n      addressSalt = 0,\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeployContractResponse> {\n    const version = toBigInt(transactionVersion);\n    const nonce = ZERO; // DEPLOY_ACCOUNT transaction will have a nonce zero as it is the first transaction in the account\n    const chainId = await this.getChainId();\n\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress =\n      providedContractAddress ??\n      calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n\n    const maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        {\n          type: TransactionType.DEPLOY_ACCOUNT,\n          payload: {\n            classHash,\n            constructorCalldata: compiledCalldata,\n            addressSalt,\n            contractAddress,\n          },\n        },\n        transactionsDetail\n      ));\n\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n    });\n\n    return this.deployAccountContract(\n      { classHash, addressSalt, constructorCalldata, signature },\n      {\n        nonce,\n        maxFee,\n        version,\n      }\n    );\n  }\n\n  public async signMessage(typedData: TypedData): Promise<Signature> {\n    return this.signer.signMessage(typedData, this.address);\n  }\n\n  public async hashMessage(typedData: TypedData): Promise<string> {\n    return getMessageHash(typedData, this.address);\n  }\n\n  public async verifyMessageHash(hash: BigNumberish, signature: Signature): Promise<boolean> {\n    try {\n      await this.callContract({\n        contractAddress: this.address,\n        entrypoint: 'isValidSignature',\n        calldata: CallData.compile({\n          hash: toBigInt(hash).toString(),\n          signature: formatSignature(signature),\n        }),\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public async verifyMessage(typedData: TypedData, signature: Signature): Promise<boolean> {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(hash, signature);\n  }\n\n  public async getSuggestedMaxFee(\n    { type, payload }: EstimateFeeAction,\n    details: EstimateFeeDetails\n  ) {\n    let feeEstimate: EstimateFee;\n\n    switch (type) {\n      case TransactionType.INVOKE:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n\n      case TransactionType.DECLARE:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n\n      case TransactionType.DEPLOY_ACCOUNT:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n\n      case TransactionType.DEPLOY:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n\n      default:\n        feeEstimate = { suggestedMaxFee: ZERO, overall_fee: ZERO };\n        break;\n    }\n\n    return feeEstimate.suggestedMaxFee;\n  }\n\n  /**\n   * will be renamed to buildDeclareContractTransaction\n   */\n  public async buildDeclarePayload(\n    payload: DeclareContractPayload,\n    { nonce, chainId, version, walletAddress, maxFee }: InvocationsSignerDetails\n  ): Promise<DeclareContractTransaction> {\n    const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    const signature = await this.signer.signDeclareTransaction({\n      classHash,\n      compiledClassHash,\n      senderAddress: walletAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n    });\n\n    return {\n      senderAddress: walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash,\n    };\n  }\n\n  public async buildAccountDeployPayload(\n    {\n      classHash,\n      addressSalt = 0,\n      constructorCalldata = [],\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    { nonce, chainId, version, maxFee }: InvocationsSignerDetails\n  ): Promise<DeployAccountContractTransaction> {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress =\n      providedContractAddress ??\n      calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      contractAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n    });\n\n    return {\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature,\n    };\n  }\n\n  public buildUDCContractPayload(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[]\n  ): Call[] {\n    const calls = [].concat(payload as []).map((it) => {\n      const {\n        classHash,\n        salt = '0',\n        unique = true,\n        constructorCalldata = [],\n      } = it as UniversalDeployerContractPayload;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          salt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData,\n        ],\n      };\n    });\n    return calls;\n  }\n\n  public async simulateTransaction(\n    invocations: Invocations,\n    { nonce, blockIdentifier, skipValidate, skipExecute }: SimulateTransactionDetails = {}\n  ): Promise<SimulateTransactionResponse> {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [transactionVersion, transactionVersion_2],\n      nonce,\n      blockIdentifier,\n    });\n\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute,\n    });\n  }\n\n  public async accountInvocationsFactory(\n    invocations: Invocations,\n    { versions, nonce, blockIdentifier }: AccountInvocationsFactoryDetails\n  ) {\n    const version = versions[0];\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n\n    // BULK ACTION FROM NEW ACCOUNT START WITH DEPLOY_ACCOUNT\n    const tx0Payload: any = 'payload' in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion =\n      invocations[0].type === TransactionType.DEPLOY_ACCOUNT\n        ? await this.getCairoVersion(tx0Payload.classHash)\n        : await this.getCairoVersion();\n\n    return Promise.all(\n      ([] as Invocations).concat(invocations).map(async (transaction, index: number) => {\n        const txPayload: any = 'payload' in transaction ? transaction.payload : transaction;\n        const signerDetails: InvocationsSignerDetails = {\n          walletAddress: this.address,\n          nonce: toBigInt(Number(safeNonce) + index),\n          maxFee: ZERO,\n          version,\n          chainId,\n          cairoVersion,\n        };\n        const common = {\n          type: transaction.type,\n          version,\n          nonce: toBigInt(Number(safeNonce) + index),\n          blockIdentifier,\n        };\n\n        if (transaction.type === TransactionType.INVOKE) {\n          const payload = await this.buildInvocation(\n            ([] as Call[]).concat(txPayload),\n            signerDetails\n          );\n          return {\n            ...common,\n            ...payload,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DECLARE) {\n          signerDetails.version = !isSierra(txPayload.contract)\n            ? toBigInt(versions[0])\n            : toBigInt(versions[1]);\n          const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            version: signerDetails.version,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DEPLOY_ACCOUNT) {\n          const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DEPLOY) {\n          const calls = this.buildUDCContractPayload(txPayload);\n          const payload = await this.buildInvocation(calls, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            type: TransactionType.INVOKE,\n          } as AccountInvocationItem;\n        }\n        throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n      })\n    ) as Promise<AccountInvocations>;\n  }\n\n  public override async getStarkName(\n    address: BigNumberish = this.address, // default to the wallet address\n    StarknetIdContract?: string\n  ): Promise<string> {\n    return super.getStarkName(address, StarknetIdContract);\n  }\n}\n","import { StarknetChainId } from '../constants';\nimport type {\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  Call,\n  CallContractResponse,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractPayload,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetCodeResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Nonce,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  Storage,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\n\nexport abstract class ProviderInterface {\n  /**\n   * Gets the Starknet chain Id\n   *\n   * @returns the chain Id\n   */\n  public abstract getChainId(): Promise<StarknetChainId>;\n\n  /**\n   * Calls a function on the Starknet contract.\n   *\n   * @param call transaction to be called\n   * @param blockIdentifier block identifier\n   * @returns the result of the function on the smart contract.\n   */\n  public abstract callContract(\n    call: Call,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<CallContractResponse>;\n\n  /**\n   * Gets the block information\n   *\n   * @param blockIdentifier block identifier\n   * @returns the block object\n   */\n  public abstract getBlock(blockIdentifier: BlockIdentifier): Promise<GetBlockResponse>;\n\n  /**\n   * @deprecated The method should not be used\n   */\n  public abstract getCode(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse>;\n\n  /**\n   * Gets the contract class of the deployed contract.\n   *\n   * @param contractAddress - contract address\n   * @param blockIdentifier - block identifier\n   * @returns Contract class of compiled contract\n   */\n  public abstract getClassAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<ContractClassResponse>;\n\n  /**\n   * Returns the contract class hash in the given block for the contract deployed at the given address\n   *\n   * @param contractAddress - contract address\n   * @param blockIdentifier - block identifier\n   * @returns Class hash\n   */\n  public abstract getClassHashAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<string>;\n\n  /**\n   * Returns the contract class deployed under the given class hash.\n   *\n   * @param classHash - class hash\n   * @returns Contract class of compiled contract\n   */\n  public abstract getClassByHash(classHash: string): Promise<ContractClassResponse>;\n\n  /**\n   * Returns the nonce associated with the given address in the given block\n   *\n   * @param contractAddress - contract address\n   * @returns the hex nonce\n   */\n  public abstract getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Nonce>;\n\n  /**\n   * Get the value of the storage (contract's variable) at the given address and key\n   *\n   * @param contractAddress\n   * @param key - from getStorageVarAddress('<STORAGE_VARIABLE_NAME>') (WIP)\n   * @param blockIdentifier - block identifier\n   * @returns the value of the storage variable\n   */\n  public abstract getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Storage>;\n\n  /**\n   * Gets the transaction information from a tx id.\n   *\n   * @param txHash\n   * @returns the transaction object \\{ transaction_id, status, transaction, block_number?, block_number?, transaction_index?, transaction_failure_reason? \\}\n   */\n  public abstract getTransaction(transactionHash: BigNumberish): Promise<GetTransactionResponse>;\n\n  /**\n   * Gets the transaction receipt from a tx hash.\n   *\n   * @param txHash\n   * @returns the transaction receipt object\n   */\n  public abstract getTransactionReceipt(\n    transactionHash: BigNumberish\n  ): Promise<GetTransactionReceiptResponse>;\n\n  /**\n   * Deploys a given compiled Account contract (json) to starknet\n   *\n   * @param payload payload to be deployed containing:\n   * - compiled contract code\n   * - constructor calldata\n   * - address salt\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract deployAccountContract(\n    payload: DeployAccountContractPayload,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse>;\n\n  /**\n   * Invokes a function on starknet\n   * @deprecated This method wont be supported as soon as fees are mandatory. Should not be used outside of Account class\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * - maxFee - optional maxFee\n   * @returns response from addTransaction\n   */\n  public abstract invokeFunction(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Declares a given compiled contract (json) to starknet\n   * @param transaction transaction payload to be deployed containing:\n   * - compiled contract code\n   * - sender address\n   * - signature\n   * @param details Invocation Details containing:\n   * - nonce\n   * - optional version\n   * - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract declareContract(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse>;\n\n  /**\n   * Estimates the fee for a given INVOKE transaction\n   * @deprecated Please use getInvokeEstimateFee or getDeclareEstimateFee instead. Should not be used outside of Account class\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getEstimateFee(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given INVOKE transaction\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getInvokeEstimateFee(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given DECLARE transaction\n   *\n   * @param transaction transaction payload to be declared containing:\n   * - compiled contract code\n   * - sender address\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce\n   * - version - optional version\n   * - optional maxFee\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getDeclareEstimateFee(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given DEPLOY_ACCOUNT transaction\n   *\n   * @param transaction transaction payload to be deployed containing:\n   * - classHash\n   * - constructorCalldata\n   * - addressSalt\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce\n   * - version - optional version\n   * - optional maxFee\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getDeployAccountEstimateFee(\n    transaction: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a list of INVOKE transaction\n   *\n   * @param invocations AccountInvocations - Complete invocations array with account details\n   * @param options getEstimateFeeBulkOptions\n   * - (optional) blockIdentifier - BlockIdentifier\n   * - (optional) skipValidate - boolean (default false)\n   * @returns the estimated fee\n   */\n  public abstract getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    options?: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk>;\n\n  /**\n   * Wait for the transaction to be accepted\n   * @param txHash - transaction hash\n   * @param options waitForTransactionOptions\n   * - (optional) retryInterval: number | undefined;\n   * - (optional) successStates: TransactionStatus[] | undefined;\n   * @return GetTransactionReceiptResponse\n   */\n  public abstract waitForTransaction(\n    txHash: BigNumberish,\n    options?: waitForTransactionOptions\n  ): Promise<GetTransactionReceiptResponse>;\n\n  /**\n   * Simulates the transaction and returns the transaction trace and estimated fee.\n   *\n   * @param invocations AccountInvocations - Complete invocations array with account details\n   * @param options - getSimulateTransactionOptions\n   *  - (optional) blockIdentifier - block identifier\n   *  - (optional) skipValidate - skip cairo __validate__ method\n   *  - (optional) skipExecute - skip cairo __execute__ method\n   * @returns an array of transaction trace and estimated fee\n   */\n  public abstract getSimulateTransaction(\n    invocations: AccountInvocations,\n    options?: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse>;\n\n  /**\n   * Gets the state changes in a specific block (result of executing the requested block)\n   *\n   * @param blockIdentifier - block identifier\n   * @returns StateUpdateResponse\n   */\n  public abstract getStateUpdate(blockIdentifier?: BlockIdentifier): Promise<StateUpdateResponse>;\n\n  /**\n   * Gets the contract version from the provided address\n   * @param contractAddress string\n   * @param classHash undefined\n   * @param options - getContractVersionOptions\n   *   - (optional) compiler - (default true) extract compiler version using type tactic from abi\n   *   - (optional) blockIdentifier - block identifier\n   */\n  public abstract getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  /**\n   * Gets the contract version from the provided address\n   * @param contractAddress undefined\n   * @param classHash\n   * @param options - getContractVersionOptions\n   *   - (optional) compiler - (default true) extract compiler version using type tactic from abi\n   *   - (optional) blockIdentifier - block identifier\n   */\n  public abstract getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n}\n","import { Provider } from './default';\n\nexport * from './default';\nexport * from './errors';\nexport * from './sequencer';\nexport * from './interface';\nexport * from './rpc';\n\nexport const defaultProvider = new Provider({ rpc: { default: true } });\n","import { ProviderInterface } from '../provider';\nimport { SignerInterface } from '../signer';\nimport {\n  Abi,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  CairoVersion,\n  Call,\n  DeclareAndDeployContractPayload,\n  DeclareContractPayload,\n  DeclareContractResponse,\n  DeclareDeployUDCResponse,\n  DeployAccountContractPayload,\n  DeployContractResponse,\n  DeployContractUDCResponse,\n  EstimateFeeAction,\n  EstimateFeeDetails,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  Invocations,\n  InvocationsDetails,\n  InvokeFunctionResponse,\n  MultiDeployContractResponse,\n  Nonce,\n  Signature,\n  SimulateTransactionDetails,\n  SimulateTransactionResponse,\n  TypedData,\n  UniversalDeployerContractPayload,\n} from '../types';\n\nexport abstract class AccountInterface extends ProviderInterface {\n  public abstract address: string;\n\n  public abstract signer: SignerInterface;\n\n  public abstract cairoVersion: CairoVersion;\n\n  /**\n   * Estimate Fee for executing an INVOKE transaction on starknet\n   *\n   * @param calls the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateInvokeFee(\n    calls: AllowArray<Call>,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a DECLARE transaction on starknet\n   *\n   * @param contractPayload the payload object containing:\n   * - contract - the compiled contract to be declared\n   * - classHash - the class hash of the compiled contract. This can be obtained by using starknet-cli.\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateDeclareFee(\n    contractPayload: DeclareContractPayload,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a DEPLOY_ACCOUNT transaction on starknet\n   *\n   * @param contractPayload -\n   * - contract - the compiled contract to be deployed\n   * - classHash - the class hash of the compiled contract. This can be obtained by using starknet-cli.\n   * @param estimateFeeDetails -\n   * - optional blockIdentifier\n   * - constant nonce = 0\n   * @returns response from estimate_fee\n   */\n  public abstract estimateAccountDeployFee(\n    contractPayload: DeployAccountContractPayload,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a UDC DEPLOY transaction on starknet\n   * This is different from the normal DEPLOY transaction as it goes through the Universal Deployer Contract (UDC)\n   \n  * @param deployContractPayload containing\n   * - classHash: computed class hash of compiled contract\n   * - salt: address salt\n   * - unique: bool if true ensure unique salt\n   * - calldata: constructor calldata\n   * \n   * @param transactionsDetail Invocation Details containing:\n   *  - optional nonce\n   *  - optional version\n   *  - optional maxFee\n   */\n  public abstract estimateDeployFee(\n    deployContractPayload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    transactionsDetail?: InvocationsDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a list of transactions on starknet\n   * Contract must be deployed for fee estimation to be possible\n   *\n   * @param transactions array of transaction object containing :\n   * - type - the type of transaction : 'DECLARE' | (multi)'DEPLOY' | (multi)'INVOKE_FUNCTION' | 'DEPLOY_ACCOUNT'\n   * - payload - the payload of the transaction\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateFeeBulk(\n    invocations: Invocations,\n    details?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponseBulk>;\n\n  /**\n   * Invoke execute function in account contract\n   *\n   * @param transactions the invocation object or an array of them, containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param abi (optional) the abi of the contract for better displaying\n   *\n   * @returns response from addTransaction\n   */\n  public abstract execute(\n    transactions: AllowArray<Call>,\n    abis?: Abi[],\n    transactionsDetail?: InvocationsDetails\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Declares a given compiled contract (json) to starknet\n   * \n   * @param contractPayload transaction payload to be deployed containing:\n  - contract: compiled contract code\n  - (optional) classHash: computed class hash of compiled contract. Pre-compute it for faster execution.\n  - (required for Cairo1 without compiledClassHash) casm: CompiledContract | string;\n  - (optional for Cairo1 with casm) compiledClassHash: compiled class hash from casm. Pre-compute it for faster execution.\n   * @param transactionsDetail Invocation Details containing:\n  - optional nonce\n  - optional version\n  - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract declare(\n    contractPayload: DeclareContractPayload,\n    transactionsDetail?: InvocationsDetails\n  ): Promise<DeclareContractResponse>;\n\n  /**\n   * Deploys a declared contract to starknet - using Universal Deployer Contract (UDC)\n   * support multicall\n   *\n   * @param payload -\n   * - classHash: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details -\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   * - contract_address[]\n   * - transaction_hash\n   */\n  public abstract deploy(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<MultiDeployContractResponse>;\n\n  /**\n   * Simplify deploy simulating old DeployContract with same response + UDC specific response\n   * Internal wait for L2 transaction, support multicall\n   *\n   * @param payload -\n   * - classHash: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details -\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   *  - contract_address\n   *  - transaction_hash\n   *  - address\n   *  - deployer\n   *  - unique\n   *  - classHash\n   *  - calldata_len\n   *  - calldata\n   *  - salt\n   */\n  public abstract deployContract(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<DeployContractUDCResponse>;\n\n  /**\n   * Declares and Deploy a given compiled contract (json) to starknet using UDC\n   * Internal wait for L2 transaction, do not support multicall\n   * Method will pass even if contract is already declared (internal using DeclareIfNot)\n   *\n   * @param payload\n   * - contract: compiled contract code\n   * - [casm=cairo1]: CairoAssembly | undefined;\n   * - [compiledClassHash]: string | undefined;\n   * - [classHash]: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   * - declare\n   *    - transaction_hash\n   * - deploy\n   *    - contract_address\n   *    - transaction_hash\n   *    - address\n   *    - deployer\n   *    - unique\n   *    - classHash\n   *    - calldata_len\n   *    - calldata\n   *    - salt\n   */\n  public abstract declareAndDeploy(\n    payload: DeclareAndDeployContractPayload,\n    details?: InvocationsDetails | undefined\n  ): Promise<DeclareDeployUDCResponse>;\n\n  /**\n   * Deploy the account on Starknet\n   * \n   * @param contractPayload transaction payload to be deployed containing:\n  - classHash: computed class hash of compiled contract\n  - optional constructor calldata\n  - optional address salt  \n  - optional contractAddress\n   * @param transactionsDetail Invocation Details containing:\n  - constant nonce = 0\n  - optional version\n  - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract deployAccount(\n    contractPayload: DeployAccountContractPayload,\n    transactionsDetail?: InvocationsDetails\n  ): Promise<DeployContractResponse>;\n\n  /**\n   * Sign an JSON object for off-chain usage with the starknet private key and return the signature\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param json - JSON object to be signed\n   * @returns the signature of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract signMessage(typedData: TypedData): Promise<Signature>;\n\n  /**\n   * Hash a JSON object with pederson hash and return the hash\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param json - JSON object to be hashed\n   * @returns the hash of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract hashMessage(typedData: TypedData): Promise<string>;\n\n  /**\n   * Verify a signature of a JSON object\n   *\n   * @param typedData - JSON object to be verified\n   * @param signature - signature of the JSON object\n   * @returns true if the signature is valid, false otherwise\n   * @throws {Error} if the JSON object is not a valid JSON or the signature is not a valid signature\n   */\n  public abstract verifyMessage(typedData: TypedData, signature: Signature): Promise<boolean>;\n\n  /**\n   * Verify a signature of a given hash\n   * @warning This method is not recommended, use verifyMessage instead\n   *\n   * @param hash - hash to be verified\n   * @param signature - signature of the hash\n   * @returns true if the signature is valid, false otherwise\n   * @throws {Error} if the signature is not a valid signature\n   */\n  public abstract verifyMessageHash(hash: BigNumberish, signature: Signature): Promise<boolean>;\n\n  /**\n   * Gets the nonce of the account with respect to a specific block\n   *\n   * @param  {BlockIdentifier} blockIdentifier - optional blockIdentifier. Defaults to 'pending'\n   * @returns nonce of the account\n   */\n  public abstract getNonce(blockIdentifier?: BlockIdentifier): Promise<Nonce>;\n\n  /**\n   * Gets Suggested Max Fee based on the transaction type\n   *\n   * @param  {EstimateFeeAction} estimateFeeAction\n   * @param  {EstimateFeeDetails} details\n   * @returns suggestedMaxFee\n   */\n  public abstract getSuggestedMaxFee(\n    estimateFeeAction: EstimateFeeAction,\n    details: EstimateFeeDetails\n  ): Promise<bigint>;\n\n  /**\n   * Simulates an array of transaction and returns an array of transaction trace and estimated fee.\n   *\n   * @param invocations Invocations containing:\n   * - type - transaction type: DECLARE, (multi)DEPLOY, DEPLOY_ACCOUNT, (multi)INVOKE_FUNCTION\n   * @param details SimulateTransactionDetails\n   *\n   * @returns response from simulate_transaction\n   */\n  public abstract simulateTransaction(\n    invocations: Invocations,\n    details?: SimulateTransactionDetails\n  ): Promise<SimulateTransactionResponse>;\n}\n","import {\n  Abi,\n  AbiEnums,\n  AbiEvents,\n  AbiStructs,\n  Cairo1Event,\n  EventAbi,\n  LegacyEvent,\n  ParsedEvent,\n  ParsedEvents,\n} from '../../types';\nimport { Event as ProviderEvent } from '../../types/provider/response';\nimport responseParser from '../calldata/responseParser';\nimport { starkCurve } from '../ec';\nimport { addHexPrefix, utf8ToArray } from '../encode';\n\nexport function getAbiEvents(abi: Abi): AbiEvents {\n  return abi\n    .filter((abiEntry) => abiEntry.type === 'event' && (abiEntry.size || abiEntry.kind !== 'enum'))\n    .reduce((acc, abiEntry) => {\n      const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(':') + 1);\n      const abiEntryMod = { ...abiEntry };\n      abiEntryMod.name = entryName;\n      return {\n        ...acc,\n        [addHexPrefix(starkCurve.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod,\n      };\n    }, {});\n}\n\n/**\n * Parse raw events and structure them into response object based on a contract structs and defined events\n * @param providerReceivedEvents ProviderEvent[] - Array of raw events\n * @param abiEvents AbiEvents - Events defined in the abi\n * @param abiStructs AbiStructs - Structs defined in the abi\n * @return ParsedEvents - parsed events corresponding to the abi\n */\nexport function parseEvents(\n  providerReceivedEvents: Array<ProviderEvent>,\n  abiEvents: AbiEvents,\n  abiStructs: AbiStructs,\n  abiEnums: AbiEnums\n): ParsedEvents {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    const abiEvent: EventAbi = abiEvents[recEvent.keys[0]];\n    if (!abiEvent) {\n      return acc;\n    }\n\n    // Create our final event object\n    const parsedEvent: ParsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    // Remove the event's name hashed from the keys array\n    recEvent.keys.shift();\n\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n\n    const abiEventKeys =\n      (abiEvent as Cairo1Event).members?.filter((it) => it.kind === 'key') ||\n      (abiEvent as LegacyEvent).keys;\n    const abiEventData =\n      (abiEvent as Cairo1Event).members?.filter((it) => it.kind === 'data') ||\n      (abiEvent as LegacyEvent).data;\n\n    abiEventKeys.forEach((key) => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(\n        keysIter,\n        key,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n\n    abiEventData.forEach((data) => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(\n        dataIter,\n        data,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, [] as ParsedEvents);\n  return ret;\n}\n","import type { Abi as AbiKanabi } from 'abi-wan-kanabi';\n\nimport { AccountInterface } from '../account';\nimport { ProviderInterface, defaultProvider } from '../provider';\nimport {\n  Abi,\n  AbiEvents,\n  ArgsOrCalldata,\n  ArgsOrCalldataWithOptions,\n  AsyncContractFunction,\n  Call,\n  CallOptions,\n  Calldata,\n  ContractFunction,\n  ContractOptions,\n  EstimateFeeResponse,\n  FunctionAbi,\n  GetTransactionReceiptResponse,\n  InvokeFunctionResponse,\n  InvokeOptions,\n  InvokeTransactionReceiptResponse,\n  ParsedEvents,\n  RawArgs,\n  Result,\n  StructAbi,\n  ValidateType,\n} from '../types';\nimport assert from '../utils/assert';\nimport { CallData, cairo } from '../utils/calldata';\nimport { createAbiParser } from '../utils/calldata/parser';\nimport { getAbiEvents, parseEvents as parseRawEvents } from '../utils/events/index';\nimport { cleanHex } from '../utils/num';\nimport { ContractInterface, TypedContract } from './interface';\n\nexport const splitArgsAndOptions = (args: ArgsOrCalldataWithOptions) => {\n  const options = [\n    'blockIdentifier',\n    'parseRequest',\n    'parseResponse',\n    'formatResponse',\n    'maxFee',\n    'nonce',\n    'signature',\n    'addressSalt',\n  ];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === 'object' && options.some((x) => x in lastArg)) {\n    return { args: args as ArgsOrCalldata, options: args.pop() as ContractOptions };\n  }\n  return { args: args as ArgsOrCalldata };\n};\n\n/**\n * Adds call methods to the contract\n */\nfunction buildCall(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  return async function (...args: ArgsOrCalldataWithOptions): Promise<any> {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options,\n    });\n  };\n}\n\n/**\n * Adds invoke methods to the contract\n */\nfunction buildInvoke(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  return async function (...args: Array<any>): Promise<any> {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options,\n    });\n  };\n}\n\n/**\n * Adds call/invoke methods to the contract\n */\nfunction buildDefault(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  if (functionAbi.stateMutability === 'view' || functionAbi.state_mutability === 'view') {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\n\n/**\n * Adds populate for methods to the contract\n */\nfunction buildPopulate(contract: Contract, functionAbi: FunctionAbi): ContractFunction {\n  return function (...args: Array<any>): any {\n    return contract.populate(functionAbi.name, args);\n  };\n}\n\n/**\n * Adds estimateFee for methods to the contract\n */\nfunction buildEstimate(contract: Contract, functionAbi: FunctionAbi): ContractFunction {\n  return function (...args: Array<any>): any {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\n\nexport function getCalldata(args: RawArgs, callback: Function): Calldata {\n  // Check if Calldata in args or args[0] else compile\n  if (Array.isArray(args) && '__compiled__' in args) return args as Calldata;\n  if (Array.isArray(args) && Array.isArray(args[0]) && '__compiled__' in args[0])\n    return args[0] as Calldata;\n  return callback();\n}\n\nexport class Contract implements ContractInterface {\n  abi: Abi;\n\n  address: string;\n\n  providerOrAccount: ProviderInterface | AccountInterface;\n\n  deployTransactionHash?: string;\n\n  protected readonly structs: { [name: string]: StructAbi };\n\n  protected readonly events: AbiEvents;\n\n  readonly functions!: { [name: string]: AsyncContractFunction };\n\n  readonly callStatic!: { [name: string]: AsyncContractFunction };\n\n  readonly populateTransaction!: { [name: string]: ContractFunction };\n\n  readonly estimateFee!: { [name: string]: ContractFunction };\n\n  readonly [key: string]: AsyncContractFunction | any;\n\n  private callData: CallData;\n\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(\n    abi: Abi,\n    address: string,\n    providerOrAccount: ProviderInterface | AccountInterface = defaultProvider\n  ) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n\n    const options = { enumerable: true, value: {}, writable: false };\n    Object.defineProperties(this, {\n      functions: { enumerable: true, value: {}, writable: false },\n      callStatic: { enumerable: true, value: {}, writable: false },\n      populateTransaction: { enumerable: true, value: {}, writable: false },\n      estimateFee: { enumerable: true, value: {}, writable: false },\n    });\n    this.abi.forEach((abiElement) => {\n      if (abiElement.type !== 'function') return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement),\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement),\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement),\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement),\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement),\n        });\n      }\n    });\n  }\n\n  public attach(address: string): void {\n    this.address = address;\n  }\n\n  public connect(providerOrAccount: ProviderInterface | AccountInterface) {\n    this.providerOrAccount = providerOrAccount;\n  }\n\n  public async deployed(): Promise<Contract> {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = undefined;\n    }\n    return this;\n  }\n\n  public async call(\n    method: string,\n    args: ArgsOrCalldata = [],\n    {\n      parseRequest = true,\n      parseResponse = true,\n      formatResponse = undefined,\n      blockIdentifier = undefined,\n    }: CallOptions = {}\n  ): Promise<Result> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(ValidateType.CALL, method, args);\n        return this.callData.compile(method, args);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Call skipped parsing but provided rawArgs, possible malfunction request');\n      return args;\n    });\n\n    return this.providerOrAccount\n      .callContract(\n        {\n          contractAddress: this.address,\n          calldata,\n          entrypoint: method,\n        },\n        blockIdentifier\n      )\n      .then((x) => {\n        if (!parseResponse) {\n          return x.result;\n        }\n        if (formatResponse) {\n          return this.callData.format(method, x.result, formatResponse);\n        }\n        return this.callData.parse(method, x.result);\n      });\n  }\n\n  public invoke(\n    method: string,\n    args: ArgsOrCalldata = [],\n    { parseRequest = true, maxFee, nonce, signature }: InvokeOptions = {}\n  ): Promise<InvokeFunctionResponse> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(ValidateType.INVOKE, method, args);\n        return this.callData.compile(method, args);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Invoke skipped parsing but provided rawArgs, possible malfunction request');\n      return args;\n    });\n\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method,\n    };\n    if ('execute' in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, undefined, {\n        maxFee,\n        nonce,\n      });\n    }\n\n    if (!nonce) throw new Error(`Nonce is required when invoking a function without an account`);\n    // eslint-disable-next-line no-console\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n\n    return this.providerOrAccount.invokeFunction(\n      {\n        ...invocation,\n        signature,\n      },\n      {\n        nonce,\n      }\n    );\n  }\n\n  public async estimate(method: string, args: ArgsOrCalldata = []): Promise<EstimateFeeResponse> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(ValidateType.INVOKE, method, args);\n    }\n\n    const invocation = this.populate(method, args);\n    if ('estimateInvokeFee' in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error('Contract must be connected to the account contract to estimate');\n  }\n\n  public populate(method: string, args: RawArgs = []): Call {\n    const calldata: Calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata,\n    };\n  }\n\n  public parseEvents(receipt: GetTransactionReceiptResponse): ParsedEvents {\n    return parseRawEvents(\n      (receipt as InvokeTransactionReceiptResponse).events?.filter(\n        (event) => cleanHex(event.from_address) === cleanHex(this.address),\n        []\n      ) || [],\n      this.events,\n      this.structs,\n      CallData.getAbiEnum(this.abi)\n    );\n  }\n\n  public isCairo1(): boolean {\n    return cairo.isCairo1Abi(this.abi);\n  }\n\n  public async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n\n  public typed<TAbi extends AbiKanabi>(tAbi: TAbi): TypedContract<TAbi> {\n    return this as TypedContract<typeof tAbi>;\n  }\n}\n","import type { Abi as AbiKanabi, TypedContract as AbiWanTypedContract } from 'abi-wan-kanabi';\n\nimport { AccountInterface } from '../account';\nimport { ProviderInterface } from '../provider';\nimport {\n  Abi,\n  ArgsOrCalldata,\n  AsyncContractFunction,\n  BlockIdentifier,\n  CallOptions,\n  ContractFunction,\n  ContractVersion,\n  EstimateFeeResponse,\n  GetTransactionReceiptResponse,\n  Invocation,\n  InvokeFunctionResponse,\n  InvokeOptions,\n  ParsedEvents,\n  Result,\n} from '../types';\n\nexport type TypedContract<TAbi extends AbiKanabi> = AbiWanTypedContract<TAbi> & ContractInterface;\n\nexport abstract class ContractInterface {\n  public abstract abi: Abi;\n\n  public abstract address: string;\n\n  public abstract providerOrAccount: ProviderInterface | AccountInterface;\n\n  public abstract deployTransactionHash?: string;\n\n  readonly functions!: { [name: string]: AsyncContractFunction };\n\n  readonly callStatic!: { [name: string]: AsyncContractFunction };\n\n  readonly populateTransaction!: { [name: string]: ContractFunction };\n\n  readonly estimateFee!: { [name: string]: ContractFunction };\n\n  readonly [key: string]: AsyncContractFunction | any;\n\n  /**\n   * Saves the address of the contract deployed on network that will be used for interaction\n   *\n   * @param address - address of the contract\n   */\n  public abstract attach(address: string): void;\n\n  /**\n   * Attaches to new Provider or Account\n   *\n   * @param providerOrAccount - new Provider or Account to attach to\n   */\n  public abstract connect(providerOrAccount: ProviderInterface | AccountInterface): void;\n\n  /**\n   * Resolves when contract is deployed on the network or when no deployment transaction is found\n   *\n   * @returns Promise that resolves when contract is deployed on the network or when no deployment transaction is found\n   * @throws When deployment fails\n   */\n  public abstract deployed(): Promise<ContractInterface>;\n\n  /**\n   * Calls a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call\n   * @param options optional blockIdentifier\n   * @returns Result of the call as an array with key value pars\n   */\n  public abstract call(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: CallOptions\n  ): Promise<Result>;\n\n  /**\n   * Invokes a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the invoke or Calldata\n   * @param options\n   * @returns Add Transaction Response\n   */\n  public abstract invoke(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: InvokeOptions\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Estimates a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call or Calldata\n   * @param options optional blockIdentifier\n   */\n  public abstract estimate(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: {\n      blockIdentifier?: BlockIdentifier;\n    }\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Calls a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call or Calldata\n   * @returns Invocation object\n   */\n  public abstract populate(method: string, args?: ArgsOrCalldata): Invocation;\n\n  /**\n   * Parse contract events of a GetTransactionReceiptResponse received from waitForTransaction. Based on contract's abi\n   *\n   * @param receipt transaction receipt\n   * @returns Events parsed\n   */\n  public abstract parseEvents(receipt: GetTransactionReceiptResponse): ParsedEvents;\n\n  /**\n   * tells if the contract comes from a Cairo 1 contract\n   *\n   * @returns TRUE if the contract comes from a Cairo1 contract\n   * @example\n   * ```typescript\n   * const isCairo1: boolean = myContract.isCairo1();\n   * ```\n   */\n  public abstract isCairo1(): boolean;\n\n  /**\n   * Retrieves the version of the contract (cairo version & compiler version)\n   */\n  public abstract getVersion(): Promise<ContractVersion>;\n\n  public abstract typed<TAbi extends AbiKanabi>(tAbi: TAbi): TypedContract<TAbi>;\n}\n","import { AccountInterface } from '../account';\nimport {\n  Abi,\n  ArgsOrCalldataWithOptions,\n  CairoAssembly,\n  CompiledContract,\n  ValidateType,\n} from '../types';\nimport assert from '../utils/assert';\nimport { CallData } from '../utils/calldata';\nimport { Contract, getCalldata, splitArgsAndOptions } from './default';\n\nexport type ContractFactoryParams = {\n  compiledContract: CompiledContract;\n  account: any;\n  casm?: CairoAssembly;\n  classHash?: string;\n  compiledClassHash?: string;\n  abi?: Abi;\n};\n\nexport class ContractFactory {\n  compiledContract: CompiledContract;\n\n  account: AccountInterface;\n\n  abi: Abi;\n\n  classHash?: string;\n\n  casm?: CairoAssembly;\n\n  compiledClassHash?: string;\n\n  private CallData: CallData;\n\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params: ContractFactoryParams) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  public async deploy(...args: ArgsOrCalldataWithOptions): Promise<Contract> {\n    const { args: param, options = { parseRequest: true } } = splitArgsAndOptions(args);\n\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(ValidateType.DEPLOY, 'constructor', param);\n        return this.CallData.compile('constructor', param);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Call skipped parsing but provided rawArgs, possible malfunction request');\n      return param;\n    });\n\n    const {\n      deploy: { contract_address, transaction_hash },\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt,\n    });\n    assert(Boolean(contract_address), 'Deployment of the contract failed');\n\n    const contractInstance = new Contract(\n      this.compiledContract.abi,\n      contract_address!,\n      this.account\n    );\n    contractInstance.deployTransactionHash = transaction_hash;\n\n    return contractInstance;\n  }\n\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account: AccountInterface): ContractFactory {\n    this.account = account;\n    return this;\n  }\n\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address: string): Contract {\n    return new Contract(this.abi, address, this.account);\n  }\n\n  // ethers.js' getDeployTransaction cant be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n}\n","/* eslint-disable no-bitwise */\nimport { hexToBytes } from '@noble/curves/abstract/utils';\n\nimport { MASK_251, ZERO } from '../constants';\nimport { BigNumberish } from '../types';\nimport { addHexPrefix, removeHexPrefix } from './encode';\nimport { keccakBn } from './hash';\nimport { assertInRange, toHex } from './num';\n\nexport function addAddressPadding(address: BigNumberish): string {\n  return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, '0'));\n}\n\nexport function validateAndParseAddress(address: BigNumberish): string {\n  assertInRange(address, ZERO, MASK_251, 'Starknet Address');\n\n  const result = addAddressPadding(address);\n\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error('Invalid Address Format');\n  }\n\n  return result;\n}\n\n// from https://github.com/ethers-io/ethers.js/blob/fc1e006575d59792fa97b4efb9ea2f8cca1944cf/packages/address/src.ts/index.ts#L12\nexport function getChecksumAddress(address: BigNumberish): string {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split('');\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = hexToBytes(hex.padStart(64, '0'));\n\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return addHexPrefix(chars.join(''));\n}\n\nexport function validateChecksumAddress(address: string): boolean {\n  return getChecksumAddress(address) === address;\n}\n","/**\n * Main\n */\nexport * from './account';\nexport * from './contract';\nexport * from './provider';\nexport * from './signer';\n\n// TODO: decide on final export style\nexport * from './types';\nexport * as types from './types';\n\n/**\n * Utils\n */\nexport * as constants from './constants';\nexport * as encode from './utils/encode';\nexport * as hash from './utils/hash';\nexport * as json from './utils/json';\nexport * as num from './utils/num';\nexport * as transaction from './utils/transaction';\nexport * as stark from './utils/stark';\nexport * as merkle from './utils/merkle';\nexport * as uint256 from './utils/uint256';\nexport * as shortString from './utils/shortString';\nexport * as typedData from './utils/typedData';\nexport * as ec from './utils/ec';\nexport * as starknetId from './utils/starknetId';\nexport * as provider from './utils/provider';\nexport * as selector from './utils/selector';\nexport * as events from './utils/events/index';\nexport * from './utils/address';\nexport * from './utils/url';\nexport * from './utils/calldata';\nexport * from './utils/calldata/enum';\nexport * from './utils/contract';\nexport * from './utils/events';\n\n/**\n * Deprecated\n */\n/* eslint-disable import/first */\nimport * as num from './utils/num';\n\n/** @deprecated prefer the 'num' naming */\nexport const number = num;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}