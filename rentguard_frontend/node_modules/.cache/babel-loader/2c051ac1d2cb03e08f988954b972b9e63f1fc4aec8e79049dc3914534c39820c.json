{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Poseidon Hash: https://eprint.iacr.org/2019/458.pdf, https://www.poseidon-hash.info\nimport { FpPow, validateField } from './modular.js';\nexport function validateOpts(opts) {\n  const {\n    Fp,\n    mds,\n    reversePartialPowIdx: rev,\n    roundConstants: rc\n  } = opts;\n  const {\n    roundsFull,\n    roundsPartial,\n    sboxPower,\n    t\n  } = opts;\n  validateField(Fp);\n  for (const i of ['t', 'roundsFull', 'roundsPartial']) {\n    if (typeof opts[i] !== 'number' || !Number.isSafeInteger(opts[i])) throw new Error(`Poseidon: invalid param ${i}=${opts[i]} (${typeof opts[i]})`);\n  }\n  // MDS is TxT matrix\n  if (!Array.isArray(mds) || mds.length !== t) throw new Error('Poseidon: wrong MDS matrix');\n  const _mds = mds.map(mdsRow => {\n    if (!Array.isArray(mdsRow) || mdsRow.length !== t) throw new Error(`Poseidon MDS matrix row: ${mdsRow}`);\n    return mdsRow.map(i => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon MDS matrix value=${i}`);\n      return Fp.create(i);\n    });\n  });\n  if (rev !== undefined && typeof rev !== 'boolean') throw new Error(`Poseidon: invalid param reversePartialPowIdx=${rev}`);\n  if (roundsFull % 2 !== 0) throw new Error(`Poseidon roundsFull is not even: ${roundsFull}`);\n  const rounds = roundsFull + roundsPartial;\n  if (!Array.isArray(rc) || rc.length !== rounds) throw new Error('Poseidon: wrong round constants');\n  const roundConstants = rc.map(rc => {\n    if (!Array.isArray(rc) || rc.length !== t) throw new Error(`Poseidon wrong round constants: ${rc}`);\n    return rc.map(i => {\n      if (typeof i !== 'bigint' || !Fp.isValid(i)) throw new Error(`Poseidon wrong round constant=${i}`);\n      return Fp.create(i);\n    });\n  });\n  if (!sboxPower || ![3, 5, 7].includes(sboxPower)) throw new Error(`Poseidon wrong sboxPower=${sboxPower}`);\n  const _sboxPower = BigInt(sboxPower);\n  let sboxFn = n => FpPow(Fp, n, _sboxPower);\n  // Unwrapped sbox power for common cases (195->142μs)\n  if (sboxPower === 3) sboxFn = n => Fp.mul(Fp.sqrN(n), n);else if (sboxPower === 5) sboxFn = n => Fp.mul(Fp.sqrN(Fp.sqrN(n)), n);\n  return Object.freeze({\n    ...opts,\n    rounds,\n    sboxFn,\n    roundConstants,\n    mds: _mds\n  });\n}\nexport function splitConstants(rc, t) {\n  if (typeof t !== 'number') throw new Error('poseidonSplitConstants: wrong t');\n  if (!Array.isArray(rc) || rc.length % t) throw new Error('poseidonSplitConstants: wrong rc');\n  const res = [];\n  let tmp = [];\n  for (let i = 0; i < rc.length; i++) {\n    tmp.push(rc[i]);\n    if (tmp.length === t) {\n      res.push(tmp);\n      tmp = [];\n    }\n  }\n  return res;\n}\nexport function poseidon(opts) {\n  const _opts = validateOpts(opts);\n  const {\n    Fp,\n    mds,\n    roundConstants,\n    rounds,\n    roundsPartial,\n    sboxFn,\n    t\n  } = _opts;\n  const halfRoundsFull = _opts.roundsFull / 2;\n  const partialIdx = _opts.reversePartialPowIdx ? t - 1 : 0;\n  const poseidonRound = (values, isFull, idx) => {\n    values = values.map((i, j) => Fp.add(i, roundConstants[idx][j]));\n    if (isFull) values = values.map(i => sboxFn(i));else values[partialIdx] = sboxFn(values[partialIdx]);\n    // Matrix multiplication\n    values = mds.map(i => i.reduce((acc, i, j) => Fp.add(acc, Fp.mulN(i, values[j])), Fp.ZERO));\n    return values;\n  };\n  const poseidonHash = function poseidonHash(values) {\n    if (!Array.isArray(values) || values.length !== t) throw new Error(`Poseidon: wrong values (expected array of bigints with length ${t})`);\n    values = values.map(i => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon: wrong value=${i} (${typeof i})`);\n      return Fp.create(i);\n    });\n    let round = 0;\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n    // Apply r_p partial rounds.\n    for (let i = 0; i < roundsPartial; i++) values = poseidonRound(values, false, round++);\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n    if (round !== rounds) throw new Error(`Poseidon: wrong number of rounds: last round=${round}, total=${rounds}`);\n    return values;\n  };\n  // For verification in tests\n  poseidonHash.roundConstants = roundConstants;\n  return poseidonHash;\n}","map":{"version":3,"names":["FpPow","validateField","validateOpts","opts","Fp","mds","reversePartialPowIdx","rev","roundConstants","rc","roundsFull","roundsPartial","sboxPower","t","i","Number","isSafeInteger","Error","Array","isArray","length","_mds","map","mdsRow","create","undefined","rounds","isValid","includes","_sboxPower","BigInt","sboxFn","n","mul","sqrN","Object","freeze","splitConstants","res","tmp","push","poseidon","_opts","halfRoundsFull","partialIdx","poseidonRound","values","isFull","idx","j","add","reduce","acc","mulN","ZERO","poseidonHash","round"],"sources":["/Users/sean/Desktop/BinanceSimulator/mern-exercise-tracker/node_modules/@noble/curves/src/abstract/poseidon.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Poseidon Hash: https://eprint.iacr.org/2019/458.pdf, https://www.poseidon-hash.info\nimport { IField, FpPow, validateField } from './modular.js';\n// We don't provide any constants, since different implementations use different constants.\n// For reference constants see './test/poseidon.test.js'.\nexport type PoseidonOpts = {\n  Fp: IField<bigint>;\n  t: number;\n  roundsFull: number;\n  roundsPartial: number;\n  sboxPower?: number;\n  reversePartialPowIdx?: boolean; // Hack for stark\n  mds: bigint[][];\n  roundConstants: bigint[][];\n};\n\nexport function validateOpts(opts: PoseidonOpts) {\n  const { Fp, mds, reversePartialPowIdx: rev, roundConstants: rc } = opts;\n  const { roundsFull, roundsPartial, sboxPower, t } = opts;\n\n  validateField(Fp);\n  for (const i of ['t', 'roundsFull', 'roundsPartial'] as const) {\n    if (typeof opts[i] !== 'number' || !Number.isSafeInteger(opts[i]))\n      throw new Error(`Poseidon: invalid param ${i}=${opts[i]} (${typeof opts[i]})`);\n  }\n\n  // MDS is TxT matrix\n  if (!Array.isArray(mds) || mds.length !== t) throw new Error('Poseidon: wrong MDS matrix');\n  const _mds = mds.map((mdsRow) => {\n    if (!Array.isArray(mdsRow) || mdsRow.length !== t)\n      throw new Error(`Poseidon MDS matrix row: ${mdsRow}`);\n    return mdsRow.map((i) => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon MDS matrix value=${i}`);\n      return Fp.create(i);\n    });\n  });\n\n  if (rev !== undefined && typeof rev !== 'boolean')\n    throw new Error(`Poseidon: invalid param reversePartialPowIdx=${rev}`);\n\n  if (roundsFull % 2 !== 0) throw new Error(`Poseidon roundsFull is not even: ${roundsFull}`);\n  const rounds = roundsFull + roundsPartial;\n\n  if (!Array.isArray(rc) || rc.length !== rounds)\n    throw new Error('Poseidon: wrong round constants');\n  const roundConstants = rc.map((rc) => {\n    if (!Array.isArray(rc) || rc.length !== t)\n      throw new Error(`Poseidon wrong round constants: ${rc}`);\n    return rc.map((i) => {\n      if (typeof i !== 'bigint' || !Fp.isValid(i))\n        throw new Error(`Poseidon wrong round constant=${i}`);\n      return Fp.create(i);\n    });\n  });\n\n  if (!sboxPower || ![3, 5, 7].includes(sboxPower))\n    throw new Error(`Poseidon wrong sboxPower=${sboxPower}`);\n  const _sboxPower = BigInt(sboxPower);\n  let sboxFn = (n: bigint) => FpPow(Fp, n, _sboxPower);\n  // Unwrapped sbox power for common cases (195->142μs)\n  if (sboxPower === 3) sboxFn = (n: bigint) => Fp.mul(Fp.sqrN(n), n);\n  else if (sboxPower === 5) sboxFn = (n: bigint) => Fp.mul(Fp.sqrN(Fp.sqrN(n)), n);\n\n  return Object.freeze({ ...opts, rounds, sboxFn, roundConstants, mds: _mds });\n}\n\nexport function splitConstants(rc: bigint[], t: number) {\n  if (typeof t !== 'number') throw new Error('poseidonSplitConstants: wrong t');\n  if (!Array.isArray(rc) || rc.length % t) throw new Error('poseidonSplitConstants: wrong rc');\n  const res = [];\n  let tmp = [];\n  for (let i = 0; i < rc.length; i++) {\n    tmp.push(rc[i]);\n    if (tmp.length === t) {\n      res.push(tmp);\n      tmp = [];\n    }\n  }\n  return res;\n}\n\nexport function poseidon(opts: PoseidonOpts) {\n  const _opts = validateOpts(opts);\n  const { Fp, mds, roundConstants, rounds, roundsPartial, sboxFn, t } = _opts;\n  const halfRoundsFull = _opts.roundsFull / 2;\n  const partialIdx = _opts.reversePartialPowIdx ? t - 1 : 0;\n  const poseidonRound = (values: bigint[], isFull: boolean, idx: number) => {\n    values = values.map((i, j) => Fp.add(i, roundConstants[idx][j]));\n\n    if (isFull) values = values.map((i) => sboxFn(i));\n    else values[partialIdx] = sboxFn(values[partialIdx]);\n    // Matrix multiplication\n    values = mds.map((i) => i.reduce((acc, i, j) => Fp.add(acc, Fp.mulN(i, values[j])), Fp.ZERO));\n    return values;\n  };\n  const poseidonHash = function poseidonHash(values: bigint[]) {\n    if (!Array.isArray(values) || values.length !== t)\n      throw new Error(`Poseidon: wrong values (expected array of bigints with length ${t})`);\n    values = values.map((i) => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon: wrong value=${i} (${typeof i})`);\n      return Fp.create(i);\n    });\n    let round = 0;\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n    // Apply r_p partial rounds.\n    for (let i = 0; i < roundsPartial; i++) values = poseidonRound(values, false, round++);\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n\n    if (round !== rounds)\n      throw new Error(`Poseidon: wrong number of rounds: last round=${round}, total=${rounds}`);\n    return values;\n  };\n  // For verification in tests\n  poseidonHash.roundConstants = roundConstants;\n  return poseidonHash;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}